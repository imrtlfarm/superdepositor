{
	"id": "6b17d4f4342ff0d82952c3416165ece9",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"SuperDepositor.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity 0.8.13;\r\n\r\nimport \"./interfaces/IBeetVault.sol\";\r\nimport \"./interfaces/IVault.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\n\r\n/// @title Greeter\r\n/// @author andreas@nascent.xyz\r\ncontract SuperDepositor {\r\n\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    address public immutable balVault;\r\n\r\n    // this will hold all the data we need to:\r\n    // 1. Deposit our funds into Beethoven and obtain LPs\r\n    // 2. Deposit those LPs into reaper and obtain vault shares\r\n    // 3. Transfer those vault shares to the intended recipient\r\n    struct DepositParams {\r\n        IAsset[] underlyings;\r\n        uint256 depositTokenIndex;\r\n        bytes32 beetsPoolId;\r\n        address lpToken; // needed for approval to deposit\r\n        address vault;\r\n        address recipient;\r\n    }\r\n\r\n    constructor(address _balVault) {\r\n        balVault = _balVault;\r\n    }\r\n\r\n    function routeDeposit(DepositParams memory details, uint256 amount) public {\r\n        \r\n    }\r\n\r\n    function singleSideDeposit(DepositParams memory details, uint256 amount) public {\r\n        IERC20Upgradeable inputToken = IERC20Upgradeable(address(details.underlyings[details.depositTokenIndex]));\r\n        inputToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        _joinPool(details.underlyings, amount, details.depositTokenIndex, details.beetsPoolId); // contract has lp tokens\r\n        _depositLPToVault(details.lpToken, details.vault, details.recipient);\r\n    }\r\n\r\n    function _depositLPToVault(address lp, address vault, address recipient) internal {\r\n\r\n        // approve lp\r\n        _approveIfNeeded(vault, lp); // sets to max if needed\r\n\r\n        // deposit lp\r\n        IVault(vault).depositAll();\r\n\r\n        // transfer to user\r\n        IERC20Upgradeable shares = IERC20Upgradeable(vault);\r\n        shares.safeTransfer(recipient, shares.balanceOf(address(this)));\r\n    }\r\n\r\n    function _approveIfNeeded(address spender, address token) internal {\r\n        IERC20Upgradeable token = IERC20Upgradeable(token);\r\n        if (token.allowance(address(this), spender) == uint256(0)) {\r\n            token.safeIncreaseAllowance(spender, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Joins {beetsPoolId} using {underlyings[tokenIndex]} balance;\r\n     */\r\n    function _joinPool(IAsset[] memory underlyings, uint256 amtIn, uint256 tokenIndex, bytes32 beetsPoolId) internal {\r\n        uint8 joinKind = 1;\r\n\r\n        // default values of 0 for all assets except one we're depositing with\r\n        uint256[] memory amountsIn = new uint256[](underlyings.length);\r\n        amountsIn[tokenIndex] = amtIn;\r\n\r\n        uint256 minAmountOut = 1; // fix this later, slippage protection\r\n\r\n        bytes memory userData = abi.encode(joinKind, amountsIn, minAmountOut);\r\n\r\n        IBeetVault.JoinPoolRequest memory request;\r\n        request.assets = underlyings;\r\n        request.maxAmountsIn = amountsIn;\r\n        request.userData = userData;\r\n        request.fromInternalBalance = false;\r\n\r\n        IERC20Upgradeable(address(underlyings[tokenIndex])).safeIncreaseAllowance(balVault, amtIn);\r\n        IBeetVault(balVault).joinPool(beetsPoolId, address(this), address(this), request);\r\n    }\r\n\r\n}\r\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"interfaces/IVault.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IVault {\r\n    function getPricePerFullShare() external view returns (uint256);\r\n    function depositAll() external;\r\n}\r\n"
			},
			"interfaces/IBeetVault.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"./ISignaturesValidator.sol\";\r\nimport \"./ITemporarilyPausable.sol\";\r\nimport \"./IAuthorizer.sol\";\r\nimport \"./IAsset.sol\";\r\n\r\ninterface IBeetVault is ISignaturesValidator, ITemporarilyPausable {\r\n    // Generalities about the Vault:\r\n    //\r\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\r\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\r\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\r\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\r\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\r\n    //\r\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\r\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\r\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\r\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\r\n    //\r\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\r\n\r\n    // Authorizer\r\n    //\r\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\r\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\r\n    // can perform a given action.\r\n\r\n    /**\r\n     * @dev Returns the Vault's Authorizer.\r\n     */\r\n    function getAuthorizer() external view returns (IAuthorizer);\r\n\r\n    /**\r\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\r\n     *\r\n     * Emits an `AuthorizerChanged` event.\r\n     */\r\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\r\n\r\n    /**\r\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\r\n     */\r\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\r\n\r\n    // Relayers\r\n    //\r\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\r\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\r\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\r\n    // this power, two things must occur:\r\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\r\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\r\n    //    functions.\r\n    //  - Each user must approve the relayer to act on their behalf.\r\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\r\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\r\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\r\n\r\n    /**\r\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\r\n     */\r\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\r\n     *\r\n     * Emits a `RelayerApprovalChanged` event.\r\n     */\r\n    function setRelayerApproval(\r\n        address sender,\r\n        address relayer,\r\n        bool approved\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\r\n     */\r\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\r\n\r\n    // Internal Balance\r\n    //\r\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\r\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\r\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\r\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\r\n    //\r\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\r\n    // operations of different kinds, with different senders and recipients, at once.\r\n\r\n    /**\r\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\r\n     */\r\n    function getInternalBalance(address user, IERC20Upgradeable[] memory tokens)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\r\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\r\n     * it lets integrators reuse a user's Vault allowance.\r\n     *\r\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\r\n     */\r\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\r\n\r\n    /**\r\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\r\n     without manual WETH wrapping or unwrapping.\r\n     */\r\n    struct UserBalanceOp {\r\n        UserBalanceOpKind kind;\r\n        IAsset asset;\r\n        uint256 amount;\r\n        address sender;\r\n        address payable recipient;\r\n    }\r\n\r\n    // There are four possible operations in `manageUserBalance`:\r\n    //\r\n    // - DEPOSIT_INTERNAL\r\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\r\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\r\n    //\r\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\r\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\r\n    // relevant for relayers).\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - WITHDRAW_INTERNAL\r\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\r\n    //\r\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\r\n    // it to the recipient as ETH.\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - TRANSFER_INTERNAL\r\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\r\n    //\r\n    // Reverts if the ETH sentinel value is passed.\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - TRANSFER_EXTERNAL\r\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\r\n    // relayers, as it lets them reuse a user's Vault allowance.\r\n    //\r\n    // Reverts if the ETH sentinel value is passed.\r\n    //\r\n    // Emits an `ExternalBalanceTransfer` event.\r\n\r\n    enum UserBalanceOpKind {\r\n        DEPOSIT_INTERNAL,\r\n        WITHDRAW_INTERNAL,\r\n        TRANSFER_INTERNAL,\r\n        TRANSFER_EXTERNAL\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\r\n     * interacting with Pools using Internal Balance.\r\n     *\r\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\r\n     * address.\r\n     */\r\n    event InternalBalanceChanged(address indexed user, IERC20Upgradeable indexed token, int256 delta);\r\n\r\n    /**\r\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\r\n     */\r\n    event ExternalBalanceTransfer(\r\n        IERC20Upgradeable indexed token,\r\n        address indexed sender,\r\n        address recipient,\r\n        uint256 amount\r\n    );\r\n\r\n    // Pools\r\n    //\r\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\r\n    // functionality:\r\n    //\r\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\r\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\r\n    // which increase with the number of registered tokens.\r\n    //\r\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\r\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\r\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\r\n    // independent of the number of registered tokens.\r\n    //\r\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\r\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\r\n\r\n    enum PoolSpecialization {\r\n        GENERAL,\r\n        MINIMAL_SWAP_INFO,\r\n        TWO_TOKEN\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\r\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\r\n     * changed.\r\n     *\r\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\r\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\r\n     *\r\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\r\n     * multiple Pools may share the same contract.\r\n     *\r\n     * Emits a `PoolRegistered` event.\r\n     */\r\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\r\n\r\n    /**\r\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\r\n     */\r\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\r\n\r\n    /**\r\n     * @dev Returns a Pool's contract address and specialization setting.\r\n     */\r\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\r\n\r\n    /**\r\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n     *\r\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\r\n     * exit by receiving registered tokens, and can only swap registered tokens.\r\n     *\r\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\r\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\r\n     * ascending order.\r\n     *\r\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\r\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\r\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\r\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\r\n     * Asset Manager should not be made lightly.\r\n     *\r\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\r\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\r\n     * different Asset Manager.\r\n     *\r\n     * Emits a `TokensRegistered` event.\r\n     */\r\n    function registerTokens(\r\n        bytes32 poolId,\r\n        IERC20Upgradeable[] memory tokens,\r\n        address[] memory assetManagers\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\r\n     */\r\n    event TokensRegistered(bytes32 indexed poolId, IERC20Upgradeable[] tokens, address[] assetManagers);\r\n\r\n    /**\r\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n     *\r\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\r\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\r\n     * must be deregistered in the same `deregisterTokens` call.\r\n     *\r\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\r\n     *\r\n     * Emits a `TokensDeregistered` event.\r\n     */\r\n    function deregisterTokens(bytes32 poolId, IERC20Upgradeable[] memory tokens) external;\r\n\r\n    /**\r\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\r\n     */\r\n    event TokensDeregistered(bytes32 indexed poolId, IERC20Upgradeable[] tokens);\r\n\r\n    /**\r\n     * @dev Returns detailed information for a Pool's registered token.\r\n     *\r\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\r\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\r\n     * equals the sum of `cash` and `managed`.\r\n     *\r\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\r\n     * `managed` or `total` balance to be greater than 2^112 - 1.\r\n     *\r\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\r\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\r\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\r\n     * change for this purpose, and will update `lastChangeBlock`.\r\n     *\r\n     * `assetManager` is the Pool's token Asset Manager.\r\n     */\r\n    function getPoolTokenInfo(bytes32 poolId, IERC20Upgradeable token)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 cash,\r\n            uint256 managed,\r\n            uint256 lastChangeBlock,\r\n            address assetManager\r\n        );\r\n\r\n    /**\r\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\r\n     * the tokens' `balances` changed.\r\n     *\r\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\r\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\r\n     *\r\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\r\n     * order as passed to `registerTokens`.\r\n     *\r\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\r\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\r\n     * instead.\r\n     */\r\n    function getPoolTokens(bytes32 poolId)\r\n        external\r\n        view\r\n        returns (\r\n            IERC20Upgradeable[] memory tokens,\r\n            uint256[] memory balances,\r\n            uint256 lastChangeBlock\r\n        );\r\n\r\n    /**\r\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\r\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\r\n     * Pool shares.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\r\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\r\n     * these maximums.\r\n     *\r\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\r\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\r\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\r\n     * back to the caller (not the sender, which is important for relayers).\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\r\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\r\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\r\n     *\r\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\r\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\r\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\r\n     * directly to the Pool's contract, as is `recipient`.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     */\r\n    function joinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        JoinPoolRequest memory request\r\n    ) external payable;\r\n\r\n    struct JoinPoolRequest {\r\n        IAsset[] assets;\r\n        uint256[] maxAmountsIn;\r\n        bytes userData;\r\n        bool fromInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\r\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\r\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\r\n     * `getPoolTokenInfo`).\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\r\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\r\n     * it just enforces these minimums.\r\n     *\r\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\r\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\r\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\r\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\r\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\r\n     *\r\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\r\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\r\n     * do so will trigger a revert.\r\n     *\r\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\r\n     * `tokens` array. This array must match the Pool's registered tokens.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\r\n     * passed directly to the Pool's contract.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     */\r\n    function exitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address payable recipient,\r\n        ExitPoolRequest memory request\r\n    ) external;\r\n\r\n    struct ExitPoolRequest {\r\n        IAsset[] assets;\r\n        uint256[] minAmountsOut;\r\n        bytes userData;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\r\n     */\r\n    event PoolBalanceChanged(\r\n        bytes32 indexed poolId,\r\n        address indexed liquidityProvider,\r\n        IERC20Upgradeable[] tokens,\r\n        int256[] deltas,\r\n        uint256[] protocolFeeAmounts\r\n    );\r\n\r\n    enum PoolBalanceChangeKind {\r\n        JOIN,\r\n        EXIT\r\n    }\r\n\r\n    // Swaps\r\n    //\r\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\r\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\r\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\r\n    //\r\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\r\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\r\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\r\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\r\n    // individual swaps.\r\n    //\r\n    // There are two swap kinds:\r\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\r\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\r\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\r\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\r\n    //\r\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\r\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\r\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\r\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\r\n    // the final intended token.\r\n    //\r\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\r\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\r\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\r\n    // much less gas than they would otherwise.\r\n    //\r\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\r\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\r\n    // updating the Pool's internal accounting).\r\n    //\r\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\r\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\r\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\r\n    //\r\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\r\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\r\n    //\r\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\r\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\r\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\r\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\r\n    //\r\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\r\n\r\n    enum SwapKind {\r\n        GIVEN_IN,\r\n        GIVEN_OUT\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a swap with a single Pool.\r\n     *\r\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\r\n     * taken from the Pool, which must be greater than or equal to `limit`.\r\n     *\r\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\r\n     * sent to the Pool, which must be less than or equal to `limit`.\r\n     *\r\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\r\n     *\r\n     * Emits a `Swap` event.\r\n     */\r\n    function swap(\r\n        SingleSwap memory singleSwap,\r\n        FundManagement memory funds,\r\n        uint256 limit,\r\n        uint256 deadline\r\n    ) external payable returns (uint256);\r\n\r\n    /**\r\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\r\n     * the `kind` value.\r\n     *\r\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\r\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n    struct SingleSwap {\r\n        bytes32 poolId;\r\n        SwapKind kind;\r\n        IAsset assetIn;\r\n        IAsset assetOut;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\r\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\r\n     *\r\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\r\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\r\n     * the same index in the `assets` array.\r\n     *\r\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\r\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\r\n     * `amountOut` depending on the swap kind.\r\n     *\r\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\r\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\r\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\r\n     *\r\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\r\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\r\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\r\n     * or unwrapped from WETH by the Vault.\r\n     *\r\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\r\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\r\n     *\r\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\r\n     * equivalent `swap` call.\r\n     *\r\n     * Emits `Swap` events.\r\n     */\r\n    function batchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds,\r\n        int256[] memory limits,\r\n        uint256 deadline\r\n    ) external payable returns (int256[] memory);\r\n\r\n    /**\r\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\r\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\r\n     *\r\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\r\n     * from the previous swap, depending on the swap kind.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n    struct BatchSwapStep {\r\n        bytes32 poolId;\r\n        uint256 assetInIndex;\r\n        uint256 assetOutIndex;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\r\n     */\r\n    event Swap(\r\n        bytes32 indexed poolId,\r\n        IERC20Upgradeable indexed tokenIn,\r\n        IERC20Upgradeable indexed tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOut\r\n    );\r\n\r\n    /**\r\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\r\n     * `recipient` account.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\r\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\r\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\r\n     * `joinPool`.\r\n     *\r\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\r\n     * transferred. This matches the behavior of `exitPool`.\r\n     *\r\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\r\n     * revert.\r\n     */\r\n    struct FundManagement {\r\n        address sender;\r\n        bool fromInternalBalance;\r\n        address payable recipient;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\r\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\r\n     *\r\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\r\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\r\n     * receives are the same that an equivalent `batchSwap` call would receive.\r\n     *\r\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\r\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\r\n     * approve them for the Vault, or even know a user's address.\r\n     *\r\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\r\n     * eth_call instead of eth_sendTransaction.\r\n     */\r\n    function queryBatchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds\r\n    ) external returns (int256[] memory assetDeltas);\r\n\r\n    // Asset Management\r\n    //\r\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\r\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\r\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\r\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\r\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\r\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\r\n    //\r\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\r\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\r\n    //\r\n    // This concept is unrelated to the IAsset interface.\r\n\r\n    /**\r\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\r\n     *\r\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\r\n     * operations of different kinds, with different Pools and tokens, at once.\r\n     *\r\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\r\n     */\r\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\r\n\r\n    struct PoolBalanceOp {\r\n        PoolBalanceOpKind kind;\r\n        bytes32 poolId;\r\n        IERC20Upgradeable token;\r\n        uint256 amount;\r\n    }\r\n\r\n    /**\r\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\r\n     *\r\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\r\n     *\r\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\r\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\r\n     */\r\n    enum PoolBalanceOpKind {\r\n        WITHDRAW,\r\n        DEPOSIT,\r\n        UPDATE\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\r\n     */\r\n    event PoolBalanceManaged(\r\n        bytes32 indexed poolId,\r\n        address indexed assetManager,\r\n        IERC20Upgradeable indexed token,\r\n        int256 cashDelta,\r\n        int256 managedDelta\r\n    );\r\n\r\n    // Protocol Fees\r\n    //\r\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\r\n    // permissioned accounts.\r\n    //\r\n    // There are two kinds of protocol fees:\r\n    //\r\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\r\n    //\r\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\r\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\r\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\r\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\r\n    // exiting a Pool in debt without first paying their share.\r\n\r\n    /**\r\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\r\n     * error in some part of the system.\r\n     *\r\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\r\n     *\r\n     * While the contract is paused, the following features are disabled:\r\n     * - depositing and transferring internal balance\r\n     * - transferring external balance (using the Vault's allowance)\r\n     * - swaps\r\n     * - joining Pools\r\n     * - Asset Manager interactions\r\n     *\r\n     * Internal Balance can still be withdrawn, and Pools exited.\r\n     */\r\n    function setPaused(bool paused) external;\r\n\r\n    /**\r\n     * @dev Returns the Vault's WETH instance.\r\n     */\r\n}\r\n"
			},
			"interfaces/IAsset.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\r\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\r\n * types.\r\n *\r\n * This concept is unrelated to a Pool's Asset Managers.\r\n */\r\ninterface IAsset {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n"
			},
			"interfaces/IAuthorizer.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAuthorizer {\r\n    /**\r\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\r\n     */\r\n    function canPerform(\r\n        bytes32 actionId,\r\n        address account,\r\n        address where\r\n    ) external view returns (bool);\r\n}\r\n"
			},
			"interfaces/ITemporarilyPausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITemporarilyPausable {\r\n    /**\r\n     * @dev Emitted every time the pause state changes by `_setPaused`.\r\n     */\r\n    event PausedStateChanged(bool paused);\r\n\r\n    /**\r\n     * @dev Returns the current paused state.\r\n     */\r\n    function getPausedState()\r\n        external\r\n        view\r\n        returns (\r\n            bool paused,\r\n            uint256 pauseWindowEndTime,\r\n            uint256 bufferPeriodEndTime\r\n        );\r\n}\r\n"
			},
			"interfaces/ISignaturesValidator.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\r\n */\r\ninterface ISignaturesValidator {\r\n    /**\r\n     * @dev Returns the EIP712 domain separator.\r\n     */\r\n    function getDomainSeparator() external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Returns the next nonce used by an address to sign messages.\r\n     */\r\n    function getNextNonce(address user) external view returns (uint256);\r\n}\r\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 9,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":1482:13254  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":1482:13254  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_20\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n    tag_6:\n      tag_29\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3430:3521  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6210:6444  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_38\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_39\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_41\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3745:3870  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_42\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      tag_46\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2704:2806  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_47\n      tag_48\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      tag_49\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6931:7358  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_50\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_51\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4066:4255  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_54\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_55\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      tag_57\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_58\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_59\n      swap2\n      swap1\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      tag_62\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_62:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2547:2560  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2579:2584  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2572:2584  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4853:4857  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4869:4882  address owner */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4885:4897  _msgSender() */\n      tag_71\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4885:4895  _msgSender */\n      tag_72\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4885:4897  _msgSender() */\n      jump\t// in\n    tag_71:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4869:4897  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4939  _approve(owner, spender, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4916:4921  owner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4923:4930  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4932:4938  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4915  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4939  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4956:4960  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4949:4960  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_26:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3642:3649  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3668:3680  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3661:3680  return _totalSupply */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n    tag_32:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5656:5660  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5672:5687  address spender */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5690:5702  _msgSender() */\n      tag_77\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5690:5700  _msgSender */\n      tag_72\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5690:5702  _msgSender() */\n      jump\t// in\n    tag_77:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5672:5702  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5750  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5728:5732  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5734:5741  spender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5743:5749  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5727  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5750  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5787  _transfer(from, to, amount) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5770:5774  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5776:5778  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5780:5786  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5769  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5787  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5804:5808  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5797:5808  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3430:3521  function decimals() public view virtual override returns (uint8) {... */\n    tag_35:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3488:3493  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3512:3514  18 */\n      0x12\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3505:3514  return 18 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3430:3521  function decimals() public view virtual override returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6210:6444  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6298:6302  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6314:6327  address owner */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6330:6342  _msgSender() */\n      tag_84\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6330:6340  _msgSender */\n      tag_72\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6330:6342  _msgSender() */\n      jump\t// in\n    tag_84:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6314:6342  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6416  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_85\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6361:6366  owner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6368:6375  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6405:6415  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6402  allowance(owner, spender) */\n      tag_86\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6387:6392  owner */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6394:6401  spender */\n      dup10\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6386  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6402  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6415  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6360  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6416  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n    tag_85:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6433:6437  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6426:6437  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6210:6444  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3745:3870  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_45:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3819:3826  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3854  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3855:3862  account */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3838:3863  return _balances[account] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3745:3870  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2704:2806  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2760:2773  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2792:2799  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2785:2799  return _symbol */\n      dup1\n      sload\n      tag_91\n      swap1\n      tag_65\n      jump\t// in\n    tag_91:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_92\n      swap1\n      tag_65\n      jump\t// in\n    tag_92:\n      dup1\n      iszero\n      tag_93\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_94\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_93)\n    tag_94:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_95:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_95\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_93:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2704:2806  function symbol() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6931:7358  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7024:7028  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7040:7053  address owner */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7056:7068  _msgSender() */\n      tag_97\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7056:7066  _msgSender */\n      tag_72\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7056:7068  _msgSender() */\n      jump\t// in\n    tag_97:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7040:7068  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7078:7102  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7130  allowance(owner, spender) */\n      tag_98\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7115:7120  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7122:7129  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7114  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7130  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7078:7130  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7168:7183  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7148:7164  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7148:7183  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_101\n      jump\t// in\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7319  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_102\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7268:7273  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7275:7282  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7303:7318  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7284:7300  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7284:7318  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7267  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7319  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n    tag_102:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7347:7351  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7340:7351  return true */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6931:7358  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4066:4255  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4145:4149  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4161:4174  address owner */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4177:4189  _msgSender() */\n      tag_104\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4177:4187  _msgSender */\n      tag_72\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4177:4189  _msgSender() */\n      jump\t// in\n    tag_104:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4161:4189  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4227  _transfer(owner, to, amount) */\n      tag_105\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4209:4214  owner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4216:4218  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4220:4226  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4208  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4227  _transfer(owner, to, amount) */\n      jump\t// in\n    tag_105:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4244:4248  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4237:4248  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4066:4255  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4402:4409  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4439  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4440:4445  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4455  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4447:4454  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4455  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4421:4455  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":850:946  function _msgSender() internal view virtual returns (address) {... */\n    tag_72:\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":903:910  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":922:939  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":850:946  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10456:10826  function _approve(... */\n    tag_74:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10604:10605  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10587:10606  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10587:10592  owner */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10587:10606  owner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10579:10647  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_110\n      swap1\n      tag_111\n      jump\t// in\n    tag_110:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_109:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10684:10685  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10665:10686  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10665:10672  spender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10665:10686  spender != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10657:10725  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_113\n      swap1\n      tag_114\n      jump\t// in\n    tag_113:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_112:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10766:10772  amount */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10747  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10754  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10748:10753  owner */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10754  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10763  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10755:10762  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10763  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10772  _allowances[owner][spender] = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10803:10810  spender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10787:10819  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10796:10801  owner */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10787:10819  Approval(owner, spender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10812:10818  amount */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10787:10819  Approval(owner, spender, amount) */\n      mload(0x40)\n      tag_115\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10456:10826  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11107:11548  function _spendAllowance(... */\n    tag_79:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11237:11261  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11264:11289  allowance(owner, spender) */\n      tag_117\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11274:11279  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11281:11288  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11264:11273  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11264:11289  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11237:11289  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11323:11340  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11303:11319  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11303:11340  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11299:11542  if (currentAllowance != type(uint256).max) {... */\n      tag_118\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11384:11390  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11364:11380  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11364:11390  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11356:11424  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap1\n      tag_121\n      jump\t// in\n    tag_120:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11466:11517  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11475:11480  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11482:11489  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11510:11516  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11491:11507  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11491:11516  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11466:11474  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11466:11517  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11299:11542  if (currentAllowance != type(uint256).max) {... */\n    tag_118:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11227:11548  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11107:11548  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7821:8472  function _transfer(... */\n    tag_81:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7963:7964  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7947:7965  from != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7947:7951  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7947:7965  from != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7939:8007  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_125\n      swap1\n      tag_126\n      jump\t// in\n    tag_125:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_124:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8039:8040  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8025:8041  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8025:8027  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8025:8041  to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8017:8081  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_128\n      swap1\n      tag_129\n      jump\t// in\n    tag_128:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_127:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8092:8130  _beforeTokenTransfer(from, to, amount) */\n      tag_130\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8113:8117  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8119:8121  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8123:8129  amount */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8092:8112  _beforeTokenTransfer */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8092:8130  _beforeTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_130:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8141:8160  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8172  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8178  _balances[from] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8173:8177  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8178  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8141:8178  uint256 fromBalance = _balances[from] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8211:8217  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8196:8207  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8196:8217  fromBalance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8188:8260  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_133\n      swap1\n      tag_134\n      jump\t// in\n    tag_133:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_132:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8326:8332  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8312:8323  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8312:8332  fromBalance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8303  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8309  _balances[from] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8304:8308  from */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8309  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8332  _balances[from] = fromBalance - amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8369:8375  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8352:8361  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8352:8365  _balances[to] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8362:8364  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8352:8365  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8352:8375  _balances[to] += amount */\n      dup3\n      dup3\n      sload\n      tag_135\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_135:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8406:8408  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8417  Transfer(from, to, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8400:8404  from */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8417  Transfer(from, to, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8410:8416  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8417  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_136\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_136:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8428:8465  _afterTokenTransfer(from, to, amount) */\n      tag_137\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8448:8452  from */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8454:8456  to */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8458:8464  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8428:8447  _afterTokenTransfer */\n      tag_138\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8428:8465  _afterTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_137:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7929:8472  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7821:8472  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12132:12253  function _beforeTokenTransfer(... */\n    tag_131:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12841:12961  function _afterTokenTransfer(... */\n    tag_138:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:106   */\n    tag_141:\n        /* \"#utility.yul\":59:65   */\n      0x00\n        /* \"#utility.yul\":93:98   */\n      dup2\n        /* \"#utility.yul\":87:99   */\n      mload\n        /* \"#utility.yul\":77:99   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:106   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":112:281   */\n    tag_142:\n        /* \"#utility.yul\":196:207   */\n      0x00\n        /* \"#utility.yul\":230:236   */\n      dup3\n        /* \"#utility.yul\":225:228   */\n      dup3\n        /* \"#utility.yul\":218:237   */\n      mstore\n        /* \"#utility.yul\":270:274   */\n      0x20\n        /* \"#utility.yul\":265:268   */\n      dup3\n        /* \"#utility.yul\":261:275   */\n      add\n        /* \"#utility.yul\":246:275   */\n      swap1\n      pop\n        /* \"#utility.yul\":112:281   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":287:594   */\n    tag_143:\n        /* \"#utility.yul\":355:356   */\n      0x00\n        /* \"#utility.yul\":365:478   */\n    tag_181:\n        /* \"#utility.yul\":379:385   */\n      dup4\n        /* \"#utility.yul\":376:377   */\n      dup2\n        /* \"#utility.yul\":373:386   */\n      lt\n        /* \"#utility.yul\":365:478   */\n      iszero\n      tag_183\n      jumpi\n        /* \"#utility.yul\":464:465   */\n      dup1\n        /* \"#utility.yul\":459:462   */\n      dup3\n        /* \"#utility.yul\":455:466   */\n      add\n        /* \"#utility.yul\":449:467   */\n      mload\n        /* \"#utility.yul\":445:446   */\n      dup2\n        /* \"#utility.yul\":440:443   */\n      dup5\n        /* \"#utility.yul\":436:447   */\n      add\n        /* \"#utility.yul\":429:468   */\n      mstore\n        /* \"#utility.yul\":401:403   */\n      0x20\n        /* \"#utility.yul\":398:399   */\n      dup2\n        /* \"#utility.yul\":394:404   */\n      add\n        /* \"#utility.yul\":389:404   */\n      swap1\n      pop\n        /* \"#utility.yul\":365:478   */\n      jump(tag_181)\n    tag_183:\n        /* \"#utility.yul\":496:502   */\n      dup4\n        /* \"#utility.yul\":493:494   */\n      dup2\n        /* \"#utility.yul\":490:503   */\n      gt\n        /* \"#utility.yul\":487:588   */\n      iszero\n      tag_184\n      jumpi\n        /* \"#utility.yul\":576:577   */\n      0x00\n        /* \"#utility.yul\":567:573   */\n      dup5\n        /* \"#utility.yul\":562:565   */\n      dup5\n        /* \"#utility.yul\":558:574   */\n      add\n        /* \"#utility.yul\":551:578   */\n      mstore\n        /* \"#utility.yul\":487:588   */\n    tag_184:\n        /* \"#utility.yul\":336:594   */\n      pop\n        /* \"#utility.yul\":287:594   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":600:702   */\n    tag_144:\n        /* \"#utility.yul\":641:647   */\n      0x00\n        /* \"#utility.yul\":692:694   */\n      0x1f\n        /* \"#utility.yul\":688:695   */\n      not\n        /* \"#utility.yul\":683:685   */\n      0x1f\n        /* \"#utility.yul\":676:681   */\n      dup4\n        /* \"#utility.yul\":672:686   */\n      add\n        /* \"#utility.yul\":668:696   */\n      and\n        /* \"#utility.yul\":658:696   */\n      swap1\n      pop\n        /* \"#utility.yul\":600:702   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":708:1072   */\n    tag_145:\n        /* \"#utility.yul\":796:799   */\n      0x00\n        /* \"#utility.yul\":824:863   */\n      tag_187\n        /* \"#utility.yul\":857:862   */\n      dup3\n        /* \"#utility.yul\":824:863   */\n      tag_141\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":879:950   */\n      tag_188\n        /* \"#utility.yul\":943:949   */\n      dup2\n        /* \"#utility.yul\":938:941   */\n      dup6\n        /* \"#utility.yul\":879:950   */\n      tag_142\n      jump\t// in\n    tag_188:\n        /* \"#utility.yul\":872:950   */\n      swap4\n      pop\n        /* \"#utility.yul\":959:1011   */\n      tag_189\n        /* \"#utility.yul\":1004:1010   */\n      dup2\n        /* \"#utility.yul\":999:1002   */\n      dup6\n        /* \"#utility.yul\":992:996   */\n      0x20\n        /* \"#utility.yul\":985:990   */\n      dup7\n        /* \"#utility.yul\":981:997   */\n      add\n        /* \"#utility.yul\":959:1011   */\n      tag_143\n      jump\t// in\n    tag_189:\n        /* \"#utility.yul\":1036:1065   */\n      tag_190\n        /* \"#utility.yul\":1058:1064   */\n      dup2\n        /* \"#utility.yul\":1036:1065   */\n      tag_144\n      jump\t// in\n    tag_190:\n        /* \"#utility.yul\":1031:1034   */\n      dup5\n        /* \"#utility.yul\":1027:1066   */\n      add\n        /* \"#utility.yul\":1020:1066   */\n      swap2\n      pop\n        /* \"#utility.yul\":800:1072   */\n      pop\n        /* \"#utility.yul\":708:1072   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1078:1391   */\n    tag_18:\n        /* \"#utility.yul\":1191:1195   */\n      0x00\n        /* \"#utility.yul\":1229:1231   */\n      0x20\n        /* \"#utility.yul\":1218:1227   */\n      dup3\n        /* \"#utility.yul\":1214:1232   */\n      add\n        /* \"#utility.yul\":1206:1232   */\n      swap1\n      pop\n        /* \"#utility.yul\":1278:1287   */\n      dup2\n        /* \"#utility.yul\":1272:1276   */\n      dup2\n        /* \"#utility.yul\":1268:1288   */\n      sub\n        /* \"#utility.yul\":1264:1265   */\n      0x00\n        /* \"#utility.yul\":1253:1262   */\n      dup4\n        /* \"#utility.yul\":1249:1266   */\n      add\n        /* \"#utility.yul\":1242:1289   */\n      mstore\n        /* \"#utility.yul\":1306:1384   */\n      tag_192\n        /* \"#utility.yul\":1379:1383   */\n      dup2\n        /* \"#utility.yul\":1370:1376   */\n      dup5\n        /* \"#utility.yul\":1306:1384   */\n      tag_145\n      jump\t// in\n    tag_192:\n        /* \"#utility.yul\":1298:1384   */\n      swap1\n      pop\n        /* \"#utility.yul\":1078:1391   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1478:1595   */\n    tag_147:\n        /* \"#utility.yul\":1587:1588   */\n      0x00\n        /* \"#utility.yul\":1584:1585   */\n      dup1\n        /* \"#utility.yul\":1577:1589   */\n      revert\n        /* \"#utility.yul\":1724:1850   */\n    tag_149:\n        /* \"#utility.yul\":1761:1768   */\n      0x00\n        /* \"#utility.yul\":1801:1843   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1794:1799   */\n      dup3\n        /* \"#utility.yul\":1790:1844   */\n      and\n        /* \"#utility.yul\":1779:1844   */\n      swap1\n      pop\n        /* \"#utility.yul\":1724:1850   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1856:1952   */\n    tag_150:\n        /* \"#utility.yul\":1893:1900   */\n      0x00\n        /* \"#utility.yul\":1922:1946   */\n      tag_198\n        /* \"#utility.yul\":1940:1945   */\n      dup3\n        /* \"#utility.yul\":1922:1946   */\n      tag_149\n      jump\t// in\n    tag_198:\n        /* \"#utility.yul\":1911:1946   */\n      swap1\n      pop\n        /* \"#utility.yul\":1856:1952   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1958:2080   */\n    tag_151:\n        /* \"#utility.yul\":2031:2055   */\n      tag_200\n        /* \"#utility.yul\":2049:2054   */\n      dup2\n        /* \"#utility.yul\":2031:2055   */\n      tag_150\n      jump\t// in\n    tag_200:\n        /* \"#utility.yul\":2024:2029   */\n      dup2\n        /* \"#utility.yul\":2021:2056   */\n      eq\n        /* \"#utility.yul\":2011:2074   */\n      tag_201\n      jumpi\n        /* \"#utility.yul\":2070:2071   */\n      0x00\n        /* \"#utility.yul\":2067:2068   */\n      dup1\n        /* \"#utility.yul\":2060:2072   */\n      revert\n        /* \"#utility.yul\":2011:2074   */\n    tag_201:\n        /* \"#utility.yul\":1958:2080   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2086:2225   */\n    tag_152:\n        /* \"#utility.yul\":2132:2137   */\n      0x00\n        /* \"#utility.yul\":2170:2176   */\n      dup2\n        /* \"#utility.yul\":2157:2177   */\n      calldataload\n        /* \"#utility.yul\":2148:2177   */\n      swap1\n      pop\n        /* \"#utility.yul\":2186:2219   */\n      tag_203\n        /* \"#utility.yul\":2213:2218   */\n      dup2\n        /* \"#utility.yul\":2186:2219   */\n      tag_151\n      jump\t// in\n    tag_203:\n        /* \"#utility.yul\":2086:2225   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2231:2308   */\n    tag_153:\n        /* \"#utility.yul\":2268:2275   */\n      0x00\n        /* \"#utility.yul\":2297:2302   */\n      dup2\n        /* \"#utility.yul\":2286:2302   */\n      swap1\n      pop\n        /* \"#utility.yul\":2231:2308   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2314:2436   */\n    tag_154:\n        /* \"#utility.yul\":2387:2411   */\n      tag_206\n        /* \"#utility.yul\":2405:2410   */\n      dup2\n        /* \"#utility.yul\":2387:2411   */\n      tag_153\n      jump\t// in\n    tag_206:\n        /* \"#utility.yul\":2380:2385   */\n      dup2\n        /* \"#utility.yul\":2377:2412   */\n      eq\n        /* \"#utility.yul\":2367:2430   */\n      tag_207\n      jumpi\n        /* \"#utility.yul\":2426:2427   */\n      0x00\n        /* \"#utility.yul\":2423:2424   */\n      dup1\n        /* \"#utility.yul\":2416:2428   */\n      revert\n        /* \"#utility.yul\":2367:2430   */\n    tag_207:\n        /* \"#utility.yul\":2314:2436   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2442:2581   */\n    tag_155:\n        /* \"#utility.yul\":2488:2493   */\n      0x00\n        /* \"#utility.yul\":2526:2532   */\n      dup2\n        /* \"#utility.yul\":2513:2533   */\n      calldataload\n        /* \"#utility.yul\":2504:2533   */\n      swap1\n      pop\n        /* \"#utility.yul\":2542:2575   */\n      tag_209\n        /* \"#utility.yul\":2569:2574   */\n      dup2\n        /* \"#utility.yul\":2542:2575   */\n      tag_154\n      jump\t// in\n    tag_209:\n        /* \"#utility.yul\":2442:2581   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2587:3061   */\n    tag_21:\n        /* \"#utility.yul\":2655:2661   */\n      0x00\n        /* \"#utility.yul\":2663:2669   */\n      dup1\n        /* \"#utility.yul\":2712:2714   */\n      0x40\n        /* \"#utility.yul\":2700:2709   */\n      dup4\n        /* \"#utility.yul\":2691:2698   */\n      dup6\n        /* \"#utility.yul\":2687:2710   */\n      sub\n        /* \"#utility.yul\":2683:2715   */\n      slt\n        /* \"#utility.yul\":2680:2799   */\n      iszero\n      tag_211\n      jumpi\n        /* \"#utility.yul\":2718:2797   */\n      tag_212\n      tag_147\n      jump\t// in\n    tag_212:\n        /* \"#utility.yul\":2680:2799   */\n    tag_211:\n        /* \"#utility.yul\":2838:2839   */\n      0x00\n        /* \"#utility.yul\":2863:2916   */\n      tag_213\n        /* \"#utility.yul\":2908:2915   */\n      dup6\n        /* \"#utility.yul\":2899:2905   */\n      dup3\n        /* \"#utility.yul\":2888:2897   */\n      dup7\n        /* \"#utility.yul\":2884:2906   */\n      add\n        /* \"#utility.yul\":2863:2916   */\n      tag_152\n      jump\t// in\n    tag_213:\n        /* \"#utility.yul\":2853:2916   */\n      swap3\n      pop\n        /* \"#utility.yul\":2809:2926   */\n      pop\n        /* \"#utility.yul\":2965:2967   */\n      0x20\n        /* \"#utility.yul\":2991:3044   */\n      tag_214\n        /* \"#utility.yul\":3036:3043   */\n      dup6\n        /* \"#utility.yul\":3027:3033   */\n      dup3\n        /* \"#utility.yul\":3016:3025   */\n      dup7\n        /* \"#utility.yul\":3012:3034   */\n      add\n        /* \"#utility.yul\":2991:3044   */\n      tag_155\n      jump\t// in\n    tag_214:\n        /* \"#utility.yul\":2981:3044   */\n      swap2\n      pop\n        /* \"#utility.yul\":2936:3054   */\n      pop\n        /* \"#utility.yul\":2587:3061   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3067:3157   */\n    tag_156:\n        /* \"#utility.yul\":3101:3108   */\n      0x00\n        /* \"#utility.yul\":3144:3149   */\n      dup2\n        /* \"#utility.yul\":3137:3150   */\n      iszero\n        /* \"#utility.yul\":3130:3151   */\n      iszero\n        /* \"#utility.yul\":3119:3151   */\n      swap1\n      pop\n        /* \"#utility.yul\":3067:3157   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3163:3272   */\n    tag_157:\n        /* \"#utility.yul\":3244:3265   */\n      tag_217\n        /* \"#utility.yul\":3259:3264   */\n      dup2\n        /* \"#utility.yul\":3244:3265   */\n      tag_156\n      jump\t// in\n    tag_217:\n        /* \"#utility.yul\":3239:3242   */\n      dup3\n        /* \"#utility.yul\":3232:3266   */\n      mstore\n        /* \"#utility.yul\":3163:3272   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3278:3488   */\n    tag_24:\n        /* \"#utility.yul\":3365:3369   */\n      0x00\n        /* \"#utility.yul\":3403:3405   */\n      0x20\n        /* \"#utility.yul\":3392:3401   */\n      dup3\n        /* \"#utility.yul\":3388:3406   */\n      add\n        /* \"#utility.yul\":3380:3406   */\n      swap1\n      pop\n        /* \"#utility.yul\":3416:3481   */\n      tag_219\n        /* \"#utility.yul\":3478:3479   */\n      0x00\n        /* \"#utility.yul\":3467:3476   */\n      dup4\n        /* \"#utility.yul\":3463:3480   */\n      add\n        /* \"#utility.yul\":3454:3460   */\n      dup5\n        /* \"#utility.yul\":3416:3481   */\n      tag_157\n      jump\t// in\n    tag_219:\n        /* \"#utility.yul\":3278:3488   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3494:3612   */\n    tag_158:\n        /* \"#utility.yul\":3581:3605   */\n      tag_221\n        /* \"#utility.yul\":3599:3604   */\n      dup2\n        /* \"#utility.yul\":3581:3605   */\n      tag_153\n      jump\t// in\n    tag_221:\n        /* \"#utility.yul\":3576:3579   */\n      dup3\n        /* \"#utility.yul\":3569:3606   */\n      mstore\n        /* \"#utility.yul\":3494:3612   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3618:3840   */\n    tag_28:\n        /* \"#utility.yul\":3711:3715   */\n      0x00\n        /* \"#utility.yul\":3749:3751   */\n      0x20\n        /* \"#utility.yul\":3738:3747   */\n      dup3\n        /* \"#utility.yul\":3734:3752   */\n      add\n        /* \"#utility.yul\":3726:3752   */\n      swap1\n      pop\n        /* \"#utility.yul\":3762:3833   */\n      tag_223\n        /* \"#utility.yul\":3830:3831   */\n      0x00\n        /* \"#utility.yul\":3819:3828   */\n      dup4\n        /* \"#utility.yul\":3815:3832   */\n      add\n        /* \"#utility.yul\":3806:3812   */\n      dup5\n        /* \"#utility.yul\":3762:3833   */\n      tag_158\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":3618:3840   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3846:4465   */\n    tag_31:\n        /* \"#utility.yul\":3923:3929   */\n      0x00\n        /* \"#utility.yul\":3931:3937   */\n      dup1\n        /* \"#utility.yul\":3939:3945   */\n      0x00\n        /* \"#utility.yul\":3988:3990   */\n      0x60\n        /* \"#utility.yul\":3976:3985   */\n      dup5\n        /* \"#utility.yul\":3967:3974   */\n      dup7\n        /* \"#utility.yul\":3963:3986   */\n      sub\n        /* \"#utility.yul\":3959:3991   */\n      slt\n        /* \"#utility.yul\":3956:4075   */\n      iszero\n      tag_225\n      jumpi\n        /* \"#utility.yul\":3994:4073   */\n      tag_226\n      tag_147\n      jump\t// in\n    tag_226:\n        /* \"#utility.yul\":3956:4075   */\n    tag_225:\n        /* \"#utility.yul\":4114:4115   */\n      0x00\n        /* \"#utility.yul\":4139:4192   */\n      tag_227\n        /* \"#utility.yul\":4184:4191   */\n      dup7\n        /* \"#utility.yul\":4175:4181   */\n      dup3\n        /* \"#utility.yul\":4164:4173   */\n      dup8\n        /* \"#utility.yul\":4160:4182   */\n      add\n        /* \"#utility.yul\":4139:4192   */\n      tag_152\n      jump\t// in\n    tag_227:\n        /* \"#utility.yul\":4129:4192   */\n      swap4\n      pop\n        /* \"#utility.yul\":4085:4202   */\n      pop\n        /* \"#utility.yul\":4241:4243   */\n      0x20\n        /* \"#utility.yul\":4267:4320   */\n      tag_228\n        /* \"#utility.yul\":4312:4319   */\n      dup7\n        /* \"#utility.yul\":4303:4309   */\n      dup3\n        /* \"#utility.yul\":4292:4301   */\n      dup8\n        /* \"#utility.yul\":4288:4310   */\n      add\n        /* \"#utility.yul\":4267:4320   */\n      tag_152\n      jump\t// in\n    tag_228:\n        /* \"#utility.yul\":4257:4320   */\n      swap3\n      pop\n        /* \"#utility.yul\":4212:4330   */\n      pop\n        /* \"#utility.yul\":4369:4371   */\n      0x40\n        /* \"#utility.yul\":4395:4448   */\n      tag_229\n        /* \"#utility.yul\":4440:4447   */\n      dup7\n        /* \"#utility.yul\":4431:4437   */\n      dup3\n        /* \"#utility.yul\":4420:4429   */\n      dup8\n        /* \"#utility.yul\":4416:4438   */\n      add\n        /* \"#utility.yul\":4395:4448   */\n      tag_155\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":4385:4448   */\n      swap2\n      pop\n        /* \"#utility.yul\":4340:4458   */\n      pop\n        /* \"#utility.yul\":3846:4465   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4471:4557   */\n    tag_159:\n        /* \"#utility.yul\":4506:4513   */\n      0x00\n        /* \"#utility.yul\":4546:4550   */\n      0xff\n        /* \"#utility.yul\":4539:4544   */\n      dup3\n        /* \"#utility.yul\":4535:4551   */\n      and\n        /* \"#utility.yul\":4524:4551   */\n      swap1\n      pop\n        /* \"#utility.yul\":4471:4557   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4563:4675   */\n    tag_160:\n        /* \"#utility.yul\":4646:4668   */\n      tag_232\n        /* \"#utility.yul\":4662:4667   */\n      dup2\n        /* \"#utility.yul\":4646:4668   */\n      tag_159\n      jump\t// in\n    tag_232:\n        /* \"#utility.yul\":4641:4644   */\n      dup3\n        /* \"#utility.yul\":4634:4669   */\n      mstore\n        /* \"#utility.yul\":4563:4675   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4681:4895   */\n    tag_37:\n        /* \"#utility.yul\":4770:4774   */\n      0x00\n        /* \"#utility.yul\":4808:4810   */\n      0x20\n        /* \"#utility.yul\":4797:4806   */\n      dup3\n        /* \"#utility.yul\":4793:4811   */\n      add\n        /* \"#utility.yul\":4785:4811   */\n      swap1\n      pop\n        /* \"#utility.yul\":4821:4888   */\n      tag_234\n        /* \"#utility.yul\":4885:4886   */\n      0x00\n        /* \"#utility.yul\":4874:4883   */\n      dup4\n        /* \"#utility.yul\":4870:4887   */\n      add\n        /* \"#utility.yul\":4861:4867   */\n      dup5\n        /* \"#utility.yul\":4821:4888   */\n      tag_160\n      jump\t// in\n    tag_234:\n        /* \"#utility.yul\":4681:4895   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4901:5230   */\n    tag_44:\n        /* \"#utility.yul\":4960:4966   */\n      0x00\n        /* \"#utility.yul\":5009:5011   */\n      0x20\n        /* \"#utility.yul\":4997:5006   */\n      dup3\n        /* \"#utility.yul\":4988:4995   */\n      dup5\n        /* \"#utility.yul\":4984:5007   */\n      sub\n        /* \"#utility.yul\":4980:5012   */\n      slt\n        /* \"#utility.yul\":4977:5096   */\n      iszero\n      tag_236\n      jumpi\n        /* \"#utility.yul\":5015:5094   */\n      tag_237\n      tag_147\n      jump\t// in\n    tag_237:\n        /* \"#utility.yul\":4977:5096   */\n    tag_236:\n        /* \"#utility.yul\":5135:5136   */\n      0x00\n        /* \"#utility.yul\":5160:5213   */\n      tag_238\n        /* \"#utility.yul\":5205:5212   */\n      dup5\n        /* \"#utility.yul\":5196:5202   */\n      dup3\n        /* \"#utility.yul\":5185:5194   */\n      dup6\n        /* \"#utility.yul\":5181:5203   */\n      add\n        /* \"#utility.yul\":5160:5213   */\n      tag_152\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":5150:5213   */\n      swap2\n      pop\n        /* \"#utility.yul\":5106:5223   */\n      pop\n        /* \"#utility.yul\":4901:5230   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5236:5710   */\n    tag_60:\n        /* \"#utility.yul\":5304:5310   */\n      0x00\n        /* \"#utility.yul\":5312:5318   */\n      dup1\n        /* \"#utility.yul\":5361:5363   */\n      0x40\n        /* \"#utility.yul\":5349:5358   */\n      dup4\n        /* \"#utility.yul\":5340:5347   */\n      dup6\n        /* \"#utility.yul\":5336:5359   */\n      sub\n        /* \"#utility.yul\":5332:5364   */\n      slt\n        /* \"#utility.yul\":5329:5448   */\n      iszero\n      tag_240\n      jumpi\n        /* \"#utility.yul\":5367:5446   */\n      tag_241\n      tag_147\n      jump\t// in\n    tag_241:\n        /* \"#utility.yul\":5329:5448   */\n    tag_240:\n        /* \"#utility.yul\":5487:5488   */\n      0x00\n        /* \"#utility.yul\":5512:5565   */\n      tag_242\n        /* \"#utility.yul\":5557:5564   */\n      dup6\n        /* \"#utility.yul\":5548:5554   */\n      dup3\n        /* \"#utility.yul\":5537:5546   */\n      dup7\n        /* \"#utility.yul\":5533:5555   */\n      add\n        /* \"#utility.yul\":5512:5565   */\n      tag_152\n      jump\t// in\n    tag_242:\n        /* \"#utility.yul\":5502:5565   */\n      swap3\n      pop\n        /* \"#utility.yul\":5458:5575   */\n      pop\n        /* \"#utility.yul\":5614:5616   */\n      0x20\n        /* \"#utility.yul\":5640:5693   */\n      tag_243\n        /* \"#utility.yul\":5685:5692   */\n      dup6\n        /* \"#utility.yul\":5676:5682   */\n      dup3\n        /* \"#utility.yul\":5665:5674   */\n      dup7\n        /* \"#utility.yul\":5661:5683   */\n      add\n        /* \"#utility.yul\":5640:5693   */\n      tag_152\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":5630:5693   */\n      swap2\n      pop\n        /* \"#utility.yul\":5585:5703   */\n      pop\n        /* \"#utility.yul\":5236:5710   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5716:5896   */\n    tag_161:\n        /* \"#utility.yul\":5764:5841   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":5761:5762   */\n      0x00\n        /* \"#utility.yul\":5754:5842   */\n      mstore\n        /* \"#utility.yul\":5861:5865   */\n      0x22\n        /* \"#utility.yul\":5858:5859   */\n      0x04\n        /* \"#utility.yul\":5851:5866   */\n      mstore\n        /* \"#utility.yul\":5885:5889   */\n      0x24\n        /* \"#utility.yul\":5882:5883   */\n      0x00\n        /* \"#utility.yul\":5875:5890   */\n      revert\n        /* \"#utility.yul\":5902:6222   */\n    tag_65:\n        /* \"#utility.yul\":5946:5952   */\n      0x00\n        /* \"#utility.yul\":5983:5984   */\n      0x02\n        /* \"#utility.yul\":5977:5981   */\n      dup3\n        /* \"#utility.yul\":5973:5985   */\n      div\n        /* \"#utility.yul\":5963:5985   */\n      swap1\n      pop\n        /* \"#utility.yul\":6030:6031   */\n      0x01\n        /* \"#utility.yul\":6024:6028   */\n      dup3\n        /* \"#utility.yul\":6020:6032   */\n      and\n        /* \"#utility.yul\":6051:6069   */\n      dup1\n        /* \"#utility.yul\":6041:6122   */\n      tag_246\n      jumpi\n        /* \"#utility.yul\":6107:6111   */\n      0x7f\n        /* \"#utility.yul\":6099:6105   */\n      dup3\n        /* \"#utility.yul\":6095:6112   */\n      and\n        /* \"#utility.yul\":6085:6112   */\n      swap2\n      pop\n        /* \"#utility.yul\":6041:6122   */\n    tag_246:\n        /* \"#utility.yul\":6169:6171   */\n      0x20\n        /* \"#utility.yul\":6161:6167   */\n      dup3\n        /* \"#utility.yul\":6158:6172   */\n      lt\n        /* \"#utility.yul\":6138:6156   */\n      dup2\n        /* \"#utility.yul\":6135:6173   */\n      sub\n        /* \"#utility.yul\":6132:6216   */\n      tag_247\n      jumpi\n        /* \"#utility.yul\":6188:6206   */\n      tag_248\n      tag_161\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":6132:6216   */\n    tag_247:\n        /* \"#utility.yul\":5953:6222   */\n      pop\n        /* \"#utility.yul\":5902:6222   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6228:6408   */\n    tag_162:\n        /* \"#utility.yul\":6276:6353   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6273:6274   */\n      0x00\n        /* \"#utility.yul\":6266:6354   */\n      mstore\n        /* \"#utility.yul\":6373:6377   */\n      0x11\n        /* \"#utility.yul\":6370:6371   */\n      0x04\n        /* \"#utility.yul\":6363:6378   */\n      mstore\n        /* \"#utility.yul\":6397:6401   */\n      0x24\n        /* \"#utility.yul\":6394:6395   */\n      0x00\n        /* \"#utility.yul\":6387:6402   */\n      revert\n        /* \"#utility.yul\":6414:6719   */\n    tag_88:\n        /* \"#utility.yul\":6454:6457   */\n      0x00\n        /* \"#utility.yul\":6473:6493   */\n      tag_251\n        /* \"#utility.yul\":6491:6492   */\n      dup3\n        /* \"#utility.yul\":6473:6493   */\n      tag_153\n      jump\t// in\n    tag_251:\n        /* \"#utility.yul\":6468:6493   */\n      swap2\n      pop\n        /* \"#utility.yul\":6507:6527   */\n      tag_252\n        /* \"#utility.yul\":6525:6526   */\n      dup4\n        /* \"#utility.yul\":6507:6527   */\n      tag_153\n      jump\t// in\n    tag_252:\n        /* \"#utility.yul\":6502:6527   */\n      swap3\n      pop\n        /* \"#utility.yul\":6661:6662   */\n      dup3\n        /* \"#utility.yul\":6593:6659   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":6589:6663   */\n      sub\n        /* \"#utility.yul\":6586:6587   */\n      dup3\n        /* \"#utility.yul\":6583:6664   */\n      gt\n        /* \"#utility.yul\":6580:6687   */\n      iszero\n      tag_253\n      jumpi\n        /* \"#utility.yul\":6667:6685   */\n      tag_254\n      tag_162\n      jump\t// in\n    tag_254:\n        /* \"#utility.yul\":6580:6687   */\n    tag_253:\n        /* \"#utility.yul\":6711:6712   */\n      dup3\n        /* \"#utility.yul\":6708:6709   */\n      dup3\n        /* \"#utility.yul\":6704:6713   */\n      add\n        /* \"#utility.yul\":6697:6713   */\n      swap1\n      pop\n        /* \"#utility.yul\":6414:6719   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6725:6949   */\n    tag_163:\n        /* \"#utility.yul\":6865:6899   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":6861:6862   */\n      0x00\n        /* \"#utility.yul\":6853:6859   */\n      dup3\n        /* \"#utility.yul\":6849:6863   */\n      add\n        /* \"#utility.yul\":6842:6900   */\n      mstore\n        /* \"#utility.yul\":6934:6941   */\n      0x207a65726f000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6929:6931   */\n      0x20\n        /* \"#utility.yul\":6921:6927   */\n      dup3\n        /* \"#utility.yul\":6917:6932   */\n      add\n        /* \"#utility.yul\":6910:6942   */\n      mstore\n        /* \"#utility.yul\":6725:6949   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6955:7321   */\n    tag_164:\n        /* \"#utility.yul\":7097:7100   */\n      0x00\n        /* \"#utility.yul\":7118:7185   */\n      tag_257\n        /* \"#utility.yul\":7182:7184   */\n      0x25\n        /* \"#utility.yul\":7177:7180   */\n      dup4\n        /* \"#utility.yul\":7118:7185   */\n      tag_142\n      jump\t// in\n    tag_257:\n        /* \"#utility.yul\":7111:7185   */\n      swap2\n      pop\n        /* \"#utility.yul\":7194:7287   */\n      tag_258\n        /* \"#utility.yul\":7283:7286   */\n      dup3\n        /* \"#utility.yul\":7194:7287   */\n      tag_163\n      jump\t// in\n    tag_258:\n        /* \"#utility.yul\":7312:7314   */\n      0x40\n        /* \"#utility.yul\":7307:7310   */\n      dup3\n        /* \"#utility.yul\":7303:7315   */\n      add\n        /* \"#utility.yul\":7296:7315   */\n      swap1\n      pop\n        /* \"#utility.yul\":6955:7321   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7327:7746   */\n    tag_101:\n        /* \"#utility.yul\":7493:7497   */\n      0x00\n        /* \"#utility.yul\":7531:7533   */\n      0x20\n        /* \"#utility.yul\":7520:7529   */\n      dup3\n        /* \"#utility.yul\":7516:7534   */\n      add\n        /* \"#utility.yul\":7508:7534   */\n      swap1\n      pop\n        /* \"#utility.yul\":7580:7589   */\n      dup2\n        /* \"#utility.yul\":7574:7578   */\n      dup2\n        /* \"#utility.yul\":7570:7590   */\n      sub\n        /* \"#utility.yul\":7566:7567   */\n      0x00\n        /* \"#utility.yul\":7555:7564   */\n      dup4\n        /* \"#utility.yul\":7551:7568   */\n      add\n        /* \"#utility.yul\":7544:7591   */\n      mstore\n        /* \"#utility.yul\":7608:7739   */\n      tag_260\n        /* \"#utility.yul\":7734:7738   */\n      dup2\n        /* \"#utility.yul\":7608:7739   */\n      tag_164\n      jump\t// in\n    tag_260:\n        /* \"#utility.yul\":7600:7739   */\n      swap1\n      pop\n        /* \"#utility.yul\":7327:7746   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7752:7975   */\n    tag_165:\n        /* \"#utility.yul\":7892:7926   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":7888:7889   */\n      0x00\n        /* \"#utility.yul\":7880:7886   */\n      dup3\n        /* \"#utility.yul\":7876:7890   */\n      add\n        /* \"#utility.yul\":7869:7927   */\n      mstore\n        /* \"#utility.yul\":7961:7967   */\n      0x7265737300000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":7956:7958   */\n      0x20\n        /* \"#utility.yul\":7948:7954   */\n      dup3\n        /* \"#utility.yul\":7944:7959   */\n      add\n        /* \"#utility.yul\":7937:7968   */\n      mstore\n        /* \"#utility.yul\":7752:7975   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7981:8347   */\n    tag_166:\n        /* \"#utility.yul\":8123:8126   */\n      0x00\n        /* \"#utility.yul\":8144:8211   */\n      tag_263\n        /* \"#utility.yul\":8208:8210   */\n      0x24\n        /* \"#utility.yul\":8203:8206   */\n      dup4\n        /* \"#utility.yul\":8144:8211   */\n      tag_142\n      jump\t// in\n    tag_263:\n        /* \"#utility.yul\":8137:8211   */\n      swap2\n      pop\n        /* \"#utility.yul\":8220:8313   */\n      tag_264\n        /* \"#utility.yul\":8309:8312   */\n      dup3\n        /* \"#utility.yul\":8220:8313   */\n      tag_165\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":8338:8340   */\n      0x40\n        /* \"#utility.yul\":8333:8336   */\n      dup3\n        /* \"#utility.yul\":8329:8341   */\n      add\n        /* \"#utility.yul\":8322:8341   */\n      swap1\n      pop\n        /* \"#utility.yul\":7981:8347   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8353:8772   */\n    tag_111:\n        /* \"#utility.yul\":8519:8523   */\n      0x00\n        /* \"#utility.yul\":8557:8559   */\n      0x20\n        /* \"#utility.yul\":8546:8555   */\n      dup3\n        /* \"#utility.yul\":8542:8560   */\n      add\n        /* \"#utility.yul\":8534:8560   */\n      swap1\n      pop\n        /* \"#utility.yul\":8606:8615   */\n      dup2\n        /* \"#utility.yul\":8600:8604   */\n      dup2\n        /* \"#utility.yul\":8596:8616   */\n      sub\n        /* \"#utility.yul\":8592:8593   */\n      0x00\n        /* \"#utility.yul\":8581:8590   */\n      dup4\n        /* \"#utility.yul\":8577:8594   */\n      add\n        /* \"#utility.yul\":8570:8617   */\n      mstore\n        /* \"#utility.yul\":8634:8765   */\n      tag_266\n        /* \"#utility.yul\":8760:8764   */\n      dup2\n        /* \"#utility.yul\":8634:8765   */\n      tag_166\n      jump\t// in\n    tag_266:\n        /* \"#utility.yul\":8626:8765   */\n      swap1\n      pop\n        /* \"#utility.yul\":8353:8772   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8778:8999   */\n    tag_167:\n        /* \"#utility.yul\":8918:8952   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":8914:8915   */\n      0x00\n        /* \"#utility.yul\":8906:8912   */\n      dup3\n        /* \"#utility.yul\":8902:8916   */\n      add\n        /* \"#utility.yul\":8895:8953   */\n      mstore\n        /* \"#utility.yul\":8987:8991   */\n      0x7373000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":8982:8984   */\n      0x20\n        /* \"#utility.yul\":8974:8980   */\n      dup3\n        /* \"#utility.yul\":8970:8985   */\n      add\n        /* \"#utility.yul\":8963:8992   */\n      mstore\n        /* \"#utility.yul\":8778:8999   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9005:9371   */\n    tag_168:\n        /* \"#utility.yul\":9147:9150   */\n      0x00\n        /* \"#utility.yul\":9168:9235   */\n      tag_269\n        /* \"#utility.yul\":9232:9234   */\n      0x22\n        /* \"#utility.yul\":9227:9230   */\n      dup4\n        /* \"#utility.yul\":9168:9235   */\n      tag_142\n      jump\t// in\n    tag_269:\n        /* \"#utility.yul\":9161:9235   */\n      swap2\n      pop\n        /* \"#utility.yul\":9244:9337   */\n      tag_270\n        /* \"#utility.yul\":9333:9336   */\n      dup3\n        /* \"#utility.yul\":9244:9337   */\n      tag_167\n      jump\t// in\n    tag_270:\n        /* \"#utility.yul\":9362:9364   */\n      0x40\n        /* \"#utility.yul\":9357:9360   */\n      dup3\n        /* \"#utility.yul\":9353:9365   */\n      add\n        /* \"#utility.yul\":9346:9365   */\n      swap1\n      pop\n        /* \"#utility.yul\":9005:9371   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9377:9796   */\n    tag_114:\n        /* \"#utility.yul\":9543:9547   */\n      0x00\n        /* \"#utility.yul\":9581:9583   */\n      0x20\n        /* \"#utility.yul\":9570:9579   */\n      dup3\n        /* \"#utility.yul\":9566:9584   */\n      add\n        /* \"#utility.yul\":9558:9584   */\n      swap1\n      pop\n        /* \"#utility.yul\":9630:9639   */\n      dup2\n        /* \"#utility.yul\":9624:9628   */\n      dup2\n        /* \"#utility.yul\":9620:9640   */\n      sub\n        /* \"#utility.yul\":9616:9617   */\n      0x00\n        /* \"#utility.yul\":9605:9614   */\n      dup4\n        /* \"#utility.yul\":9601:9618   */\n      add\n        /* \"#utility.yul\":9594:9641   */\n      mstore\n        /* \"#utility.yul\":9658:9789   */\n      tag_272\n        /* \"#utility.yul\":9784:9788   */\n      dup2\n        /* \"#utility.yul\":9658:9789   */\n      tag_168\n      jump\t// in\n    tag_272:\n        /* \"#utility.yul\":9650:9789   */\n      swap1\n      pop\n        /* \"#utility.yul\":9377:9796   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9802:9981   */\n    tag_169:\n        /* \"#utility.yul\":9942:9973   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":9938:9939   */\n      0x00\n        /* \"#utility.yul\":9930:9936   */\n      dup3\n        /* \"#utility.yul\":9926:9940   */\n      add\n        /* \"#utility.yul\":9919:9974   */\n      mstore\n        /* \"#utility.yul\":9802:9981   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9987:10353   */\n    tag_170:\n        /* \"#utility.yul\":10129:10132   */\n      0x00\n        /* \"#utility.yul\":10150:10217   */\n      tag_275\n        /* \"#utility.yul\":10214:10216   */\n      0x1d\n        /* \"#utility.yul\":10209:10212   */\n      dup4\n        /* \"#utility.yul\":10150:10217   */\n      tag_142\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":10143:10217   */\n      swap2\n      pop\n        /* \"#utility.yul\":10226:10319   */\n      tag_276\n        /* \"#utility.yul\":10315:10318   */\n      dup3\n        /* \"#utility.yul\":10226:10319   */\n      tag_169\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":10344:10346   */\n      0x20\n        /* \"#utility.yul\":10339:10342   */\n      dup3\n        /* \"#utility.yul\":10335:10347   */\n      add\n        /* \"#utility.yul\":10328:10347   */\n      swap1\n      pop\n        /* \"#utility.yul\":9987:10353   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10359:10778   */\n    tag_121:\n        /* \"#utility.yul\":10525:10529   */\n      0x00\n        /* \"#utility.yul\":10563:10565   */\n      0x20\n        /* \"#utility.yul\":10552:10561   */\n      dup3\n        /* \"#utility.yul\":10548:10566   */\n      add\n        /* \"#utility.yul\":10540:10566   */\n      swap1\n      pop\n        /* \"#utility.yul\":10612:10621   */\n      dup2\n        /* \"#utility.yul\":10606:10610   */\n      dup2\n        /* \"#utility.yul\":10602:10622   */\n      sub\n        /* \"#utility.yul\":10598:10599   */\n      0x00\n        /* \"#utility.yul\":10587:10596   */\n      dup4\n        /* \"#utility.yul\":10583:10600   */\n      add\n        /* \"#utility.yul\":10576:10623   */\n      mstore\n        /* \"#utility.yul\":10640:10771   */\n      tag_278\n        /* \"#utility.yul\":10766:10770   */\n      dup2\n        /* \"#utility.yul\":10640:10771   */\n      tag_170\n      jump\t// in\n    tag_278:\n        /* \"#utility.yul\":10632:10771   */\n      swap1\n      pop\n        /* \"#utility.yul\":10359:10778   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10784:11008   */\n    tag_171:\n        /* \"#utility.yul\":10924:10958   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":10920:10921   */\n      0x00\n        /* \"#utility.yul\":10912:10918   */\n      dup3\n        /* \"#utility.yul\":10908:10922   */\n      add\n        /* \"#utility.yul\":10901:10959   */\n      mstore\n        /* \"#utility.yul\":10993:11000   */\n      0x6472657373000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10988:10990   */\n      0x20\n        /* \"#utility.yul\":10980:10986   */\n      dup3\n        /* \"#utility.yul\":10976:10991   */\n      add\n        /* \"#utility.yul\":10969:11001   */\n      mstore\n        /* \"#utility.yul\":10784:11008   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11014:11380   */\n    tag_172:\n        /* \"#utility.yul\":11156:11159   */\n      0x00\n        /* \"#utility.yul\":11177:11244   */\n      tag_281\n        /* \"#utility.yul\":11241:11243   */\n      0x25\n        /* \"#utility.yul\":11236:11239   */\n      dup4\n        /* \"#utility.yul\":11177:11244   */\n      tag_142\n      jump\t// in\n    tag_281:\n        /* \"#utility.yul\":11170:11244   */\n      swap2\n      pop\n        /* \"#utility.yul\":11253:11346   */\n      tag_282\n        /* \"#utility.yul\":11342:11345   */\n      dup3\n        /* \"#utility.yul\":11253:11346   */\n      tag_171\n      jump\t// in\n    tag_282:\n        /* \"#utility.yul\":11371:11373   */\n      0x40\n        /* \"#utility.yul\":11366:11369   */\n      dup3\n        /* \"#utility.yul\":11362:11374   */\n      add\n        /* \"#utility.yul\":11355:11374   */\n      swap1\n      pop\n        /* \"#utility.yul\":11014:11380   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11386:11805   */\n    tag_126:\n        /* \"#utility.yul\":11552:11556   */\n      0x00\n        /* \"#utility.yul\":11590:11592   */\n      0x20\n        /* \"#utility.yul\":11579:11588   */\n      dup3\n        /* \"#utility.yul\":11575:11593   */\n      add\n        /* \"#utility.yul\":11567:11593   */\n      swap1\n      pop\n        /* \"#utility.yul\":11639:11648   */\n      dup2\n        /* \"#utility.yul\":11633:11637   */\n      dup2\n        /* \"#utility.yul\":11629:11649   */\n      sub\n        /* \"#utility.yul\":11625:11626   */\n      0x00\n        /* \"#utility.yul\":11614:11623   */\n      dup4\n        /* \"#utility.yul\":11610:11627   */\n      add\n        /* \"#utility.yul\":11603:11650   */\n      mstore\n        /* \"#utility.yul\":11667:11798   */\n      tag_284\n        /* \"#utility.yul\":11793:11797   */\n      dup2\n        /* \"#utility.yul\":11667:11798   */\n      tag_172\n      jump\t// in\n    tag_284:\n        /* \"#utility.yul\":11659:11798   */\n      swap1\n      pop\n        /* \"#utility.yul\":11386:11805   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11811:12033   */\n    tag_173:\n        /* \"#utility.yul\":11951:11985   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":11947:11948   */\n      0x00\n        /* \"#utility.yul\":11939:11945   */\n      dup3\n        /* \"#utility.yul\":11935:11949   */\n      add\n        /* \"#utility.yul\":11928:11986   */\n      mstore\n        /* \"#utility.yul\":12020:12025   */\n      0x6573730000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12015:12017   */\n      0x20\n        /* \"#utility.yul\":12007:12013   */\n      dup3\n        /* \"#utility.yul\":12003:12018   */\n      add\n        /* \"#utility.yul\":11996:12026   */\n      mstore\n        /* \"#utility.yul\":11811:12033   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12039:12405   */\n    tag_174:\n        /* \"#utility.yul\":12181:12184   */\n      0x00\n        /* \"#utility.yul\":12202:12269   */\n      tag_287\n        /* \"#utility.yul\":12266:12268   */\n      0x23\n        /* \"#utility.yul\":12261:12264   */\n      dup4\n        /* \"#utility.yul\":12202:12269   */\n      tag_142\n      jump\t// in\n    tag_287:\n        /* \"#utility.yul\":12195:12269   */\n      swap2\n      pop\n        /* \"#utility.yul\":12278:12371   */\n      tag_288\n        /* \"#utility.yul\":12367:12370   */\n      dup3\n        /* \"#utility.yul\":12278:12371   */\n      tag_173\n      jump\t// in\n    tag_288:\n        /* \"#utility.yul\":12396:12398   */\n      0x40\n        /* \"#utility.yul\":12391:12394   */\n      dup3\n        /* \"#utility.yul\":12387:12399   */\n      add\n        /* \"#utility.yul\":12380:12399   */\n      swap1\n      pop\n        /* \"#utility.yul\":12039:12405   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12411:12830   */\n    tag_129:\n        /* \"#utility.yul\":12577:12581   */\n      0x00\n        /* \"#utility.yul\":12615:12617   */\n      0x20\n        /* \"#utility.yul\":12604:12613   */\n      dup3\n        /* \"#utility.yul\":12600:12618   */\n      add\n        /* \"#utility.yul\":12592:12618   */\n      swap1\n      pop\n        /* \"#utility.yul\":12664:12673   */\n      dup2\n        /* \"#utility.yul\":12658:12662   */\n      dup2\n        /* \"#utility.yul\":12654:12674   */\n      sub\n        /* \"#utility.yul\":12650:12651   */\n      0x00\n        /* \"#utility.yul\":12639:12648   */\n      dup4\n        /* \"#utility.yul\":12635:12652   */\n      add\n        /* \"#utility.yul\":12628:12675   */\n      mstore\n        /* \"#utility.yul\":12692:12823   */\n      tag_290\n        /* \"#utility.yul\":12818:12822   */\n      dup2\n        /* \"#utility.yul\":12692:12823   */\n      tag_174\n      jump\t// in\n    tag_290:\n        /* \"#utility.yul\":12684:12823   */\n      swap1\n      pop\n        /* \"#utility.yul\":12411:12830   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12836:13061   */\n    tag_175:\n        /* \"#utility.yul\":12976:13010   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":12972:12973   */\n      0x00\n        /* \"#utility.yul\":12964:12970   */\n      dup3\n        /* \"#utility.yul\":12960:12974   */\n      add\n        /* \"#utility.yul\":12953:13011   */\n      mstore\n        /* \"#utility.yul\":13045:13053   */\n      0x616c616e63650000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":13040:13042   */\n      0x20\n        /* \"#utility.yul\":13032:13038   */\n      dup3\n        /* \"#utility.yul\":13028:13043   */\n      add\n        /* \"#utility.yul\":13021:13054   */\n      mstore\n        /* \"#utility.yul\":12836:13061   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13067:13433   */\n    tag_176:\n        /* \"#utility.yul\":13209:13212   */\n      0x00\n        /* \"#utility.yul\":13230:13297   */\n      tag_293\n        /* \"#utility.yul\":13294:13296   */\n      0x26\n        /* \"#utility.yul\":13289:13292   */\n      dup4\n        /* \"#utility.yul\":13230:13297   */\n      tag_142\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":13223:13297   */\n      swap2\n      pop\n        /* \"#utility.yul\":13306:13399   */\n      tag_294\n        /* \"#utility.yul\":13395:13398   */\n      dup3\n        /* \"#utility.yul\":13306:13399   */\n      tag_175\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":13424:13426   */\n      0x40\n        /* \"#utility.yul\":13419:13422   */\n      dup3\n        /* \"#utility.yul\":13415:13427   */\n      add\n        /* \"#utility.yul\":13408:13427   */\n      swap1\n      pop\n        /* \"#utility.yul\":13067:13433   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13439:13858   */\n    tag_134:\n        /* \"#utility.yul\":13605:13609   */\n      0x00\n        /* \"#utility.yul\":13643:13645   */\n      0x20\n        /* \"#utility.yul\":13632:13641   */\n      dup3\n        /* \"#utility.yul\":13628:13646   */\n      add\n        /* \"#utility.yul\":13620:13646   */\n      swap1\n      pop\n        /* \"#utility.yul\":13692:13701   */\n      dup2\n        /* \"#utility.yul\":13686:13690   */\n      dup2\n        /* \"#utility.yul\":13682:13702   */\n      sub\n        /* \"#utility.yul\":13678:13679   */\n      0x00\n        /* \"#utility.yul\":13667:13676   */\n      dup4\n        /* \"#utility.yul\":13663:13680   */\n      add\n        /* \"#utility.yul\":13656:13703   */\n      mstore\n        /* \"#utility.yul\":13720:13851   */\n      tag_296\n        /* \"#utility.yul\":13846:13850   */\n      dup2\n        /* \"#utility.yul\":13720:13851   */\n      tag_176\n      jump\t// in\n    tag_296:\n        /* \"#utility.yul\":13712:13851   */\n      swap1\n      pop\n        /* \"#utility.yul\":13439:13858   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220dbc8b701afe8e174f06ac9001d43f0558241b1ad44ebe8c7a8f46befcd1c6bd064736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50611267806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b22565b60405180910390f35b6100e660048036038101906100e19190610bdd565b610308565b6040516100f39190610c38565b60405180910390f35b61010461032b565b6040516101119190610c62565b60405180910390f35b610134600480360381019061012f9190610c7d565b610335565b6040516101419190610c38565b60405180910390f35b610152610364565b60405161015f9190610cec565b60405180910390f35b610182600480360381019061017d9190610bdd565b61036d565b60405161018f9190610c38565b60405180910390f35b6101b260048036038101906101ad9190610d07565b6103a4565b6040516101bf9190610c62565b60405180910390f35b6101d06103ed565b6040516101dd9190610b22565b60405180910390f35b61020060048036038101906101fb9190610bdd565b61047f565b60405161020d9190610c38565b60405180910390f35b610230600480360381019061022b9190610bdd565b6104f6565b60405161023d9190610c38565b60405180910390f35b610260600480360381019061025b9190610d34565b610519565b60405161026d9190610c62565b60405180910390f35b60606036805461028590610da3565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610da3565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105a0565b90506103208185856105a8565b600191505092915050565b6000603554905090565b6000806103406105a0565b905061034d858285610771565b6103588585856107fd565b60019150509392505050565b60006012905090565b6000806103786105a0565b905061039981858561038a8589610519565b6103949190610e03565b6105a8565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060603780546103fc90610da3565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610da3565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008061048a6105a0565b905060006104988286610519565b9050838110156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610ecb565b60405180910390fd5b6104ea82868684036105a8565b60019250505092915050565b6000806105016105a0565b905061050e8185856107fd565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90610f5d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90610fef565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107649190610c62565b60405180910390a3505050565b600061077d8484610519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f757818110156107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e09061105b565b60405180910390fd5b6107f684848484036105a8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610863906110ed565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d29061117f565b60405180910390fd5b6108e6838383610a7f565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096490611211565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a029190610e03565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a669190610c62565b60405180910390a3610a79848484610a84565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ac3578082015181840152602081019050610aa8565b83811115610ad2576000848401525b50505050565b6000601f19601f8301169050919050565b6000610af482610a89565b610afe8185610a94565b9350610b0e818560208601610aa5565b610b1781610ad8565b840191505092915050565b60006020820190508181036000830152610b3c8184610ae9565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7482610b49565b9050919050565b610b8481610b69565b8114610b8f57600080fd5b50565b600081359050610ba181610b7b565b92915050565b6000819050919050565b610bba81610ba7565b8114610bc557600080fd5b50565b600081359050610bd781610bb1565b92915050565b60008060408385031215610bf457610bf3610b44565b5b6000610c0285828601610b92565b9250506020610c1385828601610bc8565b9150509250929050565b60008115159050919050565b610c3281610c1d565b82525050565b6000602082019050610c4d6000830184610c29565b92915050565b610c5c81610ba7565b82525050565b6000602082019050610c776000830184610c53565b92915050565b600080600060608486031215610c9657610c95610b44565b5b6000610ca486828701610b92565b9350506020610cb586828701610b92565b9250506040610cc686828701610bc8565b9150509250925092565b600060ff82169050919050565b610ce681610cd0565b82525050565b6000602082019050610d016000830184610cdd565b92915050565b600060208284031215610d1d57610d1c610b44565b5b6000610d2b84828501610b92565b91505092915050565b60008060408385031215610d4b57610d4a610b44565b5b6000610d5985828601610b92565b9250506020610d6a85828601610b92565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610dbb57607f821691505b602082108103610dce57610dcd610d74565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0e82610ba7565b9150610e1983610ba7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e4e57610e4d610dd4565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610eb5602583610a94565b9150610ec082610e59565b604082019050919050565b60006020820190508181036000830152610ee481610ea8565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f47602483610a94565b9150610f5282610eeb565b604082019050919050565b60006020820190508181036000830152610f7681610f3a565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fd9602283610a94565b9150610fe482610f7d565b604082019050919050565b6000602082019050818103600083015261100881610fcc565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611045601d83610a94565b91506110508261100f565b602082019050919050565b6000602082019050818103600083015261107481611038565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110d7602583610a94565b91506110e28261107b565b604082019050919050565b60006020820190508181036000830152611106816110ca565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611169602383610a94565b91506111748261110d565b604082019050919050565b600060208201905081810360008301526111988161115c565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111fb602683610a94565b91506112068261119f565b604082019050919050565b6000602082019050818103600083015261122a816111ee565b905091905056fea2646970667358221220dbc8b701afe8e174f06ac9001d43f0558241b1ad44ebe8c7a8f46befcd1c6bd064736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1267 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC7D JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xD07 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD34 JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xDA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xDA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x3FC SWAP1 PUSH2 0xDA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x428 SWAP1 PUSH2 0xDA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x475 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x44A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x475 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x458 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48A PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP3 DUP7 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0xECB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x501 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x50E DUP2 DUP6 DUP6 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60E SWAP1 PUSH2 0xF5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x686 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67D SWAP1 PUSH2 0xFEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x764 SWAP2 SWAP1 PUSH2 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77D DUP5 DUP5 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F7 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E0 SWAP1 PUSH2 0x105B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F6 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x86C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x863 SWAP1 PUSH2 0x10ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D2 SWAP1 PUSH2 0x117F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E6 DUP4 DUP4 DUP4 PUSH2 0xA7F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x96D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x964 SWAP1 PUSH2 0x1211 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xA02 SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA66 SWAP2 SWAP1 PUSH2 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA79 DUP5 DUP5 DUP5 PUSH2 0xA84 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xAA8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAD2 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAF4 DUP3 PUSH2 0xA89 JUMP JUMPDEST PUSH2 0xAFE DUP2 DUP6 PUSH2 0xA94 JUMP JUMPDEST SWAP4 POP PUSH2 0xB0E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0xB17 DUP2 PUSH2 0xAD8 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB3C DUP2 DUP5 PUSH2 0xAE9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB74 DUP3 PUSH2 0xB49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB84 DUP2 PUSH2 0xB69 JUMP JUMPDEST DUP2 EQ PUSH2 0xB8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBA1 DUP2 PUSH2 0xB7B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBBA DUP2 PUSH2 0xBA7 JUMP JUMPDEST DUP2 EQ PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBD7 DUP2 PUSH2 0xBB1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBF4 JUMPI PUSH2 0xBF3 PUSH2 0xB44 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC02 DUP6 DUP3 DUP7 ADD PUSH2 0xB92 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC13 DUP6 DUP3 DUP7 ADD PUSH2 0xBC8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC32 DUP2 PUSH2 0xC1D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC4D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC29 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC5C DUP2 PUSH2 0xBA7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC77 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC53 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC96 JUMPI PUSH2 0xC95 PUSH2 0xB44 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCA4 DUP7 DUP3 DUP8 ADD PUSH2 0xB92 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCB5 DUP7 DUP3 DUP8 ADD PUSH2 0xB92 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCC6 DUP7 DUP3 DUP8 ADD PUSH2 0xBC8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCE6 DUP2 PUSH2 0xCD0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD01 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCDD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD1D JUMPI PUSH2 0xD1C PUSH2 0xB44 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD2B DUP5 DUP3 DUP6 ADD PUSH2 0xB92 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD4B JUMPI PUSH2 0xD4A PUSH2 0xB44 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD59 DUP6 DUP3 DUP7 ADD PUSH2 0xB92 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD6A DUP6 DUP3 DUP7 ADD PUSH2 0xB92 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDBB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xDCE JUMPI PUSH2 0xDCD PUSH2 0xD74 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE0E DUP3 PUSH2 0xBA7 JUMP JUMPDEST SWAP2 POP PUSH2 0xE19 DUP4 PUSH2 0xBA7 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xE4E JUMPI PUSH2 0xE4D PUSH2 0xDD4 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB5 PUSH1 0x25 DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0xEC0 DUP3 PUSH2 0xE59 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEE4 DUP2 PUSH2 0xEA8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF47 PUSH1 0x24 DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0xF52 DUP3 PUSH2 0xEEB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF76 DUP2 PUSH2 0xF3A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD9 PUSH1 0x22 DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0xFE4 DUP3 PUSH2 0xF7D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1008 DUP2 PUSH2 0xFCC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1045 PUSH1 0x1D DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0x1050 DUP3 PUSH2 0x100F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1074 DUP2 PUSH2 0x1038 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10D7 PUSH1 0x25 DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0x10E2 DUP3 PUSH2 0x107B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1106 DUP2 PUSH2 0x10CA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1169 PUSH1 0x23 DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0x1174 DUP3 PUSH2 0x110D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1198 DUP2 PUSH2 0x115C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11FB PUSH1 0x26 DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0x1206 DUP3 PUSH2 0x119F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x122A DUP2 PUSH2 0x11EE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB 0xC8 0xB7 ADD 0xAF 0xE8 0xE1 PUSH21 0xF06AC9001D43F0558241B1AD44EBE8C7A8F46BEFCD SHR PUSH12 0xD064736F6C634300080D0033 ",
							"sourceMap": "1482:11772:1:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_746": {
									"entryPoint": 2692,
									"id": 746,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_681": {
									"entryPoint": 1448,
									"id": 681,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_735": {
									"entryPoint": 2687,
									"id": 735,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_1349": {
									"entryPoint": 1440,
									"id": 1349,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_724": {
									"entryPoint": 1905,
									"id": 724,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_508": {
									"entryPoint": 2045,
									"id": 508,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_303": {
									"entryPoint": 1305,
									"id": 303,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_328": {
									"entryPoint": 776,
									"id": 328,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_260": {
									"entryPoint": 932,
									"id": 260,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_236": {
									"entryPoint": 868,
									"id": 236,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_431": {
									"entryPoint": 1151,
									"id": 431,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_390": {
									"entryPoint": 877,
									"id": 390,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_216": {
									"entryPoint": 630,
									"id": 216,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_226": {
									"entryPoint": 1005,
									"id": 226,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_246": {
									"entryPoint": 811,
									"id": 246,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_361": {
									"entryPoint": 821,
									"id": 361,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_285": {
									"entryPoint": 1270,
									"id": 285,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 2962,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 3016,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3335,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 3380,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 3197,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3037,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 3113,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2793,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4444,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4044,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4152,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4590,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4298,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3898,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3752,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 3155,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 3293,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 3128,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2850,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4479,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4079,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4187,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4625,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4333,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3933,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3787,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 3170,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 3308,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 2697,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 2708,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3587,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 2921,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 3101,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 2889,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 2983,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 3280,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 2725,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 3491,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3540,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 3444,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 2884,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 2776,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f": {
									"entryPoint": 4365,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029": {
									"entryPoint": 3965,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe": {
									"entryPoint": 4111,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6": {
									"entryPoint": 4511,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea": {
									"entryPoint": 4219,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208": {
									"entryPoint": 3819,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8": {
									"entryPoint": 3673,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 2939,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 2993,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:13861:14",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "66:40:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "77:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "93:5:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "87:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "87:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "77:6:14"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "49:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "59:6:14",
														"type": ""
													}
												],
												"src": "7:99:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "208:73:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "225:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "230:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "218:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "218:19:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "218:19:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "246:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "265:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "270:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "261:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "261:14:14"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "246:11:14"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "180:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "185:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "196:11:14",
														"type": ""
													}
												],
												"src": "112:169:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "336:258:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "346:10:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "355:1:14",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "350:1:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "415:63:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "440:3:14"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "445:1:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "436:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "436:11:14"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "459:3:14"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "464:1:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "455:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "455:11:14"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "449:5:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "449:18:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "429:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "429:39:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "429:39:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "376:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "379:6:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "373:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "373:13:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "387:19:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "389:15:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "398:1:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "401:2:14",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "394:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "394:10:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "389:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "369:3:14",
																"statements": []
															},
															"src": "365:113:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "512:76:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "562:3:14"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "567:6:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "558:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "558:16:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "576:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "551:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "551:27:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "551:27:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "493:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "496:6:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "490:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "490:13:14"
															},
															"nodeType": "YulIf",
															"src": "487:101:14"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "318:3:14",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "323:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "328:6:14",
														"type": ""
													}
												],
												"src": "287:307:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "648:54:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "658:38:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "676:5:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "683:2:14",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "672:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "672:14:14"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "692:2:14",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "688:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "688:7:14"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "668:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "668:28:14"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "658:6:14"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "631:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "641:6:14",
														"type": ""
													}
												],
												"src": "600:102:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "800:272:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "810:53:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "857:5:14"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "824:32:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "824:39:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "814:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "872:78:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "938:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "943:6:14"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "879:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "879:71:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "872:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "985:5:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "992:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "981:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "981:16:14"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "999:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1004:6:14"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "959:21:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "959:52:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "959:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1020:46:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1031:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1058:6:14"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "1036:21:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1036:29:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1027:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1027:39:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1020:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "781:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "788:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "796:3:14",
														"type": ""
													}
												],
												"src": "708:364:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1196:195:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1206:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1218:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1229:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1214:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1214:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1206:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1253:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1264:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1249:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1249:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "1272:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1278:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1268:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1268:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1242:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1242:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1242:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1298:86:14",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1370:6:14"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "1379:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1306:63:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1306:78:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1298:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1168:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1180:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1191:4:14",
														"type": ""
													}
												],
												"src": "1078:313:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1437:35:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1447:19:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1463:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1457:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1457:9:14"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1447:6:14"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1430:6:14",
														"type": ""
													}
												],
												"src": "1397:75:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1567:28:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1584:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1587:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1577:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1577:12:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1577:12:14"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "1478:117:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1690:28:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1707:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1710:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1700:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1700:12:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1700:12:14"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "1601:117:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1769:81:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1779:65:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1794:5:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1801:42:14",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1790:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1790:54:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1779:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1751:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1761:7:14",
														"type": ""
													}
												],
												"src": "1724:126:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1901:51:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1911:35:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1940:5:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "1922:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1922:24:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1911:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1883:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1893:7:14",
														"type": ""
													}
												],
												"src": "1856:96:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2001:79:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2058:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2067:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2070:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2060:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2060:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2060:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2024:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2049:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "2031:17:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2031:24:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2021:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2021:35:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2014:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2014:43:14"
															},
															"nodeType": "YulIf",
															"src": "2011:63:14"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1994:5:14",
														"type": ""
													}
												],
												"src": "1958:122:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2138:87:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2148:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2170:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2157:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2157:20:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2148:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2213:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2186:26:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2186:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2186:33:14"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2116:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2124:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2132:5:14",
														"type": ""
													}
												],
												"src": "2086:139:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2276:32:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2286:16:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2297:5:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2286:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2258:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2268:7:14",
														"type": ""
													}
												],
												"src": "2231:77:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2357:79:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2414:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2423:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2426:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2416:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2416:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2416:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2380:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2405:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "2387:17:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2387:24:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2377:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2377:35:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2370:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2370:43:14"
															},
															"nodeType": "YulIf",
															"src": "2367:63:14"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2350:5:14",
														"type": ""
													}
												],
												"src": "2314:122:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2494:87:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2504:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2526:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2513:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2513:20:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2504:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2569:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2542:26:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2542:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2542:33:14"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2472:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2480:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2488:5:14",
														"type": ""
													}
												],
												"src": "2442:139:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2670:391:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2716:83:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2718:77:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2718:79:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2718:79:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2691:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2700:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2687:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2687:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2712:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2683:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2683:32:14"
															},
															"nodeType": "YulIf",
															"src": "2680:119:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "2809:117:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2824:15:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2838:1:14",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2828:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2853:63:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2888:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2899:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2884:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2884:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2908:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2863:20:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2863:53:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2853:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2936:118:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2951:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2965:2:14",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2955:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2981:63:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3016:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3027:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3012:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3012:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3036:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2991:20:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2991:53:14"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2981:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2632:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2643:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2655:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2663:6:14",
														"type": ""
													}
												],
												"src": "2587:474:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3109:48:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3119:32:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3144:5:14"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3137:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3137:13:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3130:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3130:21:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3119:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3091:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3101:7:14",
														"type": ""
													}
												],
												"src": "3067:90:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3222:50:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3239:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3259:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "3244:14:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3244:21:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3232:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3232:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3232:34:14"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3210:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3217:3:14",
														"type": ""
													}
												],
												"src": "3163:109:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3370:118:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3380:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3392:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3403:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3388:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3388:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3380:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3454:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3467:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3478:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3463:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3463:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3416:37:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3416:65:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3416:65:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3342:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3354:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3365:4:14",
														"type": ""
													}
												],
												"src": "3278:210:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3559:53:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3576:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3599:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3581:17:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3581:24:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3569:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3569:37:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3569:37:14"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3547:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3554:3:14",
														"type": ""
													}
												],
												"src": "3494:118:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3716:124:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3726:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3738:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3749:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3734:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3734:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3726:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3806:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3819:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3830:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3815:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3815:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3762:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3762:71:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3762:71:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3688:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3700:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3711:4:14",
														"type": ""
													}
												],
												"src": "3618:222:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3946:519:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3992:83:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3994:77:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3994:79:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3994:79:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3967:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3976:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3963:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3963:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3988:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3959:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3959:32:14"
															},
															"nodeType": "YulIf",
															"src": "3956:119:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "4085:117:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4100:15:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4114:1:14",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4104:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4129:63:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4164:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4175:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4160:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4160:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4184:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4139:20:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4139:53:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4129:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4212:118:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4227:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4241:2:14",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4231:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4257:63:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4292:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4303:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4288:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4288:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4312:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4267:20:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4267:53:14"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4257:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4340:118:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4355:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4369:2:14",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4359:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4385:63:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4420:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4431:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4416:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4416:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4440:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4395:20:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4395:53:14"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "4385:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3900:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3911:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3923:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3931:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3939:6:14",
														"type": ""
													}
												],
												"src": "3846:619:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4514:43:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4524:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4539:5:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4546:4:14",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4535:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4535:16:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "4524:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4496:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "4506:7:14",
														"type": ""
													}
												],
												"src": "4471:86:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4624:51:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4641:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4662:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nodeType": "YulIdentifier",
																			"src": "4646:15:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4646:22:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4634:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4634:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4634:35:14"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4612:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4619:3:14",
														"type": ""
													}
												],
												"src": "4563:112:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4775:120:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4785:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4797:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4808:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4793:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4793:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4785:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4861:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4874:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4885:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4870:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4870:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4821:39:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4821:67:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4821:67:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4747:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4759:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4770:4:14",
														"type": ""
													}
												],
												"src": "4681:214:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4967:263:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5013:83:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5015:77:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5015:79:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5015:79:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4988:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4997:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4984:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4984:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5009:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4980:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4980:32:14"
															},
															"nodeType": "YulIf",
															"src": "4977:119:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "5106:117:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5121:15:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5135:1:14",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5125:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5150:63:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5185:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5196:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5181:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5181:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5205:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5160:20:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5160:53:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5150:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4937:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4948:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4960:6:14",
														"type": ""
													}
												],
												"src": "4901:329:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5319:391:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5365:83:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5367:77:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5367:79:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5367:79:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5340:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5349:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5336:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5336:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5361:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5332:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5332:32:14"
															},
															"nodeType": "YulIf",
															"src": "5329:119:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "5458:117:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5473:15:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5487:1:14",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5477:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5502:63:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5537:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5548:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5533:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5533:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5557:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5512:20:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5512:53:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5502:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5585:118:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5600:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5614:2:14",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5604:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5630:63:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5665:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5676:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5661:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5661:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5685:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5640:20:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5640:53:14"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "5630:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5281:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5292:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5304:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5312:6:14",
														"type": ""
													}
												],
												"src": "5236:474:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5744:152:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5761:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5764:77:14",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5754:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5754:88:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5754:88:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5858:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5861:4:14",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5851:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5851:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5851:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5882:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5885:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5875:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5875:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5875:15:14"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "5716:180:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5953:269:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5963:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5977:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5983:1:14",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "5973:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5973:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5963:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5994:38:14",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "6024:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6030:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "6020:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6020:12:14"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "5998:18:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6071:51:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6085:27:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "6099:6:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6107:4:14",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "6095:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6095:17:14"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6085:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "6051:18:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6044:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6044:26:14"
															},
															"nodeType": "YulIf",
															"src": "6041:81:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6174:42:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "6188:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6188:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6188:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "6138:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6161:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6169:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "6158:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6158:14:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "6135:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6135:38:14"
															},
															"nodeType": "YulIf",
															"src": "6132:84:14"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "5937:4:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5946:6:14",
														"type": ""
													}
												],
												"src": "5902:320:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6256:152:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6273:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6276:77:14",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6266:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6266:88:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6266:88:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6370:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6373:4:14",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6363:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6363:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6363:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6394:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6397:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6387:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6387:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6387:15:14"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6228:180:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6458:261:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6468:25:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6491:1:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "6473:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6473:20:14"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "6468:1:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6502:25:14",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6525:1:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "6507:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6507:20:14"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "6502:1:14"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6665:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6667:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6667:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6667:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6586:1:14"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6593:66:14",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "6661:1:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6589:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6589:74:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6583:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6583:81:14"
															},
															"nodeType": "YulIf",
															"src": "6580:107:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6697:16:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6708:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6711:1:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6704:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6704:9:14"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "6697:3:14"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6445:1:14",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6448:1:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "6454:3:14",
														"type": ""
													}
												],
												"src": "6414:305:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6831:118:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6853:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6861:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6849:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6849:14:14"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6865:34:14",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6842:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6842:58:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6842:58:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6921:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6929:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6917:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6917:15:14"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6934:7:14",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6910:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6910:32:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6910:32:14"
														}
													]
												},
												"name": "store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "6823:6:14",
														"type": ""
													}
												],
												"src": "6725:224:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7101:220:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7111:74:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7177:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7182:2:14",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7118:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7118:67:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7111:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7283:3:14"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																	"nodeType": "YulIdentifier",
																	"src": "7194:88:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7194:93:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7194:93:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7296:19:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7307:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7312:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7303:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7303:12:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7296:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7089:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7097:3:14",
														"type": ""
													}
												],
												"src": "6955:366:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7498:248:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7508:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7520:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7531:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7516:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7516:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7508:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7555:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7566:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7551:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7551:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7574:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7580:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7570:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7570:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7544:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7544:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7544:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7600:139:14",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7734:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7608:124:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7608:131:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7600:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7478:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7493:4:14",
														"type": ""
													}
												],
												"src": "7327:419:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7858:117:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7880:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7888:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7876:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7876:14:14"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7892:34:14",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7869:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7869:58:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7869:58:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7948:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7956:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7944:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7944:15:14"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7961:6:14",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7937:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7937:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7937:31:14"
														}
													]
												},
												"name": "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7850:6:14",
														"type": ""
													}
												],
												"src": "7752:223:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8127:220:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8137:74:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8203:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8208:2:14",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8144:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8144:67:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8137:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8309:3:14"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																	"nodeType": "YulIdentifier",
																	"src": "8220:88:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8220:93:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8220:93:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8322:19:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8333:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8338:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8329:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8329:12:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8322:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8115:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8123:3:14",
														"type": ""
													}
												],
												"src": "7981:366:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8524:248:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8534:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8546:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8557:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8542:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8542:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8534:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8581:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8592:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8577:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8577:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8600:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8606:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8596:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8596:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8570:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8570:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8570:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8626:139:14",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8760:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8634:124:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8634:131:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8626:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8504:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8519:4:14",
														"type": ""
													}
												],
												"src": "8353:419:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8884:115:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8906:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8914:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8902:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8902:14:14"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8918:34:14",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8895:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8895:58:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8895:58:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8974:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8982:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8970:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8970:15:14"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8987:4:14",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8963:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8963:29:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8963:29:14"
														}
													]
												},
												"name": "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "8876:6:14",
														"type": ""
													}
												],
												"src": "8778:221:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9151:220:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9161:74:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9227:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9232:2:14",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9168:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9168:67:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9161:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9333:3:14"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																	"nodeType": "YulIdentifier",
																	"src": "9244:88:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9244:93:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9244:93:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9346:19:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9357:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9362:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9353:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9353:12:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9346:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9139:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9147:3:14",
														"type": ""
													}
												],
												"src": "9005:366:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9548:248:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9558:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9570:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9581:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9566:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9566:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9558:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9605:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9616:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9601:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9601:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "9624:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9630:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9620:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9620:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9594:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9594:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9594:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9650:139:14",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "9784:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9658:124:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9658:131:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9650:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9528:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9543:4:14",
														"type": ""
													}
												],
												"src": "9377:419:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9908:73:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9930:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9938:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9926:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9926:14:14"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9942:31:14",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9919:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9919:55:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9919:55:14"
														}
													]
												},
												"name": "store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "9900:6:14",
														"type": ""
													}
												],
												"src": "9802:179:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10133:220:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10143:74:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10209:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10214:2:14",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10150:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10150:67:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "10143:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10315:3:14"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																	"nodeType": "YulIdentifier",
																	"src": "10226:88:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10226:93:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10226:93:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10328:19:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10339:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10344:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10335:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10335:12:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10328:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10121:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10129:3:14",
														"type": ""
													}
												],
												"src": "9987:366:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10530:248:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10540:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10552:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10563:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10548:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10548:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10540:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10587:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10598:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10583:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10583:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "10606:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10612:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10602:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10602:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10576:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10576:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10576:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10632:139:14",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10766:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10640:124:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10640:131:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10632:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10510:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10525:4:14",
														"type": ""
													}
												],
												"src": "10359:419:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10890:118:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10912:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10920:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10908:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10908:14:14"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10924:34:14",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10901:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10901:58:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10901:58:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10980:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10988:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10976:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10976:15:14"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10993:7:14",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10969:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10969:32:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10969:32:14"
														}
													]
												},
												"name": "store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "10882:6:14",
														"type": ""
													}
												],
												"src": "10784:224:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11160:220:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11170:74:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11236:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11241:2:14",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11177:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11177:67:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11170:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11342:3:14"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																	"nodeType": "YulIdentifier",
																	"src": "11253:88:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11253:93:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11253:93:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11355:19:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11366:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11371:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11362:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11362:12:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11355:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11148:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11156:3:14",
														"type": ""
													}
												],
												"src": "11014:366:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11557:248:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11567:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11579:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11590:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11575:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11575:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11567:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11614:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11625:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11610:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11610:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11633:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11639:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11629:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11629:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11603:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11603:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11603:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11659:139:14",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "11793:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11667:124:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11667:131:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11659:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11537:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11552:4:14",
														"type": ""
													}
												],
												"src": "11386:419:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11917:116:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "11939:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11947:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11935:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11935:14:14"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11951:34:14",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11928:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11928:58:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11928:58:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12007:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12015:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12003:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12003:15:14"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12020:5:14",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11996:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11996:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11996:30:14"
														}
													]
												},
												"name": "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "11909:6:14",
														"type": ""
													}
												],
												"src": "11811:222:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12185:220:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12195:74:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12261:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12266:2:14",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12202:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12202:67:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "12195:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12367:3:14"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																	"nodeType": "YulIdentifier",
																	"src": "12278:88:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12278:93:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12278:93:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12380:19:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12391:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12396:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12387:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12387:12:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "12380:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "12173:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "12181:3:14",
														"type": ""
													}
												],
												"src": "12039:366:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12582:248:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12592:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12604:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12615:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12600:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12600:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12592:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12639:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12650:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12635:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12635:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "12658:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12664:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12654:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12654:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12628:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12628:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12628:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12684:139:14",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "12818:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12692:124:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12692:131:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12684:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12562:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12577:4:14",
														"type": ""
													}
												],
												"src": "12411:419:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12942:119:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12964:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12972:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12960:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12960:14:14"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12976:34:14",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12953:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12953:58:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12953:58:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13032:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13040:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13028:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13028:15:14"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13045:8:14",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13021:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13021:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13021:33:14"
														}
													]
												},
												"name": "store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12934:6:14",
														"type": ""
													}
												],
												"src": "12836:225:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13213:220:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13223:74:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13289:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13294:2:14",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13230:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13230:67:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13223:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13395:3:14"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"nodeType": "YulIdentifier",
																	"src": "13306:88:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13306:93:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13306:93:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13408:19:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13419:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13424:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13415:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13415:12:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13408:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13201:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "13209:3:14",
														"type": ""
													}
												],
												"src": "13067:366:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13610:248:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13620:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13632:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13643:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13628:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13628:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13620:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13667:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13678:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13663:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13663:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "13686:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13692:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13682:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13682:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13656:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13656:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13656:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13712:139:14",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "13846:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13720:124:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13720:131:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13712:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13590:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13605:4:14",
														"type": ""
													}
												],
												"src": "13439:419:14"
											}
										]
									},
									"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b22565b60405180910390f35b6100e660048036038101906100e19190610bdd565b610308565b6040516100f39190610c38565b60405180910390f35b61010461032b565b6040516101119190610c62565b60405180910390f35b610134600480360381019061012f9190610c7d565b610335565b6040516101419190610c38565b60405180910390f35b610152610364565b60405161015f9190610cec565b60405180910390f35b610182600480360381019061017d9190610bdd565b61036d565b60405161018f9190610c38565b60405180910390f35b6101b260048036038101906101ad9190610d07565b6103a4565b6040516101bf9190610c62565b60405180910390f35b6101d06103ed565b6040516101dd9190610b22565b60405180910390f35b61020060048036038101906101fb9190610bdd565b61047f565b60405161020d9190610c38565b60405180910390f35b610230600480360381019061022b9190610bdd565b6104f6565b60405161023d9190610c38565b60405180910390f35b610260600480360381019061025b9190610d34565b610519565b60405161026d9190610c62565b60405180910390f35b60606036805461028590610da3565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610da3565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105a0565b90506103208185856105a8565b600191505092915050565b6000603554905090565b6000806103406105a0565b905061034d858285610771565b6103588585856107fd565b60019150509392505050565b60006012905090565b6000806103786105a0565b905061039981858561038a8589610519565b6103949190610e03565b6105a8565b600191505092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060603780546103fc90610da3565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610da3565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b60008061048a6105a0565b905060006104988286610519565b9050838110156104dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d490610ecb565b60405180910390fd5b6104ea82868684036105a8565b60019250505092915050565b6000806105016105a0565b905061050e8185856107fd565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90610f5d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90610fef565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107649190610c62565b60405180910390a3505050565b600061077d8484610519565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f757818110156107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e09061105b565b60405180910390fd5b6107f684848484036105a8565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610863906110ed565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d29061117f565b60405180910390fd5b6108e6838383610a7f565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096490611211565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a029190610e03565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a669190610c62565b60405180910390a3610a79848484610a84565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ac3578082015181840152602081019050610aa8565b83811115610ad2576000848401525b50505050565b6000601f19601f8301169050919050565b6000610af482610a89565b610afe8185610a94565b9350610b0e818560208601610aa5565b610b1781610ad8565b840191505092915050565b60006020820190508181036000830152610b3c8184610ae9565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7482610b49565b9050919050565b610b8481610b69565b8114610b8f57600080fd5b50565b600081359050610ba181610b7b565b92915050565b6000819050919050565b610bba81610ba7565b8114610bc557600080fd5b50565b600081359050610bd781610bb1565b92915050565b60008060408385031215610bf457610bf3610b44565b5b6000610c0285828601610b92565b9250506020610c1385828601610bc8565b9150509250929050565b60008115159050919050565b610c3281610c1d565b82525050565b6000602082019050610c4d6000830184610c29565b92915050565b610c5c81610ba7565b82525050565b6000602082019050610c776000830184610c53565b92915050565b600080600060608486031215610c9657610c95610b44565b5b6000610ca486828701610b92565b9350506020610cb586828701610b92565b9250506040610cc686828701610bc8565b9150509250925092565b600060ff82169050919050565b610ce681610cd0565b82525050565b6000602082019050610d016000830184610cdd565b92915050565b600060208284031215610d1d57610d1c610b44565b5b6000610d2b84828501610b92565b91505092915050565b60008060408385031215610d4b57610d4a610b44565b5b6000610d5985828601610b92565b9250506020610d6a85828601610b92565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610dbb57607f821691505b602082108103610dce57610dcd610d74565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0e82610ba7565b9150610e1983610ba7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e4e57610e4d610dd4565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610eb5602583610a94565b9150610ec082610e59565b604082019050919050565b60006020820190508181036000830152610ee481610ea8565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f47602483610a94565b9150610f5282610eeb565b604082019050919050565b60006020820190508181036000830152610f7681610f3a565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fd9602283610a94565b9150610fe482610f7d565b604082019050919050565b6000602082019050818103600083015261100881610fcc565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611045601d83610a94565b91506110508261100f565b602082019050919050565b6000602082019050818103600083015261107481611038565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110d7602583610a94565b91506110e28261107b565b604082019050919050565b60006020820190508181036000830152611106816110ca565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611169602383610a94565b91506111748261110d565b604082019050919050565b600060208201905081810360008301526111988161115c565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111fb602683610a94565b91506112068261119f565b604082019050919050565b6000602082019050818103600083015261122a816111ee565b905091905056fea2646970667358221220dbc8b701afe8e174f06ac9001d43f0558241b1ad44ebe8c7a8f46befcd1c6bd064736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC7D JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xD07 JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBDD JUMP JUMPDEST PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD34 JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xDA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xDA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x35 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x519 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x3FC SWAP1 PUSH2 0xDA3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x428 SWAP1 PUSH2 0xDA3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x475 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x44A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x475 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x458 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x48A PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x498 DUP3 DUP7 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0xECB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x501 PUSH2 0x5A0 JUMP JUMPDEST SWAP1 POP PUSH2 0x50E DUP2 DUP6 DUP6 PUSH2 0x7FD JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x34 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60E SWAP1 PUSH2 0xF5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x686 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67D SWAP1 PUSH2 0xFEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x34 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x764 SWAP2 SWAP1 PUSH2 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77D DUP5 DUP5 PUSH2 0x519 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F7 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E0 SWAP1 PUSH2 0x105B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F6 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A8 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x86C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x863 SWAP1 PUSH2 0x10ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D2 SWAP1 PUSH2 0x117F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E6 DUP4 DUP4 DUP4 PUSH2 0xA7F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x96D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x964 SWAP1 PUSH2 0x1211 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x33 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x33 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xA02 SWAP2 SWAP1 PUSH2 0xE03 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA66 SWAP2 SWAP1 PUSH2 0xC62 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA79 DUP5 DUP5 DUP5 PUSH2 0xA84 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xAA8 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAD2 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAF4 DUP3 PUSH2 0xA89 JUMP JUMPDEST PUSH2 0xAFE DUP2 DUP6 PUSH2 0xA94 JUMP JUMPDEST SWAP4 POP PUSH2 0xB0E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xAA5 JUMP JUMPDEST PUSH2 0xB17 DUP2 PUSH2 0xAD8 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB3C DUP2 DUP5 PUSH2 0xAE9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB74 DUP3 PUSH2 0xB49 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB84 DUP2 PUSH2 0xB69 JUMP JUMPDEST DUP2 EQ PUSH2 0xB8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBA1 DUP2 PUSH2 0xB7B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBBA DUP2 PUSH2 0xBA7 JUMP JUMPDEST DUP2 EQ PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBD7 DUP2 PUSH2 0xBB1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBF4 JUMPI PUSH2 0xBF3 PUSH2 0xB44 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC02 DUP6 DUP3 DUP7 ADD PUSH2 0xB92 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC13 DUP6 DUP3 DUP7 ADD PUSH2 0xBC8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC32 DUP2 PUSH2 0xC1D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC4D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC29 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC5C DUP2 PUSH2 0xBA7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC77 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC53 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC96 JUMPI PUSH2 0xC95 PUSH2 0xB44 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCA4 DUP7 DUP3 DUP8 ADD PUSH2 0xB92 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCB5 DUP7 DUP3 DUP8 ADD PUSH2 0xB92 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCC6 DUP7 DUP3 DUP8 ADD PUSH2 0xBC8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCE6 DUP2 PUSH2 0xCD0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD01 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCDD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD1D JUMPI PUSH2 0xD1C PUSH2 0xB44 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD2B DUP5 DUP3 DUP6 ADD PUSH2 0xB92 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD4B JUMPI PUSH2 0xD4A PUSH2 0xB44 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD59 DUP6 DUP3 DUP7 ADD PUSH2 0xB92 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD6A DUP6 DUP3 DUP7 ADD PUSH2 0xB92 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDBB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xDCE JUMPI PUSH2 0xDCD PUSH2 0xD74 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE0E DUP3 PUSH2 0xBA7 JUMP JUMPDEST SWAP2 POP PUSH2 0xE19 DUP4 PUSH2 0xBA7 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xE4E JUMPI PUSH2 0xE4D PUSH2 0xDD4 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB5 PUSH1 0x25 DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0xEC0 DUP3 PUSH2 0xE59 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEE4 DUP2 PUSH2 0xEA8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF47 PUSH1 0x24 DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0xF52 DUP3 PUSH2 0xEEB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF76 DUP2 PUSH2 0xF3A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD9 PUSH1 0x22 DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0xFE4 DUP3 PUSH2 0xF7D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1008 DUP2 PUSH2 0xFCC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1045 PUSH1 0x1D DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0x1050 DUP3 PUSH2 0x100F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1074 DUP2 PUSH2 0x1038 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10D7 PUSH1 0x25 DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0x10E2 DUP3 PUSH2 0x107B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1106 DUP2 PUSH2 0x10CA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1169 PUSH1 0x23 DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0x1174 DUP3 PUSH2 0x110D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1198 DUP2 PUSH2 0x115C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11FB PUSH1 0x26 DUP4 PUSH2 0xA94 JUMP JUMPDEST SWAP2 POP PUSH2 0x1206 DUP3 PUSH2 0x119F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x122A DUP2 PUSH2 0x11EE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB 0xC8 0xB7 ADD 0xAF 0xE8 0xE1 PUSH21 0xF06AC9001D43F0558241B1AD44EBE8C7A8F46BEFCD SHR PUSH12 0xD064736F6C634300080D0033 ",
							"sourceMap": "1482:11772:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2493:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4770:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3581:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5529:286;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3430:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6210:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3745:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2704:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6931:427;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4066:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4313:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2493:98;2547:13;2579:5;2572:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2493:98;:::o;4770:197::-;4853:4;4869:13;4885:12;:10;:12::i;:::-;4869:28;;4907:32;4916:5;4923:7;4932:6;4907:8;:32::i;:::-;4956:4;4949:11;;;4770:197;;;;:::o;3581:106::-;3642:7;3668:12;;3661:19;;3581:106;:::o;5529:286::-;5656:4;5672:15;5690:12;:10;:12::i;:::-;5672:30;;5712:38;5728:4;5734:7;5743:6;5712:15;:38::i;:::-;5760:27;5770:4;5776:2;5780:6;5760:9;:27::i;:::-;5804:4;5797:11;;;5529:286;;;;;:::o;3430:91::-;3488:5;3512:2;3505:9;;3430:91;:::o;6210:234::-;6298:4;6314:13;6330:12;:10;:12::i;:::-;6314:28;;6352:64;6361:5;6368:7;6405:10;6377:25;6387:5;6394:7;6377:9;:25::i;:::-;:38;;;;:::i;:::-;6352:8;:64::i;:::-;6433:4;6426:11;;;6210:234;;;;:::o;3745:125::-;3819:7;3845:9;:18;3855:7;3845:18;;;;;;;;;;;;;;;;3838:25;;3745:125;;;:::o;2704:102::-;2760:13;2792:7;2785:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2704:102;:::o;6931:427::-;7024:4;7040:13;7056:12;:10;:12::i;:::-;7040:28;;7078:24;7105:25;7115:5;7122:7;7105:9;:25::i;:::-;7078:52;;7168:15;7148:16;:35;;7140:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;7259:60;7268:5;7275:7;7303:15;7284:16;:34;7259:8;:60::i;:::-;7347:4;7340:11;;;;6931:427;;;;:::o;4066:189::-;4145:4;4161:13;4177:12;:10;:12::i;:::-;4161:28;;4199;4209:5;4216:2;4220:6;4199:9;:28::i;:::-;4244:4;4237:11;;;4066:189;;;;:::o;4313:149::-;4402:7;4428:11;:18;4440:5;4428:18;;;;;;;;;;;;;;;:27;4447:7;4428:27;;;;;;;;;;;;;;;;4421:34;;4313:149;;;;:::o;850:96:6:-;903:7;929:10;922:17;;850:96;:::o;10456:370:1:-;10604:1;10587:19;;:5;:19;;;10579:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10684:1;10665:21;;:7;:21;;;10657:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10766:6;10736:11;:18;10748:5;10736:18;;;;;;;;;;;;;;;:27;10755:7;10736:27;;;;;;;;;;;;;;;:36;;;;10803:7;10787:32;;10796:5;10787:32;;;10812:6;10787:32;;;;;;:::i;:::-;;;;;;;;10456:370;;;:::o;11107:441::-;11237:24;11264:25;11274:5;11281:7;11264:9;:25::i;:::-;11237:52;;11323:17;11303:16;:37;11299:243;;11384:6;11364:16;:26;;11356:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11466:51;11475:5;11482:7;11510:6;11491:16;:25;11466:8;:51::i;:::-;11299:243;11227:321;11107:441;;;:::o;7821:651::-;7963:1;7947:18;;:4;:18;;;7939:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;8039:1;8025:16;;:2;:16;;;8017:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;8092:38;8113:4;8119:2;8123:6;8092:20;:38::i;:::-;8141:19;8163:9;:15;8173:4;8163:15;;;;;;;;;;;;;;;;8141:37;;8211:6;8196:11;:21;;8188:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;8326:6;8312:11;:20;8294:9;:15;8304:4;8294:15;;;;;;;;;;;;;;;:38;;;;8369:6;8352:9;:13;8362:2;8352:13;;;;;;;;;;;;;;;;:23;;;;;;;:::i;:::-;;;;;;;;8406:2;8391:26;;8400:4;8391:26;;;8410:6;8391:26;;;;;;:::i;:::-;;;;;;;;8428:37;8448:4;8454:2;8458:6;8428:19;:37::i;:::-;7929:543;7821:651;;;:::o;12132:121::-;;;;:::o;12841:120::-;;;;:::o;7:99:14:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:307::-;355:1;365:113;379:6;376:1;373:13;365:113;;;464:1;459:3;455:11;449:18;445:1;440:3;436:11;429:39;401:2;398:1;394:10;389:15;;365:113;;;496:6;493:1;490:13;487:101;;;576:1;567:6;562:3;558:16;551:27;487:101;336:258;287:307;;;:::o;600:102::-;641:6;692:2;688:7;683:2;676:5;672:14;668:28;658:38;;600:102;;;:::o;708:364::-;796:3;824:39;857:5;824:39;:::i;:::-;879:71;943:6;938:3;879:71;:::i;:::-;872:78;;959:52;1004:6;999:3;992:4;985:5;981:16;959:52;:::i;:::-;1036:29;1058:6;1036:29;:::i;:::-;1031:3;1027:39;1020:46;;800:272;708:364;;;;:::o;1078:313::-;1191:4;1229:2;1218:9;1214:18;1206:26;;1278:9;1272:4;1268:20;1264:1;1253:9;1249:17;1242:47;1306:78;1379:4;1370:6;1306:78;:::i;:::-;1298:86;;1078:313;;;;:::o;1478:117::-;1587:1;1584;1577:12;1724:126;1761:7;1801:42;1794:5;1790:54;1779:65;;1724:126;;;:::o;1856:96::-;1893:7;1922:24;1940:5;1922:24;:::i;:::-;1911:35;;1856:96;;;:::o;1958:122::-;2031:24;2049:5;2031:24;:::i;:::-;2024:5;2021:35;2011:63;;2070:1;2067;2060:12;2011:63;1958:122;:::o;2086:139::-;2132:5;2170:6;2157:20;2148:29;;2186:33;2213:5;2186:33;:::i;:::-;2086:139;;;;:::o;2231:77::-;2268:7;2297:5;2286:16;;2231:77;;;:::o;2314:122::-;2387:24;2405:5;2387:24;:::i;:::-;2380:5;2377:35;2367:63;;2426:1;2423;2416:12;2367:63;2314:122;:::o;2442:139::-;2488:5;2526:6;2513:20;2504:29;;2542:33;2569:5;2542:33;:::i;:::-;2442:139;;;;:::o;2587:474::-;2655:6;2663;2712:2;2700:9;2691:7;2687:23;2683:32;2680:119;;;2718:79;;:::i;:::-;2680:119;2838:1;2863:53;2908:7;2899:6;2888:9;2884:22;2863:53;:::i;:::-;2853:63;;2809:117;2965:2;2991:53;3036:7;3027:6;3016:9;3012:22;2991:53;:::i;:::-;2981:63;;2936:118;2587:474;;;;;:::o;3067:90::-;3101:7;3144:5;3137:13;3130:21;3119:32;;3067:90;;;:::o;3163:109::-;3244:21;3259:5;3244:21;:::i;:::-;3239:3;3232:34;3163:109;;:::o;3278:210::-;3365:4;3403:2;3392:9;3388:18;3380:26;;3416:65;3478:1;3467:9;3463:17;3454:6;3416:65;:::i;:::-;3278:210;;;;:::o;3494:118::-;3581:24;3599:5;3581:24;:::i;:::-;3576:3;3569:37;3494:118;;:::o;3618:222::-;3711:4;3749:2;3738:9;3734:18;3726:26;;3762:71;3830:1;3819:9;3815:17;3806:6;3762:71;:::i;:::-;3618:222;;;;:::o;3846:619::-;3923:6;3931;3939;3988:2;3976:9;3967:7;3963:23;3959:32;3956:119;;;3994:79;;:::i;:::-;3956:119;4114:1;4139:53;4184:7;4175:6;4164:9;4160:22;4139:53;:::i;:::-;4129:63;;4085:117;4241:2;4267:53;4312:7;4303:6;4292:9;4288:22;4267:53;:::i;:::-;4257:63;;4212:118;4369:2;4395:53;4440:7;4431:6;4420:9;4416:22;4395:53;:::i;:::-;4385:63;;4340:118;3846:619;;;;;:::o;4471:86::-;4506:7;4546:4;4539:5;4535:16;4524:27;;4471:86;;;:::o;4563:112::-;4646:22;4662:5;4646:22;:::i;:::-;4641:3;4634:35;4563:112;;:::o;4681:214::-;4770:4;4808:2;4797:9;4793:18;4785:26;;4821:67;4885:1;4874:9;4870:17;4861:6;4821:67;:::i;:::-;4681:214;;;;:::o;4901:329::-;4960:6;5009:2;4997:9;4988:7;4984:23;4980:32;4977:119;;;5015:79;;:::i;:::-;4977:119;5135:1;5160:53;5205:7;5196:6;5185:9;5181:22;5160:53;:::i;:::-;5150:63;;5106:117;4901:329;;;;:::o;5236:474::-;5304:6;5312;5361:2;5349:9;5340:7;5336:23;5332:32;5329:119;;;5367:79;;:::i;:::-;5329:119;5487:1;5512:53;5557:7;5548:6;5537:9;5533:22;5512:53;:::i;:::-;5502:63;;5458:117;5614:2;5640:53;5685:7;5676:6;5665:9;5661:22;5640:53;:::i;:::-;5630:63;;5585:118;5236:474;;;;;:::o;5716:180::-;5764:77;5761:1;5754:88;5861:4;5858:1;5851:15;5885:4;5882:1;5875:15;5902:320;5946:6;5983:1;5977:4;5973:12;5963:22;;6030:1;6024:4;6020:12;6051:18;6041:81;;6107:4;6099:6;6095:17;6085:27;;6041:81;6169:2;6161:6;6158:14;6138:18;6135:38;6132:84;;6188:18;;:::i;:::-;6132:84;5953:269;5902:320;;;:::o;6228:180::-;6276:77;6273:1;6266:88;6373:4;6370:1;6363:15;6397:4;6394:1;6387:15;6414:305;6454:3;6473:20;6491:1;6473:20;:::i;:::-;6468:25;;6507:20;6525:1;6507:20;:::i;:::-;6502:25;;6661:1;6593:66;6589:74;6586:1;6583:81;6580:107;;;6667:18;;:::i;:::-;6580:107;6711:1;6708;6704:9;6697:16;;6414:305;;;;:::o;6725:224::-;6865:34;6861:1;6853:6;6849:14;6842:58;6934:7;6929:2;6921:6;6917:15;6910:32;6725:224;:::o;6955:366::-;7097:3;7118:67;7182:2;7177:3;7118:67;:::i;:::-;7111:74;;7194:93;7283:3;7194:93;:::i;:::-;7312:2;7307:3;7303:12;7296:19;;6955:366;;;:::o;7327:419::-;7493:4;7531:2;7520:9;7516:18;7508:26;;7580:9;7574:4;7570:20;7566:1;7555:9;7551:17;7544:47;7608:131;7734:4;7608:131;:::i;:::-;7600:139;;7327:419;;;:::o;7752:223::-;7892:34;7888:1;7880:6;7876:14;7869:58;7961:6;7956:2;7948:6;7944:15;7937:31;7752:223;:::o;7981:366::-;8123:3;8144:67;8208:2;8203:3;8144:67;:::i;:::-;8137:74;;8220:93;8309:3;8220:93;:::i;:::-;8338:2;8333:3;8329:12;8322:19;;7981:366;;;:::o;8353:419::-;8519:4;8557:2;8546:9;8542:18;8534:26;;8606:9;8600:4;8596:20;8592:1;8581:9;8577:17;8570:47;8634:131;8760:4;8634:131;:::i;:::-;8626:139;;8353:419;;;:::o;8778:221::-;8918:34;8914:1;8906:6;8902:14;8895:58;8987:4;8982:2;8974:6;8970:15;8963:29;8778:221;:::o;9005:366::-;9147:3;9168:67;9232:2;9227:3;9168:67;:::i;:::-;9161:74;;9244:93;9333:3;9244:93;:::i;:::-;9362:2;9357:3;9353:12;9346:19;;9005:366;;;:::o;9377:419::-;9543:4;9581:2;9570:9;9566:18;9558:26;;9630:9;9624:4;9620:20;9616:1;9605:9;9601:17;9594:47;9658:131;9784:4;9658:131;:::i;:::-;9650:139;;9377:419;;;:::o;9802:179::-;9942:31;9938:1;9930:6;9926:14;9919:55;9802:179;:::o;9987:366::-;10129:3;10150:67;10214:2;10209:3;10150:67;:::i;:::-;10143:74;;10226:93;10315:3;10226:93;:::i;:::-;10344:2;10339:3;10335:12;10328:19;;9987:366;;;:::o;10359:419::-;10525:4;10563:2;10552:9;10548:18;10540:26;;10612:9;10606:4;10602:20;10598:1;10587:9;10583:17;10576:47;10640:131;10766:4;10640:131;:::i;:::-;10632:139;;10359:419;;;:::o;10784:224::-;10924:34;10920:1;10912:6;10908:14;10901:58;10993:7;10988:2;10980:6;10976:15;10969:32;10784:224;:::o;11014:366::-;11156:3;11177:67;11241:2;11236:3;11177:67;:::i;:::-;11170:74;;11253:93;11342:3;11253:93;:::i;:::-;11371:2;11366:3;11362:12;11355:19;;11014:366;;;:::o;11386:419::-;11552:4;11590:2;11579:9;11575:18;11567:26;;11639:9;11633:4;11629:20;11625:1;11614:9;11610:17;11603:47;11667:131;11793:4;11667:131;:::i;:::-;11659:139;;11386:419;;;:::o;11811:222::-;11951:34;11947:1;11939:6;11935:14;11928:58;12020:5;12015:2;12007:6;12003:15;11996:30;11811:222;:::o;12039:366::-;12181:3;12202:67;12266:2;12261:3;12202:67;:::i;:::-;12195:74;;12278:93;12367:3;12278:93;:::i;:::-;12396:2;12391:3;12387:12;12380:19;;12039:366;;;:::o;12411:419::-;12577:4;12615:2;12604:9;12600:18;12592:26;;12664:9;12658:4;12654:20;12650:1;12639:9;12635:17;12628:47;12692:131;12818:4;12692:131;:::i;:::-;12684:139;;12411:419;;;:::o;12836:225::-;12976:34;12972:1;12964:6;12960:14;12953:58;13045:8;13040:2;13032:6;13028:15;13021:33;12836:225;:::o;13067:366::-;13209:3;13230:67;13294:2;13289:3;13230:67;:::i;:::-;13223:74;;13306:93;13395:3;13306:93;:::i;:::-;13424:2;13419:3;13415:12;13408:19;;13067:366;;;:::o;13439:419::-;13605:4;13643:2;13632:9;13628:18;13620:26;;13692:9;13686:4;13682:20;13678:1;13667:9;13663:17;13656:47;13720:131;13846:4;13720:131;:::i;:::-;13712:139;;13439:419;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "942200",
								"executionCost": "981",
								"totalCost": "943181"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2863",
								"decimals()": "432",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2482",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"__ERC20_init(string memory,string memory)": "infinite",
								"__ERC20_init_unchained(string memory,string memory)": "infinite",
								"_afterTokenTransfer(address,address,uint256)": "15",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "15",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220dbc8b701afe8e174f06ac9001d43f0558241b1ad44ebe8c7a8f46befcd1c6bd064736f6c634300080d0033",
									".code": [
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "39509351"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "39509351"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "70A08231"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "95D89B41"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "A457C2D7"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "A9059CBB"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "DD62ED3E"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "6FDDE03"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "95EA7B3"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "18160DDD"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "23B872DD"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "313CE567"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "tag",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "tag",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "tag",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 1,
											"value": "38"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "tag",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2547,
											"end": 2560,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2579,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4853,
											"end": 4857,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4869,
											"end": 4882,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4885,
											"end": 4897,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 4885,
											"end": 4895,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 4885,
											"end": 4897,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4885,
											"end": 4897,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 4885,
											"end": 4897,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4869,
											"end": 4897,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4869,
											"end": 4897,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 4916,
											"end": 4921,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4923,
											"end": 4930,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4932,
											"end": 4938,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4907,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "tag",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4956,
											"end": 4960,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4949,
											"end": 4960,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4949,
											"end": 4960,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4949,
											"end": 4960,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "tag",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3642,
											"end": 3649,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3668,
											"end": 3680,
											"name": "PUSH",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 3668,
											"end": 3680,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3661,
											"end": 3680,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3661,
											"end": 3680,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5656,
											"end": 5660,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5672,
											"end": 5687,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5690,
											"end": 5702,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 5690,
											"end": 5700,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 5690,
											"end": 5702,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5690,
											"end": 5702,
											"name": "tag",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 5690,
											"end": 5702,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5672,
											"end": 5702,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5672,
											"end": 5702,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 5728,
											"end": 5732,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5734,
											"end": 5741,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5743,
											"end": 5749,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5712,
											"end": 5727,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "tag",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 5770,
											"end": 5774,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5776,
											"end": 5778,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5780,
											"end": 5786,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5760,
											"end": 5769,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "tag",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5804,
											"end": 5808,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5797,
											"end": 5808,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5797,
											"end": 5808,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5797,
											"end": 5808,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "tag",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3488,
											"end": 3493,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3512,
											"end": 3514,
											"name": "PUSH",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 3505,
											"end": 3514,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3505,
											"end": 3514,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6298,
											"end": 6302,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6314,
											"end": 6327,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6330,
											"end": 6342,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 6330,
											"end": 6340,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 6330,
											"end": 6342,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6330,
											"end": 6342,
											"name": "tag",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 6330,
											"end": 6342,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6314,
											"end": 6342,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6314,
											"end": 6342,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6352,
											"end": 6416,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 6361,
											"end": 6366,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6368,
											"end": 6375,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6405,
											"end": 6415,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 6387,
											"end": 6392,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6394,
											"end": 6401,
											"name": "DUP10",
											"source": 1
										},
										{
											"begin": 6377,
											"end": 6386,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "tag",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "88"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "tag",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6352,
											"end": 6360,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 6352,
											"end": 6416,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6352,
											"end": 6416,
											"name": "tag",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 6352,
											"end": 6416,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6433,
											"end": 6437,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 6426,
											"end": 6437,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6426,
											"end": 6437,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6426,
											"end": 6437,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3819,
											"end": 3826,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3845,
											"end": 3854,
											"name": "PUSH",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3855,
											"end": 3862,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3838,
											"end": 3863,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3838,
											"end": 3863,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "tag",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2760,
											"end": 2773,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2792,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "tag",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "tag",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "tag",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "tag",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "tag",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7024,
											"end": 7028,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7040,
											"end": 7053,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7056,
											"end": 7068,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "97"
										},
										{
											"begin": 7056,
											"end": 7066,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 7056,
											"end": 7068,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7056,
											"end": 7068,
											"name": "tag",
											"source": 1,
											"value": "97"
										},
										{
											"begin": 7056,
											"end": 7068,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7040,
											"end": 7068,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7040,
											"end": 7068,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7078,
											"end": 7102,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 7115,
											"end": 7120,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7122,
											"end": 7129,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 7105,
											"end": 7114,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7078,
											"end": 7130,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7078,
											"end": 7130,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7168,
											"end": 7183,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7148,
											"end": 7164,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7148,
											"end": 7183,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 7148,
											"end": 7183,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "101"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "tag",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "tag",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7259,
											"end": 7319,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 7268,
											"end": 7273,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7275,
											"end": 7282,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 7303,
											"end": 7318,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 7284,
											"end": 7300,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7284,
											"end": 7318,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7259,
											"end": 7267,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 7259,
											"end": 7319,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7259,
											"end": 7319,
											"name": "tag",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 7259,
											"end": 7319,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7347,
											"end": 7351,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 7340,
											"end": 7351,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 7340,
											"end": 7351,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7340,
											"end": 7351,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7340,
											"end": 7351,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4145,
											"end": 4149,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4161,
											"end": 4174,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4177,
											"end": 4189,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 4177,
											"end": 4187,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 4177,
											"end": 4189,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4177,
											"end": 4189,
											"name": "tag",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 4177,
											"end": 4189,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4161,
											"end": 4189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4161,
											"end": 4189,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4199,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "105"
										},
										{
											"begin": 4209,
											"end": 4214,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4216,
											"end": 4218,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4220,
											"end": 4226,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4199,
											"end": 4208,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 4199,
											"end": 4227,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4199,
											"end": 4227,
											"name": "tag",
											"source": 1,
											"value": "105"
										},
										{
											"begin": 4199,
											"end": 4227,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4244,
											"end": 4248,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4237,
											"end": 4248,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4237,
											"end": 4248,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4237,
											"end": 4248,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4402,
											"end": 4409,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4428,
											"end": 4439,
											"name": "PUSH",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4440,
											"end": 4445,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4447,
											"end": 4454,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4421,
											"end": 4455,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4421,
											"end": 4455,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 850,
											"end": 946,
											"name": "tag",
											"source": 6,
											"value": "72"
										},
										{
											"begin": 850,
											"end": 946,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 903,
											"end": 910,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 922,
											"end": 939,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 922,
											"end": 939,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 850,
											"end": 946,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 850,
											"end": 946,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "tag",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10604,
											"end": 10605,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10587,
											"end": 10606,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10587,
											"end": 10606,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10587,
											"end": 10592,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10587,
											"end": 10606,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10587,
											"end": 10606,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10587,
											"end": 10606,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "tag",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "tag",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10684,
											"end": 10685,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10665,
											"end": 10686,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10665,
											"end": 10686,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10665,
											"end": 10672,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10665,
											"end": 10686,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10665,
											"end": 10686,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10665,
											"end": 10686,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "tag",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "tag",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10766,
											"end": 10772,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10747,
											"name": "PUSH",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10748,
											"end": 10753,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10755,
											"end": 10762,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10772,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10772,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10772,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 10736,
											"end": 10772,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10803,
											"end": 10810,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10796,
											"end": 10801,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "PUSH",
											"source": 1,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10812,
											"end": 10818,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "tag",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "tag",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11237,
											"end": 11261,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 11274,
											"end": 11279,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11281,
											"end": 11288,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11264,
											"end": 11273,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "tag",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11237,
											"end": 11289,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11237,
											"end": 11289,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11323,
											"end": 11340,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11303,
											"end": 11319,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11303,
											"end": 11340,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 11299,
											"end": 11542,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 11299,
											"end": 11542,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11384,
											"end": 11390,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11364,
											"end": 11380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11364,
											"end": 11390,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 11364,
											"end": 11390,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "tag",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "tag",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11466,
											"end": 11517,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 11475,
											"end": 11480,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11482,
											"end": 11489,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11510,
											"end": 11516,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11491,
											"end": 11507,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11491,
											"end": 11516,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11466,
											"end": 11474,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 11466,
											"end": 11517,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 11466,
											"end": 11517,
											"name": "tag",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 11466,
											"end": 11517,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11299,
											"end": 11542,
											"name": "tag",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 11299,
											"end": 11542,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11227,
											"end": 11548,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7821,
											"end": 8472,
											"name": "tag",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 7821,
											"end": 8472,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7963,
											"end": 7964,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7947,
											"end": 7965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7947,
											"end": 7965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7947,
											"end": 7951,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7947,
											"end": 7965,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7947,
											"end": 7965,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7947,
											"end": 7965,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "tag",
											"source": 1,
											"value": "125"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "tag",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8039,
											"end": 8040,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8025,
											"end": 8041,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8025,
											"end": 8041,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8025,
											"end": 8027,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8025,
											"end": 8041,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8025,
											"end": 8041,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8025,
											"end": 8041,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "129"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "tag",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "tag",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8092,
											"end": 8130,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 8113,
											"end": 8117,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8119,
											"end": 8121,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8123,
											"end": 8129,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8092,
											"end": 8112,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "131"
										},
										{
											"begin": 8092,
											"end": 8130,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8092,
											"end": 8130,
											"name": "tag",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 8092,
											"end": 8130,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8141,
											"end": 8160,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8163,
											"end": 8172,
											"name": "PUSH",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8173,
											"end": 8177,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 8141,
											"end": 8178,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8141,
											"end": 8178,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8211,
											"end": 8217,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8196,
											"end": 8207,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8196,
											"end": 8217,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 8196,
											"end": 8217,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "133"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "134"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "tag",
											"source": 1,
											"value": "133"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "tag",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8326,
											"end": 8332,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8312,
											"end": 8323,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8312,
											"end": 8332,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8303,
											"name": "PUSH",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8304,
											"end": 8308,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8332,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8332,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8332,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8294,
											"end": 8332,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8369,
											"end": 8375,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8361,
											"name": "PUSH",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8362,
											"end": 8364,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "88"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "tag",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8406,
											"end": 8408,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8400,
											"end": 8404,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH",
											"source": 1,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8410,
											"end": 8416,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "tag",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 8428,
											"end": 8465,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 8448,
											"end": 8452,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8454,
											"end": 8456,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8458,
											"end": 8464,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8428,
											"end": 8447,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "138"
										},
										{
											"begin": 8428,
											"end": 8465,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 8428,
											"end": 8465,
											"name": "tag",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 8428,
											"end": 8465,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7929,
											"end": 8472,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7821,
											"end": 8472,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7821,
											"end": 8472,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7821,
											"end": 8472,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7821,
											"end": 8472,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 12132,
											"end": 12253,
											"name": "tag",
											"source": 1,
											"value": "131"
										},
										{
											"begin": 12132,
											"end": 12253,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12132,
											"end": 12253,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12132,
											"end": 12253,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12132,
											"end": 12253,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12132,
											"end": 12253,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 12841,
											"end": 12961,
											"name": "tag",
											"source": 1,
											"value": "138"
										},
										{
											"begin": 12841,
											"end": 12961,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12841,
											"end": 12961,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12841,
											"end": 12961,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12841,
											"end": 12961,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12841,
											"end": 12961,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 106,
											"name": "tag",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 7,
											"end": 106,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 59,
											"end": 65,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 93,
											"end": 98,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 87,
											"end": 99,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 77,
											"end": 99,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 77,
											"end": 99,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7,
											"end": 106,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7,
											"end": 106,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 112,
											"end": 281,
											"name": "tag",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 112,
											"end": 281,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 196,
											"end": 207,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 236,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 225,
											"end": 228,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 218,
											"end": 237,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 270,
											"end": 274,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 265,
											"end": 268,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 261,
											"end": 275,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 246,
											"end": 275,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 246,
											"end": 275,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 112,
											"end": 281,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 287,
											"end": 594,
											"name": "tag",
											"source": 14,
											"value": "143"
										},
										{
											"begin": 287,
											"end": 594,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 355,
											"end": 356,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 365,
											"end": 478,
											"name": "tag",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 365,
											"end": 478,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 379,
											"end": 385,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 376,
											"end": 377,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 373,
											"end": 386,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 365,
											"end": 478,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 365,
											"end": 478,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "183"
										},
										{
											"begin": 365,
											"end": 478,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 464,
											"end": 465,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 459,
											"end": 462,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 455,
											"end": 466,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 449,
											"end": 467,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 445,
											"end": 446,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 440,
											"end": 443,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 436,
											"end": 447,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 429,
											"end": 468,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 401,
											"end": 403,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 398,
											"end": 399,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 394,
											"end": 404,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 389,
											"end": 404,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 389,
											"end": 404,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 365,
											"end": 478,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 365,
											"end": 478,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 365,
											"end": 478,
											"name": "tag",
											"source": 14,
											"value": "183"
										},
										{
											"begin": 365,
											"end": 478,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 496,
											"end": 502,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 493,
											"end": 494,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 490,
											"end": 503,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 487,
											"end": 588,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 487,
											"end": 588,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "184"
										},
										{
											"begin": 487,
											"end": 588,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 576,
											"end": 577,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 567,
											"end": 573,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 562,
											"end": 565,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 558,
											"end": 574,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 551,
											"end": 578,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 487,
											"end": 588,
											"name": "tag",
											"source": 14,
											"value": "184"
										},
										{
											"begin": 487,
											"end": 588,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 336,
											"end": 594,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 287,
											"end": 594,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 287,
											"end": 594,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 287,
											"end": 594,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 287,
											"end": 594,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 600,
											"end": 702,
											"name": "tag",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 600,
											"end": 702,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 641,
											"end": 647,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 692,
											"end": 694,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 688,
											"end": 695,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 683,
											"end": 685,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 676,
											"end": 681,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 672,
											"end": 686,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 668,
											"end": 696,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 658,
											"end": 696,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 658,
											"end": 696,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 600,
											"end": 702,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 600,
											"end": 702,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 600,
											"end": 702,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 600,
											"end": 702,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 708,
											"end": 1072,
											"name": "tag",
											"source": 14,
											"value": "145"
										},
										{
											"begin": 708,
											"end": 1072,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 796,
											"end": 799,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 824,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "187"
										},
										{
											"begin": 857,
											"end": 862,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 824,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 824,
											"end": 863,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 824,
											"end": 863,
											"name": "tag",
											"source": 14,
											"value": "187"
										},
										{
											"begin": 824,
											"end": 863,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 879,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "188"
										},
										{
											"begin": 943,
											"end": 949,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 938,
											"end": 941,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 879,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 879,
											"end": 950,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 879,
											"end": 950,
											"name": "tag",
											"source": 14,
											"value": "188"
										},
										{
											"begin": 879,
											"end": 950,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 872,
											"end": 950,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 872,
											"end": 950,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 959,
											"end": 1011,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "189"
										},
										{
											"begin": 1004,
											"end": 1010,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 999,
											"end": 1002,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 992,
											"end": 996,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 985,
											"end": 990,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 981,
											"end": 997,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 959,
											"end": 1011,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "143"
										},
										{
											"begin": 959,
											"end": 1011,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 959,
											"end": 1011,
											"name": "tag",
											"source": 14,
											"value": "189"
										},
										{
											"begin": 959,
											"end": 1011,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1036,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "190"
										},
										{
											"begin": 1058,
											"end": 1064,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1036,
											"end": 1065,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 1036,
											"end": 1065,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1036,
											"end": 1065,
											"name": "tag",
											"source": 14,
											"value": "190"
										},
										{
											"begin": 1036,
											"end": 1065,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1031,
											"end": 1034,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1027,
											"end": 1066,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1020,
											"end": 1066,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1020,
											"end": 1066,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 800,
											"end": 1072,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 708,
											"end": 1072,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 708,
											"end": 1072,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 708,
											"end": 1072,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 708,
											"end": 1072,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 708,
											"end": 1072,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1078,
											"end": 1391,
											"name": "tag",
											"source": 14,
											"value": "18"
										},
										{
											"begin": 1078,
											"end": 1391,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1191,
											"end": 1195,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1229,
											"end": 1231,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1218,
											"end": 1227,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1214,
											"end": 1232,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1206,
											"end": 1232,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1206,
											"end": 1232,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1278,
											"end": 1287,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1272,
											"end": 1276,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1268,
											"end": 1288,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1264,
											"end": 1265,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1253,
											"end": 1262,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1249,
											"end": 1266,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1242,
											"end": 1289,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1306,
											"end": 1384,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "192"
										},
										{
											"begin": 1379,
											"end": 1383,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1370,
											"end": 1376,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1306,
											"end": 1384,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "145"
										},
										{
											"begin": 1306,
											"end": 1384,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1306,
											"end": 1384,
											"name": "tag",
											"source": 14,
											"value": "192"
										},
										{
											"begin": 1306,
											"end": 1384,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1298,
											"end": 1384,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1298,
											"end": 1384,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1078,
											"end": 1391,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1078,
											"end": 1391,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1078,
											"end": 1391,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1078,
											"end": 1391,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1078,
											"end": 1391,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1478,
											"end": 1595,
											"name": "tag",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 1478,
											"end": 1595,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1587,
											"end": 1588,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1584,
											"end": 1585,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1577,
											"end": 1589,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1724,
											"end": 1850,
											"name": "tag",
											"source": 14,
											"value": "149"
										},
										{
											"begin": 1724,
											"end": 1850,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1761,
											"end": 1768,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1801,
											"end": 1843,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1794,
											"end": 1799,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1790,
											"end": 1844,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1779,
											"end": 1844,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1779,
											"end": 1844,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1724,
											"end": 1850,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1724,
											"end": 1850,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1724,
											"end": 1850,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1724,
											"end": 1850,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1856,
											"end": 1952,
											"name": "tag",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 1856,
											"end": 1952,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1893,
											"end": 1900,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1922,
											"end": 1946,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "198"
										},
										{
											"begin": 1940,
											"end": 1945,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1922,
											"end": 1946,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "149"
										},
										{
											"begin": 1922,
											"end": 1946,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1922,
											"end": 1946,
											"name": "tag",
											"source": 14,
											"value": "198"
										},
										{
											"begin": 1922,
											"end": 1946,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1911,
											"end": 1946,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1911,
											"end": 1946,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1856,
											"end": 1952,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1856,
											"end": 1952,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1856,
											"end": 1952,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1856,
											"end": 1952,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1958,
											"end": 2080,
											"name": "tag",
											"source": 14,
											"value": "151"
										},
										{
											"begin": 1958,
											"end": 2080,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2031,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "200"
										},
										{
											"begin": 2049,
											"end": 2054,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2031,
											"end": 2055,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 2031,
											"end": 2055,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2031,
											"end": 2055,
											"name": "tag",
											"source": 14,
											"value": "200"
										},
										{
											"begin": 2031,
											"end": 2055,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2024,
											"end": 2029,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2021,
											"end": 2056,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "201"
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2070,
											"end": 2071,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2067,
											"end": 2068,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2060,
											"end": 2072,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "tag",
											"source": 14,
											"value": "201"
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1958,
											"end": 2080,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1958,
											"end": 2080,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2086,
											"end": 2225,
											"name": "tag",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 2086,
											"end": 2225,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2132,
											"end": 2137,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2170,
											"end": 2176,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2157,
											"end": 2177,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2148,
											"end": 2177,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2148,
											"end": 2177,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2186,
											"end": 2219,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "203"
										},
										{
											"begin": 2213,
											"end": 2218,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2186,
											"end": 2219,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "151"
										},
										{
											"begin": 2186,
											"end": 2219,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2186,
											"end": 2219,
											"name": "tag",
											"source": 14,
											"value": "203"
										},
										{
											"begin": 2186,
											"end": 2219,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2086,
											"end": 2225,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2086,
											"end": 2225,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2086,
											"end": 2225,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2086,
											"end": 2225,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2086,
											"end": 2225,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2231,
											"end": 2308,
											"name": "tag",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 2231,
											"end": 2308,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2268,
											"end": 2275,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2297,
											"end": 2302,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2286,
											"end": 2302,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2286,
											"end": 2302,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2231,
											"end": 2308,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2231,
											"end": 2308,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2231,
											"end": 2308,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2231,
											"end": 2308,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2314,
											"end": 2436,
											"name": "tag",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 2314,
											"end": 2436,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2387,
											"end": 2411,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "206"
										},
										{
											"begin": 2405,
											"end": 2410,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2387,
											"end": 2411,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 2387,
											"end": 2411,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2387,
											"end": 2411,
											"name": "tag",
											"source": 14,
											"value": "206"
										},
										{
											"begin": 2387,
											"end": 2411,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2380,
											"end": 2385,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2377,
											"end": 2412,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 2367,
											"end": 2430,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "207"
										},
										{
											"begin": 2367,
											"end": 2430,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2426,
											"end": 2427,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2423,
											"end": 2424,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2416,
											"end": 2428,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2367,
											"end": 2430,
											"name": "tag",
											"source": 14,
											"value": "207"
										},
										{
											"begin": 2367,
											"end": 2430,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2314,
											"end": 2436,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2314,
											"end": 2436,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2442,
											"end": 2581,
											"name": "tag",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 2442,
											"end": 2581,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2488,
											"end": 2493,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2526,
											"end": 2532,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2513,
											"end": 2533,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2504,
											"end": 2533,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2504,
											"end": 2533,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2542,
											"end": 2575,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "209"
										},
										{
											"begin": 2569,
											"end": 2574,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2542,
											"end": 2575,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 2542,
											"end": 2575,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2542,
											"end": 2575,
											"name": "tag",
											"source": 14,
											"value": "209"
										},
										{
											"begin": 2542,
											"end": 2575,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2442,
											"end": 2581,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2442,
											"end": 2581,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2442,
											"end": 2581,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2442,
											"end": 2581,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2442,
											"end": 2581,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2587,
											"end": 3061,
											"name": "tag",
											"source": 14,
											"value": "21"
										},
										{
											"begin": 2587,
											"end": 3061,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2655,
											"end": 2661,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2663,
											"end": 2669,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2712,
											"end": 2714,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2700,
											"end": 2709,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2691,
											"end": 2698,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2687,
											"end": 2710,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2683,
											"end": 2715,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2680,
											"end": 2799,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2680,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "211"
										},
										{
											"begin": 2680,
											"end": 2799,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2718,
											"end": 2797,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "212"
										},
										{
											"begin": 2718,
											"end": 2797,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 2718,
											"end": 2797,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2718,
											"end": 2797,
											"name": "tag",
											"source": 14,
											"value": "212"
										},
										{
											"begin": 2718,
											"end": 2797,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2680,
											"end": 2799,
											"name": "tag",
											"source": 14,
											"value": "211"
										},
										{
											"begin": 2680,
											"end": 2799,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2838,
											"end": 2839,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2863,
											"end": 2916,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "213"
										},
										{
											"begin": 2908,
											"end": 2915,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2899,
											"end": 2905,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2888,
											"end": 2897,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 2884,
											"end": 2906,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2863,
											"end": 2916,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 2863,
											"end": 2916,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2863,
											"end": 2916,
											"name": "tag",
											"source": 14,
											"value": "213"
										},
										{
											"begin": 2863,
											"end": 2916,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2853,
											"end": 2916,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2853,
											"end": 2916,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2809,
											"end": 2926,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2965,
											"end": 2967,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2991,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "214"
										},
										{
											"begin": 3036,
											"end": 3043,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3027,
											"end": 3033,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3016,
											"end": 3025,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3012,
											"end": 3034,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2991,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 2991,
											"end": 3044,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2991,
											"end": 3044,
											"name": "tag",
											"source": 14,
											"value": "214"
										},
										{
											"begin": 2991,
											"end": 3044,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2981,
											"end": 3044,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2981,
											"end": 3044,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2936,
											"end": 3054,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2587,
											"end": 3061,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2587,
											"end": 3061,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2587,
											"end": 3061,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2587,
											"end": 3061,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2587,
											"end": 3061,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2587,
											"end": 3061,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3067,
											"end": 3157,
											"name": "tag",
											"source": 14,
											"value": "156"
										},
										{
											"begin": 3067,
											"end": 3157,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3101,
											"end": 3108,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3144,
											"end": 3149,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3137,
											"end": 3150,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3130,
											"end": 3151,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3119,
											"end": 3151,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3119,
											"end": 3151,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3067,
											"end": 3157,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3067,
											"end": 3157,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3067,
											"end": 3157,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3067,
											"end": 3157,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3163,
											"end": 3272,
											"name": "tag",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 3163,
											"end": 3272,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3244,
											"end": 3265,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "217"
										},
										{
											"begin": 3259,
											"end": 3264,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3244,
											"end": 3265,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "156"
										},
										{
											"begin": 3244,
											"end": 3265,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3244,
											"end": 3265,
											"name": "tag",
											"source": 14,
											"value": "217"
										},
										{
											"begin": 3244,
											"end": 3265,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3239,
											"end": 3242,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3232,
											"end": 3266,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3163,
											"end": 3272,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3163,
											"end": 3272,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3163,
											"end": 3272,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3278,
											"end": 3488,
											"name": "tag",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 3278,
											"end": 3488,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3365,
											"end": 3369,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3403,
											"end": 3405,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3392,
											"end": 3401,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3388,
											"end": 3406,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3380,
											"end": 3406,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3380,
											"end": 3406,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3416,
											"end": 3481,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "219"
										},
										{
											"begin": 3478,
											"end": 3479,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3467,
											"end": 3476,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3463,
											"end": 3480,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3454,
											"end": 3460,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 3416,
											"end": 3481,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 3416,
											"end": 3481,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3416,
											"end": 3481,
											"name": "tag",
											"source": 14,
											"value": "219"
										},
										{
											"begin": 3416,
											"end": 3481,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3278,
											"end": 3488,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3278,
											"end": 3488,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3278,
											"end": 3488,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3278,
											"end": 3488,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3278,
											"end": 3488,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3494,
											"end": 3612,
											"name": "tag",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 3494,
											"end": 3612,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3581,
											"end": 3605,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "221"
										},
										{
											"begin": 3599,
											"end": 3604,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3581,
											"end": 3605,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 3581,
											"end": 3605,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3581,
											"end": 3605,
											"name": "tag",
											"source": 14,
											"value": "221"
										},
										{
											"begin": 3581,
											"end": 3605,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3576,
											"end": 3579,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3569,
											"end": 3606,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3494,
											"end": 3612,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3494,
											"end": 3612,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3494,
											"end": 3612,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3618,
											"end": 3840,
											"name": "tag",
											"source": 14,
											"value": "28"
										},
										{
											"begin": 3618,
											"end": 3840,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3711,
											"end": 3715,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3749,
											"end": 3751,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3738,
											"end": 3747,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3734,
											"end": 3752,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3726,
											"end": 3752,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3726,
											"end": 3752,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3762,
											"end": 3833,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "223"
										},
										{
											"begin": 3830,
											"end": 3831,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3819,
											"end": 3828,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3815,
											"end": 3832,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3806,
											"end": 3812,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 3762,
											"end": 3833,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 3762,
											"end": 3833,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3762,
											"end": 3833,
											"name": "tag",
											"source": 14,
											"value": "223"
										},
										{
											"begin": 3762,
											"end": 3833,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3618,
											"end": 3840,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3618,
											"end": 3840,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3618,
											"end": 3840,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3618,
											"end": 3840,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3618,
											"end": 3840,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3846,
											"end": 4465,
											"name": "tag",
											"source": 14,
											"value": "31"
										},
										{
											"begin": 3846,
											"end": 4465,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3923,
											"end": 3929,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3931,
											"end": 3937,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3939,
											"end": 3945,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3988,
											"end": 3990,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 3976,
											"end": 3985,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 3967,
											"end": 3974,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3963,
											"end": 3986,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 3959,
											"end": 3991,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 3956,
											"end": 4075,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3956,
											"end": 4075,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "225"
										},
										{
											"begin": 3956,
											"end": 4075,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3994,
											"end": 4073,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "226"
										},
										{
											"begin": 3994,
											"end": 4073,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 3994,
											"end": 4073,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3994,
											"end": 4073,
											"name": "tag",
											"source": 14,
											"value": "226"
										},
										{
											"begin": 3994,
											"end": 4073,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3956,
											"end": 4075,
											"name": "tag",
											"source": 14,
											"value": "225"
										},
										{
											"begin": 3956,
											"end": 4075,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4114,
											"end": 4115,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4139,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "227"
										},
										{
											"begin": 4184,
											"end": 4191,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 4175,
											"end": 4181,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4164,
											"end": 4173,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 4160,
											"end": 4182,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4139,
											"end": 4192,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 4139,
											"end": 4192,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4139,
											"end": 4192,
											"name": "tag",
											"source": 14,
											"value": "227"
										},
										{
											"begin": 4139,
											"end": 4192,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4129,
											"end": 4192,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 4129,
											"end": 4192,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4085,
											"end": 4202,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4241,
											"end": 4243,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4267,
											"end": 4320,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "228"
										},
										{
											"begin": 4312,
											"end": 4319,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 4303,
											"end": 4309,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4292,
											"end": 4301,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 4288,
											"end": 4310,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4267,
											"end": 4320,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 4267,
											"end": 4320,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4267,
											"end": 4320,
											"name": "tag",
											"source": 14,
											"value": "228"
										},
										{
											"begin": 4267,
											"end": 4320,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4257,
											"end": 4320,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4257,
											"end": 4320,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4212,
											"end": 4330,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4369,
											"end": 4371,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4395,
											"end": 4448,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "229"
										},
										{
											"begin": 4440,
											"end": 4447,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 4431,
											"end": 4437,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4420,
											"end": 4429,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 4416,
											"end": 4438,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4395,
											"end": 4448,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 4395,
											"end": 4448,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4395,
											"end": 4448,
											"name": "tag",
											"source": 14,
											"value": "229"
										},
										{
											"begin": 4395,
											"end": 4448,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4385,
											"end": 4448,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4385,
											"end": 4448,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4340,
											"end": 4458,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3846,
											"end": 4465,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3846,
											"end": 4465,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3846,
											"end": 4465,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3846,
											"end": 4465,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3846,
											"end": 4465,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3846,
											"end": 4465,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4471,
											"end": 4557,
											"name": "tag",
											"source": 14,
											"value": "159"
										},
										{
											"begin": 4471,
											"end": 4557,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4506,
											"end": 4513,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4546,
											"end": 4550,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 4539,
											"end": 4544,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4535,
											"end": 4551,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4524,
											"end": 4551,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4524,
											"end": 4551,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4471,
											"end": 4557,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4471,
											"end": 4557,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4471,
											"end": 4557,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4471,
											"end": 4557,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4563,
											"end": 4675,
											"name": "tag",
											"source": 14,
											"value": "160"
										},
										{
											"begin": 4563,
											"end": 4675,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4646,
											"end": 4668,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "232"
										},
										{
											"begin": 4662,
											"end": 4667,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4646,
											"end": 4668,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "159"
										},
										{
											"begin": 4646,
											"end": 4668,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4646,
											"end": 4668,
											"name": "tag",
											"source": 14,
											"value": "232"
										},
										{
											"begin": 4646,
											"end": 4668,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4641,
											"end": 4644,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4634,
											"end": 4669,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4563,
											"end": 4675,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4563,
											"end": 4675,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4563,
											"end": 4675,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4681,
											"end": 4895,
											"name": "tag",
											"source": 14,
											"value": "37"
										},
										{
											"begin": 4681,
											"end": 4895,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4770,
											"end": 4774,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4808,
											"end": 4810,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4797,
											"end": 4806,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4793,
											"end": 4811,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4785,
											"end": 4811,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4785,
											"end": 4811,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4821,
											"end": 4888,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "234"
										},
										{
											"begin": 4885,
											"end": 4886,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4874,
											"end": 4883,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4870,
											"end": 4887,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4861,
											"end": 4867,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4821,
											"end": 4888,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "160"
										},
										{
											"begin": 4821,
											"end": 4888,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4821,
											"end": 4888,
											"name": "tag",
											"source": 14,
											"value": "234"
										},
										{
											"begin": 4821,
											"end": 4888,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4681,
											"end": 4895,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4681,
											"end": 4895,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4681,
											"end": 4895,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4681,
											"end": 4895,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4681,
											"end": 4895,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4901,
											"end": 5230,
											"name": "tag",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 4901,
											"end": 5230,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4960,
											"end": 4966,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5009,
											"end": 5011,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4997,
											"end": 5006,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4988,
											"end": 4995,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4984,
											"end": 5007,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4980,
											"end": 5012,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 4977,
											"end": 5096,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4977,
											"end": 5096,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "236"
										},
										{
											"begin": 4977,
											"end": 5096,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5015,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "237"
										},
										{
											"begin": 5015,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 5015,
											"end": 5094,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5015,
											"end": 5094,
											"name": "tag",
											"source": 14,
											"value": "237"
										},
										{
											"begin": 5015,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4977,
											"end": 5096,
											"name": "tag",
											"source": 14,
											"value": "236"
										},
										{
											"begin": 4977,
											"end": 5096,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5135,
											"end": 5136,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5160,
											"end": 5213,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "238"
										},
										{
											"begin": 5205,
											"end": 5212,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5196,
											"end": 5202,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5185,
											"end": 5194,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5181,
											"end": 5203,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5160,
											"end": 5213,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 5160,
											"end": 5213,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5160,
											"end": 5213,
											"name": "tag",
											"source": 14,
											"value": "238"
										},
										{
											"begin": 5160,
											"end": 5213,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5150,
											"end": 5213,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5150,
											"end": 5213,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5106,
											"end": 5223,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4901,
											"end": 5230,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4901,
											"end": 5230,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4901,
											"end": 5230,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4901,
											"end": 5230,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4901,
											"end": 5230,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 5236,
											"end": 5710,
											"name": "tag",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 5236,
											"end": 5710,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5304,
											"end": 5310,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5312,
											"end": 5318,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5361,
											"end": 5363,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5349,
											"end": 5358,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5340,
											"end": 5347,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5336,
											"end": 5359,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 5332,
											"end": 5364,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 5329,
											"end": 5448,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5329,
											"end": 5448,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "240"
										},
										{
											"begin": 5329,
											"end": 5448,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5367,
											"end": 5446,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "241"
										},
										{
											"begin": 5367,
											"end": 5446,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 5367,
											"end": 5446,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5367,
											"end": 5446,
											"name": "tag",
											"source": 14,
											"value": "241"
										},
										{
											"begin": 5367,
											"end": 5446,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5329,
											"end": 5448,
											"name": "tag",
											"source": 14,
											"value": "240"
										},
										{
											"begin": 5329,
											"end": 5448,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5487,
											"end": 5488,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5512,
											"end": 5565,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "242"
										},
										{
											"begin": 5557,
											"end": 5564,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5548,
											"end": 5554,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5537,
											"end": 5546,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 5533,
											"end": 5555,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5512,
											"end": 5565,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 5512,
											"end": 5565,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5512,
											"end": 5565,
											"name": "tag",
											"source": 14,
											"value": "242"
										},
										{
											"begin": 5512,
											"end": 5565,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5502,
											"end": 5565,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 5502,
											"end": 5565,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5458,
											"end": 5575,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5614,
											"end": 5616,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5640,
											"end": 5693,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "243"
										},
										{
											"begin": 5685,
											"end": 5692,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5676,
											"end": 5682,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5665,
											"end": 5674,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 5661,
											"end": 5683,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5640,
											"end": 5693,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 5640,
											"end": 5693,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5640,
											"end": 5693,
											"name": "tag",
											"source": 14,
											"value": "243"
										},
										{
											"begin": 5640,
											"end": 5693,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5630,
											"end": 5693,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5630,
											"end": 5693,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5585,
											"end": 5703,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5236,
											"end": 5710,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 5236,
											"end": 5710,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5236,
											"end": 5710,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 5236,
											"end": 5710,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5236,
											"end": 5710,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5236,
											"end": 5710,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 5716,
											"end": 5896,
											"name": "tag",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 5716,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5764,
											"end": 5841,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5761,
											"end": 5762,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5754,
											"end": 5842,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5861,
											"end": 5865,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 5858,
											"end": 5859,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 5851,
											"end": 5866,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5885,
											"end": 5889,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5882,
											"end": 5883,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5875,
											"end": 5890,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 5902,
											"end": 6222,
											"name": "tag",
											"source": 14,
											"value": "65"
										},
										{
											"begin": 5902,
											"end": 6222,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5946,
											"end": 5952,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5983,
											"end": 5984,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 5977,
											"end": 5981,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5973,
											"end": 5985,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 5963,
											"end": 5985,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5963,
											"end": 5985,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6030,
											"end": 6031,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 6024,
											"end": 6028,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6020,
											"end": 6032,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6051,
											"end": 6069,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6041,
											"end": 6122,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 6041,
											"end": 6122,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6107,
											"end": 6111,
											"name": "PUSH",
											"source": 14,
											"value": "7F"
										},
										{
											"begin": 6099,
											"end": 6105,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6095,
											"end": 6112,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6085,
											"end": 6112,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6085,
											"end": 6112,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6041,
											"end": 6122,
											"name": "tag",
											"source": 14,
											"value": "246"
										},
										{
											"begin": 6041,
											"end": 6122,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6169,
											"end": 6171,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6161,
											"end": 6167,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6158,
											"end": 6172,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 6138,
											"end": 6156,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6135,
											"end": 6173,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 6132,
											"end": 6216,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "247"
										},
										{
											"begin": 6132,
											"end": 6216,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6188,
											"end": 6206,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "248"
										},
										{
											"begin": 6188,
											"end": 6206,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 6188,
											"end": 6206,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6188,
											"end": 6206,
											"name": "tag",
											"source": 14,
											"value": "248"
										},
										{
											"begin": 6188,
											"end": 6206,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6132,
											"end": 6216,
											"name": "tag",
											"source": 14,
											"value": "247"
										},
										{
											"begin": 6132,
											"end": 6216,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5953,
											"end": 6222,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5902,
											"end": 6222,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5902,
											"end": 6222,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5902,
											"end": 6222,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5902,
											"end": 6222,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 6228,
											"end": 6408,
											"name": "tag",
											"source": 14,
											"value": "162"
										},
										{
											"begin": 6228,
											"end": 6408,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6276,
											"end": 6353,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6273,
											"end": 6274,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6266,
											"end": 6354,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6373,
											"end": 6377,
											"name": "PUSH",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 6370,
											"end": 6371,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 6363,
											"end": 6378,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6397,
											"end": 6401,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 6394,
											"end": 6395,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6387,
											"end": 6402,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 6414,
											"end": 6719,
											"name": "tag",
											"source": 14,
											"value": "88"
										},
										{
											"begin": 6414,
											"end": 6719,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6454,
											"end": 6457,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6473,
											"end": 6493,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "251"
										},
										{
											"begin": 6491,
											"end": 6492,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6473,
											"end": 6493,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 6473,
											"end": 6493,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6473,
											"end": 6493,
											"name": "tag",
											"source": 14,
											"value": "251"
										},
										{
											"begin": 6473,
											"end": 6493,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6468,
											"end": 6493,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6468,
											"end": 6493,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6507,
											"end": 6527,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "252"
										},
										{
											"begin": 6525,
											"end": 6526,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6507,
											"end": 6527,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 6507,
											"end": 6527,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6507,
											"end": 6527,
											"name": "tag",
											"source": 14,
											"value": "252"
										},
										{
											"begin": 6507,
											"end": 6527,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6502,
											"end": 6527,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6661,
											"end": 6662,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6593,
											"end": 6659,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6589,
											"end": 6663,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 6586,
											"end": 6587,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6583,
											"end": 6664,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 6580,
											"end": 6687,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6580,
											"end": 6687,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "253"
										},
										{
											"begin": 6580,
											"end": 6687,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6667,
											"end": 6685,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "254"
										},
										{
											"begin": 6667,
											"end": 6685,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "162"
										},
										{
											"begin": 6667,
											"end": 6685,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6667,
											"end": 6685,
											"name": "tag",
											"source": 14,
											"value": "254"
										},
										{
											"begin": 6667,
											"end": 6685,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6580,
											"end": 6687,
											"name": "tag",
											"source": 14,
											"value": "253"
										},
										{
											"begin": 6580,
											"end": 6687,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6711,
											"end": 6712,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6708,
											"end": 6709,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6704,
											"end": 6713,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6697,
											"end": 6713,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6697,
											"end": 6713,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6414,
											"end": 6719,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6414,
											"end": 6719,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6414,
											"end": 6719,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6414,
											"end": 6719,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6414,
											"end": 6719,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 6725,
											"end": 6949,
											"name": "tag",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 6725,
											"end": 6949,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6865,
											"end": 6899,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 6861,
											"end": 6862,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6853,
											"end": 6859,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6849,
											"end": 6863,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6842,
											"end": 6900,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6934,
											"end": 6941,
											"name": "PUSH",
											"source": 14,
											"value": "207A65726F000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6929,
											"end": 6931,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6921,
											"end": 6927,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6917,
											"end": 6932,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6910,
											"end": 6942,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6725,
											"end": 6949,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6725,
											"end": 6949,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 6955,
											"end": 7321,
											"name": "tag",
											"source": 14,
											"value": "164"
										},
										{
											"begin": 6955,
											"end": 7321,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7097,
											"end": 7100,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7118,
											"end": 7185,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "257"
										},
										{
											"begin": 7182,
											"end": 7184,
											"name": "PUSH",
											"source": 14,
											"value": "25"
										},
										{
											"begin": 7177,
											"end": 7180,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 7118,
											"end": 7185,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 7118,
											"end": 7185,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7118,
											"end": 7185,
											"name": "tag",
											"source": 14,
											"value": "257"
										},
										{
											"begin": 7118,
											"end": 7185,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7111,
											"end": 7185,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 7111,
											"end": 7185,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7194,
											"end": 7287,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "258"
										},
										{
											"begin": 7283,
											"end": 7286,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7194,
											"end": 7287,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 7194,
											"end": 7287,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7194,
											"end": 7287,
											"name": "tag",
											"source": 14,
											"value": "258"
										},
										{
											"begin": 7194,
											"end": 7287,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7312,
											"end": 7314,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7307,
											"end": 7310,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7303,
											"end": 7315,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7296,
											"end": 7315,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7296,
											"end": 7315,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6955,
											"end": 7321,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6955,
											"end": 7321,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6955,
											"end": 7321,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6955,
											"end": 7321,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 7327,
											"end": 7746,
											"name": "tag",
											"source": 14,
											"value": "101"
										},
										{
											"begin": 7327,
											"end": 7746,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7493,
											"end": 7497,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7531,
											"end": 7533,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7520,
											"end": 7529,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7516,
											"end": 7534,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7508,
											"end": 7534,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7508,
											"end": 7534,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7580,
											"end": 7589,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7574,
											"end": 7578,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7570,
											"end": 7590,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7566,
											"end": 7567,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7555,
											"end": 7564,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 7551,
											"end": 7568,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7544,
											"end": 7591,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7608,
											"end": 7739,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "260"
										},
										{
											"begin": 7734,
											"end": 7738,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7608,
											"end": 7739,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "164"
										},
										{
											"begin": 7608,
											"end": 7739,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7608,
											"end": 7739,
											"name": "tag",
											"source": 14,
											"value": "260"
										},
										{
											"begin": 7608,
											"end": 7739,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7600,
											"end": 7739,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7600,
											"end": 7739,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7327,
											"end": 7746,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 7327,
											"end": 7746,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7327,
											"end": 7746,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7327,
											"end": 7746,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 7752,
											"end": 7975,
											"name": "tag",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 7752,
											"end": 7975,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7892,
											"end": 7926,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 7888,
											"end": 7889,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7880,
											"end": 7886,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7876,
											"end": 7890,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7869,
											"end": 7927,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7961,
											"end": 7967,
											"name": "PUSH",
											"source": 14,
											"value": "7265737300000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7956,
											"end": 7958,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7948,
											"end": 7954,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7944,
											"end": 7959,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7937,
											"end": 7968,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7752,
											"end": 7975,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7752,
											"end": 7975,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 7981,
											"end": 8347,
											"name": "tag",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 7981,
											"end": 8347,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8123,
											"end": 8126,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8144,
											"end": 8211,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "263"
										},
										{
											"begin": 8208,
											"end": 8210,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 8203,
											"end": 8206,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8144,
											"end": 8211,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 8144,
											"end": 8211,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 8144,
											"end": 8211,
											"name": "tag",
											"source": 14,
											"value": "263"
										},
										{
											"begin": 8144,
											"end": 8211,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8137,
											"end": 8211,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8137,
											"end": 8211,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8220,
											"end": 8313,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "264"
										},
										{
											"begin": 8309,
											"end": 8312,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8220,
											"end": 8313,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 8220,
											"end": 8313,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 8220,
											"end": 8313,
											"name": "tag",
											"source": 14,
											"value": "264"
										},
										{
											"begin": 8220,
											"end": 8313,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8338,
											"end": 8340,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 8333,
											"end": 8336,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8329,
											"end": 8341,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8322,
											"end": 8341,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8322,
											"end": 8341,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7981,
											"end": 8347,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 7981,
											"end": 8347,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7981,
											"end": 8347,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7981,
											"end": 8347,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8353,
											"end": 8772,
											"name": "tag",
											"source": 14,
											"value": "111"
										},
										{
											"begin": 8353,
											"end": 8772,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8519,
											"end": 8523,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8557,
											"end": 8559,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8546,
											"end": 8555,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8542,
											"end": 8560,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8534,
											"end": 8560,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8534,
											"end": 8560,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8606,
											"end": 8615,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8600,
											"end": 8604,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8596,
											"end": 8616,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 8592,
											"end": 8593,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8581,
											"end": 8590,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8577,
											"end": 8594,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8570,
											"end": 8617,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8634,
											"end": 8765,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "266"
										},
										{
											"begin": 8760,
											"end": 8764,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8634,
											"end": 8765,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 8634,
											"end": 8765,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 8634,
											"end": 8765,
											"name": "tag",
											"source": 14,
											"value": "266"
										},
										{
											"begin": 8634,
											"end": 8765,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8626,
											"end": 8765,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8626,
											"end": 8765,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8353,
											"end": 8772,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8353,
											"end": 8772,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8353,
											"end": 8772,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8353,
											"end": 8772,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8778,
											"end": 8999,
											"name": "tag",
											"source": 14,
											"value": "167"
										},
										{
											"begin": 8778,
											"end": 8999,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8918,
											"end": 8952,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 8914,
											"end": 8915,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8906,
											"end": 8912,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8902,
											"end": 8916,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8895,
											"end": 8953,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8987,
											"end": 8991,
											"name": "PUSH",
											"source": 14,
											"value": "7373000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8982,
											"end": 8984,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8974,
											"end": 8980,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8970,
											"end": 8985,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8963,
											"end": 8992,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8778,
											"end": 8999,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8778,
											"end": 8999,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9005,
											"end": 9371,
											"name": "tag",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 9005,
											"end": 9371,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9147,
											"end": 9150,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9168,
											"end": 9235,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "269"
										},
										{
											"begin": 9232,
											"end": 9234,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 9227,
											"end": 9230,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9168,
											"end": 9235,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 9168,
											"end": 9235,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9168,
											"end": 9235,
											"name": "tag",
											"source": 14,
											"value": "269"
										},
										{
											"begin": 9168,
											"end": 9235,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9161,
											"end": 9235,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9161,
											"end": 9235,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9244,
											"end": 9337,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "270"
										},
										{
											"begin": 9333,
											"end": 9336,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9244,
											"end": 9337,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "167"
										},
										{
											"begin": 9244,
											"end": 9337,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9244,
											"end": 9337,
											"name": "tag",
											"source": 14,
											"value": "270"
										},
										{
											"begin": 9244,
											"end": 9337,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9362,
											"end": 9364,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 9357,
											"end": 9360,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9353,
											"end": 9365,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9346,
											"end": 9365,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9346,
											"end": 9365,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9005,
											"end": 9371,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9005,
											"end": 9371,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9005,
											"end": 9371,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9005,
											"end": 9371,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9377,
											"end": 9796,
											"name": "tag",
											"source": 14,
											"value": "114"
										},
										{
											"begin": 9377,
											"end": 9796,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9543,
											"end": 9547,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9581,
											"end": 9583,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9570,
											"end": 9579,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9566,
											"end": 9584,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9558,
											"end": 9584,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9558,
											"end": 9584,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9630,
											"end": 9639,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9624,
											"end": 9628,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9620,
											"end": 9640,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 9616,
											"end": 9617,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9605,
											"end": 9614,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9601,
											"end": 9618,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9594,
											"end": 9641,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9658,
											"end": 9789,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "272"
										},
										{
											"begin": 9784,
											"end": 9788,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9658,
											"end": 9789,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 9658,
											"end": 9789,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9658,
											"end": 9789,
											"name": "tag",
											"source": 14,
											"value": "272"
										},
										{
											"begin": 9658,
											"end": 9789,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9650,
											"end": 9789,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9650,
											"end": 9789,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9377,
											"end": 9796,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9377,
											"end": 9796,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9377,
											"end": 9796,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9377,
											"end": 9796,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9802,
											"end": 9981,
											"name": "tag",
											"source": 14,
											"value": "169"
										},
										{
											"begin": 9802,
											"end": 9981,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9942,
											"end": 9973,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 9938,
											"end": 9939,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9930,
											"end": 9936,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9926,
											"end": 9940,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9919,
											"end": 9974,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9802,
											"end": 9981,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9802,
											"end": 9981,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9987,
											"end": 10353,
											"name": "tag",
											"source": 14,
											"value": "170"
										},
										{
											"begin": 9987,
											"end": 10353,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10129,
											"end": 10132,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10150,
											"end": 10217,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "275"
										},
										{
											"begin": 10214,
											"end": 10216,
											"name": "PUSH",
											"source": 14,
											"value": "1D"
										},
										{
											"begin": 10209,
											"end": 10212,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10150,
											"end": 10217,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 10150,
											"end": 10217,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 10150,
											"end": 10217,
											"name": "tag",
											"source": 14,
											"value": "275"
										},
										{
											"begin": 10150,
											"end": 10217,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10143,
											"end": 10217,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10143,
											"end": 10217,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10226,
											"end": 10319,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "276"
										},
										{
											"begin": 10315,
											"end": 10318,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10226,
											"end": 10319,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "169"
										},
										{
											"begin": 10226,
											"end": 10319,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 10226,
											"end": 10319,
											"name": "tag",
											"source": 14,
											"value": "276"
										},
										{
											"begin": 10226,
											"end": 10319,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10344,
											"end": 10346,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10339,
											"end": 10342,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10335,
											"end": 10347,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10328,
											"end": 10347,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10328,
											"end": 10347,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9987,
											"end": 10353,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9987,
											"end": 10353,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9987,
											"end": 10353,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9987,
											"end": 10353,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 10359,
											"end": 10778,
											"name": "tag",
											"source": 14,
											"value": "121"
										},
										{
											"begin": 10359,
											"end": 10778,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10525,
											"end": 10529,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10563,
											"end": 10565,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10552,
											"end": 10561,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10548,
											"end": 10566,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10540,
											"end": 10566,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10540,
											"end": 10566,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10612,
											"end": 10621,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10606,
											"end": 10610,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10602,
											"end": 10622,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 10598,
											"end": 10599,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10587,
											"end": 10596,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10583,
											"end": 10600,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10576,
											"end": 10623,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10640,
											"end": 10771,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "278"
										},
										{
											"begin": 10766,
											"end": 10770,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10640,
											"end": 10771,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "170"
										},
										{
											"begin": 10640,
											"end": 10771,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 10640,
											"end": 10771,
											"name": "tag",
											"source": 14,
											"value": "278"
										},
										{
											"begin": 10640,
											"end": 10771,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10632,
											"end": 10771,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10632,
											"end": 10771,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10359,
											"end": 10778,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10359,
											"end": 10778,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10359,
											"end": 10778,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10359,
											"end": 10778,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 10784,
											"end": 11008,
											"name": "tag",
											"source": 14,
											"value": "171"
										},
										{
											"begin": 10784,
											"end": 11008,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10924,
											"end": 10958,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 10920,
											"end": 10921,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10912,
											"end": 10918,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10908,
											"end": 10922,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10901,
											"end": 10959,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10993,
											"end": 11000,
											"name": "PUSH",
											"source": 14,
											"value": "6472657373000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10988,
											"end": 10990,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10980,
											"end": 10986,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10976,
											"end": 10991,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10969,
											"end": 11001,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10784,
											"end": 11008,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10784,
											"end": 11008,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11014,
											"end": 11380,
											"name": "tag",
											"source": 14,
											"value": "172"
										},
										{
											"begin": 11014,
											"end": 11380,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11156,
											"end": 11159,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11177,
											"end": 11244,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "281"
										},
										{
											"begin": 11241,
											"end": 11243,
											"name": "PUSH",
											"source": 14,
											"value": "25"
										},
										{
											"begin": 11236,
											"end": 11239,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11177,
											"end": 11244,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 11177,
											"end": 11244,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11177,
											"end": 11244,
											"name": "tag",
											"source": 14,
											"value": "281"
										},
										{
											"begin": 11177,
											"end": 11244,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11170,
											"end": 11244,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11170,
											"end": 11244,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11253,
											"end": 11346,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "282"
										},
										{
											"begin": 11342,
											"end": 11345,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11253,
											"end": 11346,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "171"
										},
										{
											"begin": 11253,
											"end": 11346,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11253,
											"end": 11346,
											"name": "tag",
											"source": 14,
											"value": "282"
										},
										{
											"begin": 11253,
											"end": 11346,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11371,
											"end": 11373,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 11366,
											"end": 11369,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11362,
											"end": 11374,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11355,
											"end": 11374,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11355,
											"end": 11374,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11014,
											"end": 11380,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11014,
											"end": 11380,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11014,
											"end": 11380,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11014,
											"end": 11380,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11386,
											"end": 11805,
											"name": "tag",
											"source": 14,
											"value": "126"
										},
										{
											"begin": 11386,
											"end": 11805,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11552,
											"end": 11556,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11590,
											"end": 11592,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11579,
											"end": 11588,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11575,
											"end": 11593,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11567,
											"end": 11593,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11567,
											"end": 11593,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11639,
											"end": 11648,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11633,
											"end": 11637,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11629,
											"end": 11649,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 11625,
											"end": 11626,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11614,
											"end": 11623,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11610,
											"end": 11627,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11603,
											"end": 11650,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11667,
											"end": 11798,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "284"
										},
										{
											"begin": 11793,
											"end": 11797,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11667,
											"end": 11798,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "172"
										},
										{
											"begin": 11667,
											"end": 11798,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11667,
											"end": 11798,
											"name": "tag",
											"source": 14,
											"value": "284"
										},
										{
											"begin": 11667,
											"end": 11798,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11659,
											"end": 11798,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11659,
											"end": 11798,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11386,
											"end": 11805,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11386,
											"end": 11805,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11386,
											"end": 11805,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11386,
											"end": 11805,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11811,
											"end": 12033,
											"name": "tag",
											"source": 14,
											"value": "173"
										},
										{
											"begin": 11811,
											"end": 12033,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11951,
											"end": 11985,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 11947,
											"end": 11948,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11939,
											"end": 11945,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11935,
											"end": 11949,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11928,
											"end": 11986,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12020,
											"end": 12025,
											"name": "PUSH",
											"source": 14,
											"value": "6573730000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12015,
											"end": 12017,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 12007,
											"end": 12013,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12003,
											"end": 12018,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11996,
											"end": 12026,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11811,
											"end": 12033,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11811,
											"end": 12033,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12039,
											"end": 12405,
											"name": "tag",
											"source": 14,
											"value": "174"
										},
										{
											"begin": 12039,
											"end": 12405,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12181,
											"end": 12184,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12202,
											"end": 12269,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "287"
										},
										{
											"begin": 12266,
											"end": 12268,
											"name": "PUSH",
											"source": 14,
											"value": "23"
										},
										{
											"begin": 12261,
											"end": 12264,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12202,
											"end": 12269,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 12202,
											"end": 12269,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 12202,
											"end": 12269,
											"name": "tag",
											"source": 14,
											"value": "287"
										},
										{
											"begin": 12202,
											"end": 12269,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12195,
											"end": 12269,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12195,
											"end": 12269,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12278,
											"end": 12371,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "288"
										},
										{
											"begin": 12367,
											"end": 12370,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12278,
											"end": 12371,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "173"
										},
										{
											"begin": 12278,
											"end": 12371,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 12278,
											"end": 12371,
											"name": "tag",
											"source": 14,
											"value": "288"
										},
										{
											"begin": 12278,
											"end": 12371,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12396,
											"end": 12398,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 12391,
											"end": 12394,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12387,
											"end": 12399,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12380,
											"end": 12399,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12380,
											"end": 12399,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12039,
											"end": 12405,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12039,
											"end": 12405,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12039,
											"end": 12405,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12039,
											"end": 12405,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12411,
											"end": 12830,
											"name": "tag",
											"source": 14,
											"value": "129"
										},
										{
											"begin": 12411,
											"end": 12830,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12577,
											"end": 12581,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12615,
											"end": 12617,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 12604,
											"end": 12613,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12600,
											"end": 12618,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12592,
											"end": 12618,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12592,
											"end": 12618,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12664,
											"end": 12673,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12658,
											"end": 12662,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12654,
											"end": 12674,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 12650,
											"end": 12651,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12639,
											"end": 12648,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12635,
											"end": 12652,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12628,
											"end": 12675,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12692,
											"end": 12823,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "290"
										},
										{
											"begin": 12818,
											"end": 12822,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12692,
											"end": 12823,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "174"
										},
										{
											"begin": 12692,
											"end": 12823,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 12692,
											"end": 12823,
											"name": "tag",
											"source": 14,
											"value": "290"
										},
										{
											"begin": 12692,
											"end": 12823,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12684,
											"end": 12823,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12684,
											"end": 12823,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12411,
											"end": 12830,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12411,
											"end": 12830,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12411,
											"end": 12830,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12411,
											"end": 12830,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12836,
											"end": 13061,
											"name": "tag",
											"source": 14,
											"value": "175"
										},
										{
											"begin": 12836,
											"end": 13061,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12976,
											"end": 13010,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 12972,
											"end": 12973,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12964,
											"end": 12970,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12960,
											"end": 12974,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12953,
											"end": 13011,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13045,
											"end": 13053,
											"name": "PUSH",
											"source": 14,
											"value": "616C616E63650000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13040,
											"end": 13042,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13032,
											"end": 13038,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13028,
											"end": 13043,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13021,
											"end": 13054,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12836,
											"end": 13061,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12836,
											"end": 13061,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13067,
											"end": 13433,
											"name": "tag",
											"source": 14,
											"value": "176"
										},
										{
											"begin": 13067,
											"end": 13433,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13209,
											"end": 13212,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13230,
											"end": 13297,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "293"
										},
										{
											"begin": 13294,
											"end": 13296,
											"name": "PUSH",
											"source": 14,
											"value": "26"
										},
										{
											"begin": 13289,
											"end": 13292,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13230,
											"end": 13297,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 13230,
											"end": 13297,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 13230,
											"end": 13297,
											"name": "tag",
											"source": 14,
											"value": "293"
										},
										{
											"begin": 13230,
											"end": 13297,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13223,
											"end": 13297,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13223,
											"end": 13297,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13306,
											"end": 13399,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "294"
										},
										{
											"begin": 13395,
											"end": 13398,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13306,
											"end": 13399,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "175"
										},
										{
											"begin": 13306,
											"end": 13399,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 13306,
											"end": 13399,
											"name": "tag",
											"source": 14,
											"value": "294"
										},
										{
											"begin": 13306,
											"end": 13399,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13424,
											"end": 13426,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 13419,
											"end": 13422,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13415,
											"end": 13427,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13408,
											"end": 13427,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13408,
											"end": 13427,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13067,
											"end": 13433,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13067,
											"end": 13433,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13067,
											"end": 13433,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13067,
											"end": 13433,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13439,
											"end": 13858,
											"name": "tag",
											"source": 14,
											"value": "134"
										},
										{
											"begin": 13439,
											"end": 13858,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13605,
											"end": 13609,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13643,
											"end": 13645,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13632,
											"end": 13641,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13628,
											"end": 13646,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13620,
											"end": 13646,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13620,
											"end": 13646,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13692,
											"end": 13701,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13686,
											"end": 13690,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13682,
											"end": 13702,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 13678,
											"end": 13679,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13667,
											"end": 13676,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13663,
											"end": 13680,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13656,
											"end": 13703,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13720,
											"end": 13851,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "296"
										},
										{
											"begin": 13846,
											"end": 13850,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13720,
											"end": 13851,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "176"
										},
										{
											"begin": 13720,
											"end": 13851,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 13720,
											"end": 13851,
											"name": "tag",
											"source": 14,
											"value": "296"
										},
										{
											"begin": 13720,
											"end": 13851,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13712,
											"end": 13851,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13712,
											"end": 13851,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13439,
											"end": 13858,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13439,
											"end": 13858,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13439,
											"end": 13858,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13439,
											"end": 13858,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcec0617473fa22a0866d7daf25bf4d664a62902e49c4a158aef54c1e4348e8a\",\"dweb:/ipfs/QmPQetTKnLJBAQQrLKUWGVZwfp3VGmBhnqqJvmJTycM1jR\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 9,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1363,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 160,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 166,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 168,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 170,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 172,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 751,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"IERC20MetadataUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"SafeERC20Upgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":667:4025  library SafeERC20Upgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":667:4025  library SafeERC20Upgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205866aaedac401b7f994e33e92e4df52592c5599d83a254e99d4ded5510c1ea5664736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205866aaedac401b7f994e33e92e4df52592c5599d83a254e99d4ded5510c1ea5664736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC PUSH7 0xAAEDAC401B7F99 0x4E CALLER 0xE9 0x2E 0x4D CREATE2 0x25 SWAP3 0xC5 MSIZE SWAP14 DUP4 LOG2 SLOAD 0xE9 SWAP14 0x4D 0xED SSTORE LT 0xC1 0xEA JUMP PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "667:3358:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205866aaedac401b7f994e33e92e4df52592c5599d83a254e99d4ded5510c1ea5664736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC PUSH7 0xAAEDAC401B7F99 0x4E CALLER 0xE9 0x2E 0x4D CREATE2 0x25 SWAP3 0xC5 MSIZE SWAP14 DUP4 LOG2 SLOAD 0xE9 SWAP14 0x4D 0xED SSTORE LT 0xC1 0xEA JUMP PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "667:3358:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)": "infinite",
								"safeApprove(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeTransfer(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205866aaedac401b7f994e33e92e4df52592c5599d83a254e99d4ded5510c1ea5664736f6c634300080d0033",
									".code": [
										{
											"begin": 667,
											"end": 4025,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ca7bd5deecc4abd97f0218708c6e004953971cc62de68557fe0c6c8607f85a65\",\"dweb:/ipfs/QmRw3dGdS6ksHZiqcPRknYvWXfYP2hTj21PhkLjXyEVEf6\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:7316  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:7316  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122071c725024cdf3953feed91e20bfb3adf92d130858d63861375d3e7210ecff62e64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122071c725024cdf3953feed91e20bfb3adf92d130858d63861375d3e7210ecff62e64736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0xC725024CDF3953FEED91E20BFB3ADF92D130 DUP6 DUP14 PUSH4 0x861375D3 0xE7 0x21 0xE 0xCF 0xF6 0x2E PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "194:7122:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122071c725024cdf3953feed91e20bfb3adf92d130858d63861375d3e7210ecff62e64736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0xC725024CDF3953FEED91E20BFB3ADF92D130 DUP6 DUP14 PUSH4 0x861375D3 0xE7 0x21 0xE 0xCF 0xF6 0x2E PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "194:7122:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 5,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122071c725024cdf3953feed91e20bfb3adf92d130858d63861375d3e7210ecff62e64736f6c634300080d0033",
									".code": [
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 9,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1363,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"SuperDepositor.sol": {
				"SuperDepositor": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_balVault",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "balVault",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "contract IAsset[]",
											"name": "underlyings",
											"type": "address[]"
										},
										{
											"internalType": "uint256",
											"name": "depositTokenIndex",
											"type": "uint256"
										},
										{
											"internalType": "bytes32",
											"name": "beetsPoolId",
											"type": "bytes32"
										},
										{
											"internalType": "address",
											"name": "lpToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "vault",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										}
									],
									"internalType": "struct SuperDepositor.DepositParams",
									"name": "details",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "routeDeposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "contract IAsset[]",
											"name": "underlyings",
											"type": "address[]"
										},
										{
											"internalType": "uint256",
											"name": "depositTokenIndex",
											"type": "uint256"
										},
										{
											"internalType": "bytes32",
											"name": "beetsPoolId",
											"type": "bytes32"
										},
										{
											"internalType": "address",
											"name": "lpToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "vault",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										}
									],
									"internalType": "struct SuperDepositor.DepositParams",
									"name": "details",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "singleSideDeposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "andreas@nascent.xyz",
						"kind": "dev",
						"methods": {},
						"title": "Greeter",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"SuperDepositor.sol\":289:3295  contract SuperDepositor {... */\n  mstore(0x40, 0xa0)\n    /* \"SuperDepositor.sol\":904:974  constructor(address _balVault) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"SuperDepositor.sol\":957:966  _balVault */\n  dup1\n    /* \"SuperDepositor.sol\":946:966  balVault = _balVault */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x80\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"SuperDepositor.sol\":904:974  constructor(address _balVault) {... */\n  pop\n    /* \"SuperDepositor.sol\":289:3295  contract SuperDepositor {... */\n  jump(tag_6)\n    /* \"#utility.yul\":88:205   */\ntag_8:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_10:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_11:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_20\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_10\n  jump\t// in\ntag_20:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_12:\n    /* \"#utility.yul\":641:665   */\n  tag_22\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_11\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_23\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_23:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_13:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_25\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_12\n  jump\t// in\ntag_25:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1196   */\ntag_3:\n    /* \"#utility.yul\":915:921   */\n  0x00\n    /* \"#utility.yul\":964:966   */\n  0x20\n    /* \"#utility.yul\":952:961   */\n  dup3\n    /* \"#utility.yul\":943:950   */\n  dup5\n    /* \"#utility.yul\":939:962   */\n  sub\n    /* \"#utility.yul\":935:967   */\n  slt\n    /* \"#utility.yul\":932:1051   */\n  iszero\n  tag_27\n  jumpi\n    /* \"#utility.yul\":970:1049   */\n  tag_28\n  tag_8\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":932:1051   */\ntag_27:\n    /* \"#utility.yul\":1090:1091   */\n  0x00\n    /* \"#utility.yul\":1115:1179   */\n  tag_29\n    /* \"#utility.yul\":1171:1178   */\n  dup5\n    /* \"#utility.yul\":1162:1168   */\n  dup3\n    /* \"#utility.yul\":1151:1160   */\n  dup6\n    /* \"#utility.yul\":1147:1169   */\n  add\n    /* \"#utility.yul\":1115:1179   */\n  tag_13\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":1105:1179   */\n  swap2\n  pop\n    /* \"#utility.yul\":1061:1189   */\n  pop\n    /* \"#utility.yul\":845:1196   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"SuperDepositor.sol\":289:3295  contract SuperDepositor {... */\ntag_6:\n  mload(0x80)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0xf3c94672c9097e8255317de36dd0d00a9f72d57eeb896861f583a1140be6889a\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"SuperDepositor.sol\":289:3295  contract SuperDepositor {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x11ffbf3c\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x77aba213\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x81144563\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"SuperDepositor.sol\":982:1075  function routeDeposit(DepositParams memory details, uint256 amount) public {... */\n    tag_3:\n      tag_6\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_7\n      swap2\n      swap1\n      tag_8\n      jump\t// in\n    tag_7:\n      tag_9\n      jump\t// in\n    tag_6:\n      stop\n        /* \"SuperDepositor.sol\":379:412  address public immutable balVault */\n    tag_4:\n      tag_10\n      tag_11\n      jump\t// in\n    tag_10:\n      mload(0x40)\n      tag_12\n      swap2\n      swap1\n      tag_13\n      jump\t// in\n    tag_12:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"SuperDepositor.sol\":1083:1562  function singleSideDeposit(DepositParams memory details, uint256 amount) public {... */\n    tag_5:\n      tag_14\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_15\n      swap2\n      swap1\n      tag_8\n      jump\t// in\n    tag_15:\n      tag_16\n      jump\t// in\n    tag_14:\n      stop\n        /* \"SuperDepositor.sol\":982:1075  function routeDeposit(DepositParams memory details, uint256 amount) public {... */\n    tag_9:\n      pop\n      pop\n      jump\t// out\n        /* \"SuperDepositor.sol\":379:412  address public immutable balVault */\n    tag_11:\n      immutable(\"0xf3c94672c9097e8255317de36dd0d00a9f72d57eeb896861f583a1140be6889a\")\n      dup2\n      jump\t// out\n        /* \"SuperDepositor.sol\":1083:1562  function singleSideDeposit(DepositParams memory details, uint256 amount) public {... */\n    tag_16:\n        /* \"SuperDepositor.sol\":1174:1202  IERC20Upgradeable inputToken */\n      0x00\n        /* \"SuperDepositor.sol\":1231:1238  details */\n      dup3\n        /* \"SuperDepositor.sol\":1231:1250  details.underlyings */\n      0x00\n      add\n      mload\n        /* \"SuperDepositor.sol\":1251:1258  details */\n      dup4\n        /* \"SuperDepositor.sol\":1251:1276  details.depositTokenIndex */\n      0x20\n      add\n      mload\n        /* \"SuperDepositor.sol\":1231:1277  details.underlyings[details.depositTokenIndex] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_19\n      jumpi\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n    tag_19:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"SuperDepositor.sol\":1174:1279  IERC20Upgradeable inputToken = IERC20Upgradeable(address(details.underlyings[details.depositTokenIndex])) */\n      swap1\n      pop\n        /* \"SuperDepositor.sol\":1290:1352  inputToken.safeTransferFrom(msg.sender, address(this), amount) */\n      tag_22\n        /* \"SuperDepositor.sol\":1318:1328  msg.sender */\n      caller\n        /* \"SuperDepositor.sol\":1338:1342  this */\n      address\n        /* \"SuperDepositor.sol\":1345:1351  amount */\n      dup5\n        /* \"SuperDepositor.sol\":1290:1300  inputToken */\n      dup5\n        /* \"SuperDepositor.sol\":1290:1317  inputToken.safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_23\n      swap1\n        /* \"SuperDepositor.sol\":1290:1352  inputToken.safeTransferFrom(msg.sender, address(this), amount) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_22:\n        /* \"SuperDepositor.sol\":1363:1449  _joinPool(details.underlyings, amount, details.depositTokenIndex, details.beetsPoolId) */\n      tag_24\n        /* \"SuperDepositor.sol\":1373:1380  details */\n      dup4\n        /* \"SuperDepositor.sol\":1373:1392  details.underlyings */\n      0x00\n      add\n      mload\n        /* \"SuperDepositor.sol\":1394:1400  amount */\n      dup4\n        /* \"SuperDepositor.sol\":1402:1409  details */\n      dup6\n        /* \"SuperDepositor.sol\":1402:1427  details.depositTokenIndex */\n      0x20\n      add\n      mload\n        /* \"SuperDepositor.sol\":1429:1436  details */\n      dup7\n        /* \"SuperDepositor.sol\":1429:1448  details.beetsPoolId */\n      0x40\n      add\n      mload\n        /* \"SuperDepositor.sol\":1363:1372  _joinPool */\n      tag_25\n        /* \"SuperDepositor.sol\":1363:1449  _joinPool(details.underlyings, amount, details.depositTokenIndex, details.beetsPoolId) */\n      jump\t// in\n    tag_24:\n        /* \"SuperDepositor.sol\":1486:1554  _depositLPToVault(details.lpToken, details.vault, details.recipient) */\n      tag_26\n        /* \"SuperDepositor.sol\":1504:1511  details */\n      dup4\n        /* \"SuperDepositor.sol\":1504:1519  details.lpToken */\n      0x60\n      add\n      mload\n        /* \"SuperDepositor.sol\":1521:1528  details */\n      dup5\n        /* \"SuperDepositor.sol\":1521:1534  details.vault */\n      0x80\n      add\n      mload\n        /* \"SuperDepositor.sol\":1536:1543  details */\n      dup6\n        /* \"SuperDepositor.sol\":1536:1553  details.recipient */\n      0xa0\n      add\n      mload\n        /* \"SuperDepositor.sol\":1486:1503  _depositLPToVault */\n      tag_27\n        /* \"SuperDepositor.sol\":1486:1554  _depositLPToVault(details.lpToken, details.vault, details.recipient) */\n      jump\t// in\n    tag_26:\n        /* \"SuperDepositor.sol\":1163:1562  {... */\n      pop\n        /* \"SuperDepositor.sol\":1083:1562  function singleSideDeposit(DepositParams memory details, uint256 amount) public {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":967:1219  function safeTransferFrom(... */\n    tag_23:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1116:1212  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_29\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1136:1141  token */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1166:1193  token.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1195:1199  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1201:1203  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1205:1210  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1143:1211  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      tag_30\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1116:1135  _callOptionalReturn */\n      tag_32\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1116:1212  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_29:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":967:1219  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"SuperDepositor.sol\":2372:3290  function _joinPool(IAsset[] memory underlyings, uint256 amtIn, uint256 tokenIndex, bytes32 beetsPoolId) internal {... */\n    tag_25:\n        /* \"SuperDepositor.sol\":2496:2510  uint8 joinKind */\n      0x00\n        /* \"SuperDepositor.sol\":2513:2514  1 */\n      0x01\n        /* \"SuperDepositor.sol\":2496:2514  uint8 joinKind = 1 */\n      swap1\n      pop\n        /* \"SuperDepositor.sol\":2607:2633  uint256[] memory amountsIn */\n      0x00\n        /* \"SuperDepositor.sol\":2650:2661  underlyings */\n      dup6\n        /* \"SuperDepositor.sol\":2650:2668  underlyings.length */\n      mload\n        /* \"SuperDepositor.sol\":2636:2669  new uint256[](underlyings.length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_34\n      jumpi\n      tag_35\n      tag_36\n      jump\t// in\n    tag_35:\n    tag_34:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_37\n      jumpi\n      dup2\n      0x20\n      add\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_37:\n      pop\n        /* \"SuperDepositor.sol\":2607:2669  uint256[] memory amountsIn = new uint256[](underlyings.length) */\n      swap1\n      pop\n        /* \"SuperDepositor.sol\":2704:2709  amtIn */\n      dup5\n        /* \"SuperDepositor.sol\":2680:2689  amountsIn */\n      dup2\n        /* \"SuperDepositor.sol\":2690:2700  tokenIndex */\n      dup6\n        /* \"SuperDepositor.sol\":2680:2701  amountsIn[tokenIndex] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_38\n      jumpi\n      tag_39\n      tag_21\n      jump\t// in\n    tag_39:\n    tag_38:\n      0x20\n      mul\n      0x20\n      add\n      add\n        /* \"SuperDepositor.sol\":2680:2709  amountsIn[tokenIndex] = amtIn */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"SuperDepositor.sol\":2722:2742  uint256 minAmountOut */\n      0x00\n        /* \"SuperDepositor.sol\":2745:2746  1 */\n      0x01\n        /* \"SuperDepositor.sol\":2722:2746  uint256 minAmountOut = 1 */\n      swap1\n      pop\n        /* \"SuperDepositor.sol\":2798:2819  bytes memory userData */\n      0x00\n        /* \"SuperDepositor.sol\":2833:2841  joinKind */\n      dup4\n        /* \"SuperDepositor.sol\":2843:2852  amountsIn */\n      dup4\n        /* \"SuperDepositor.sol\":2854:2866  minAmountOut */\n      dup4\n        /* \"SuperDepositor.sol\":2822:2867  abi.encode(joinKind, amountsIn, minAmountOut) */\n      add(0x20, mload(0x40))\n      tag_40\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"SuperDepositor.sol\":2798:2867  bytes memory userData = abi.encode(joinKind, amountsIn, minAmountOut) */\n      swap1\n      pop\n        /* \"SuperDepositor.sol\":2880:2921  IBeetVault.JoinPoolRequest memory request */\n      tag_42\n      tag_43\n      jump\t// in\n    tag_42:\n        /* \"SuperDepositor.sol\":2949:2960  underlyings */\n      dup9\n        /* \"SuperDepositor.sol\":2932:2939  request */\n      dup2\n        /* \"SuperDepositor.sol\":2932:2946  request.assets */\n      0x00\n      add\n        /* \"SuperDepositor.sol\":2932:2960  request.assets = underlyings */\n      dup2\n      swap1\n      mstore\n      pop\n        /* \"SuperDepositor.sol\":2994:3003  amountsIn */\n      dup4\n        /* \"SuperDepositor.sol\":2971:2978  request */\n      dup2\n        /* \"SuperDepositor.sol\":2971:2991  request.maxAmountsIn */\n      0x20\n      add\n        /* \"SuperDepositor.sol\":2971:3003  request.maxAmountsIn = amountsIn */\n      dup2\n      swap1\n      mstore\n      pop\n        /* \"SuperDepositor.sol\":3033:3041  userData */\n      dup2\n        /* \"SuperDepositor.sol\":3014:3021  request */\n      dup2\n        /* \"SuperDepositor.sol\":3014:3030  request.userData */\n      0x40\n      add\n        /* \"SuperDepositor.sol\":3014:3041  request.userData = userData */\n      dup2\n      swap1\n      mstore\n      pop\n        /* \"SuperDepositor.sol\":3082:3087  false */\n      0x00\n        /* \"SuperDepositor.sol\":3052:3059  request */\n      dup2\n        /* \"SuperDepositor.sol\":3052:3079  request.fromInternalBalance */\n      0x60\n      add\n        /* \"SuperDepositor.sol\":3052:3087  request.fromInternalBalance = false */\n      swap1\n      iszero\n      iszero\n      swap1\n      dup2\n      iszero\n      iszero\n      dup2\n      mstore\n      pop\n      pop\n        /* \"SuperDepositor.sol\":3100:3190  IERC20Upgradeable(address(underlyings[tokenIndex])).safeIncreaseAllowance(balVault, amtIn) */\n      tag_44\n        /* \"SuperDepositor.sol\":3174:3182  balVault */\n      immutable(\"0xf3c94672c9097e8255317de36dd0d00a9f72d57eeb896861f583a1140be6889a\")\n        /* \"SuperDepositor.sol\":3184:3189  amtIn */\n      dup10\n        /* \"SuperDepositor.sol\":3126:3137  underlyings */\n      dup12\n        /* \"SuperDepositor.sol\":3138:3148  tokenIndex */\n      dup11\n        /* \"SuperDepositor.sol\":3126:3149  underlyings[tokenIndex] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_45\n      jumpi\n      tag_46\n      tag_21\n      jump\t// in\n    tag_46:\n    tag_45:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"SuperDepositor.sol\":3100:3173  IERC20Upgradeable(address(underlyings[tokenIndex])).safeIncreaseAllowance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_47\n      swap1\n        /* \"SuperDepositor.sol\":3100:3190  IERC20Upgradeable(address(underlyings[tokenIndex])).safeIncreaseAllowance(balVault, amtIn) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_44:\n        /* \"SuperDepositor.sol\":3212:3220  balVault */\n      immutable(\"0xf3c94672c9097e8255317de36dd0d00a9f72d57eeb896861f583a1140be6889a\")\n        /* \"SuperDepositor.sol\":3201:3230  IBeetVault(balVault).joinPool */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xb95cac28\n        /* \"SuperDepositor.sol\":3231:3242  beetsPoolId */\n      dup8\n        /* \"SuperDepositor.sol\":3252:3256  this */\n      address\n        /* \"SuperDepositor.sol\":3267:3271  this */\n      address\n        /* \"SuperDepositor.sol\":3274:3281  request */\n      dup6\n        /* \"SuperDepositor.sol\":3201:3282  IBeetVault(balVault).joinPool(beetsPoolId, address(this), address(this), request) */\n      mload(0x40)\n      dup6\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_48\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n    tag_48:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_52\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_52:\n      pop\n      pop\n      pop\n      pop\n        /* \"SuperDepositor.sol\":2485:3290  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"SuperDepositor.sol\":2372:3290  function _joinPool(IAsset[] memory underlyings, uint256 amtIn, uint256 tokenIndex, bytes32 beetsPoolId) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"SuperDepositor.sol\":1570:1977  function _depositLPToVault(address lp, address vault, address recipient) internal {... */\n    tag_27:\n        /* \"SuperDepositor.sol\":1688:1715  _approveIfNeeded(vault, lp) */\n      tag_54\n        /* \"SuperDepositor.sol\":1705:1710  vault */\n      dup3\n        /* \"SuperDepositor.sol\":1712:1714  lp */\n      dup5\n        /* \"SuperDepositor.sol\":1688:1704  _approveIfNeeded */\n      tag_55\n        /* \"SuperDepositor.sol\":1688:1715  _approveIfNeeded(vault, lp) */\n      jump\t// in\n    tag_54:\n        /* \"SuperDepositor.sol\":1783:1788  vault */\n      dup2\n        /* \"SuperDepositor.sol\":1776:1800  IVault(vault).depositAll */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xde5f6268\n        /* \"SuperDepositor.sol\":1776:1802  IVault(vault).depositAll() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_56\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_56:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_58\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_58:\n      pop\n      pop\n      pop\n      pop\n        /* \"SuperDepositor.sol\":1844:1868  IERC20Upgradeable shares */\n      0x00\n        /* \"SuperDepositor.sol\":1889:1894  vault */\n      dup3\n        /* \"SuperDepositor.sol\":1844:1895  IERC20Upgradeable shares = IERC20Upgradeable(vault) */\n      swap1\n      pop\n        /* \"SuperDepositor.sol\":1906:1969  shares.safeTransfer(recipient, shares.balanceOf(address(this))) */\n      tag_59\n        /* \"SuperDepositor.sol\":1926:1935  recipient */\n      dup3\n        /* \"SuperDepositor.sol\":1937:1943  shares */\n      dup3\n        /* \"SuperDepositor.sol\":1937:1953  shares.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"SuperDepositor.sol\":1962:1966  this */\n      address\n        /* \"SuperDepositor.sol\":1937:1968  shares.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_60\n      swap2\n      swap1\n      tag_13\n      jump\t// in\n    tag_60:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_62\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_62:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_63\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_63:\n        /* \"SuperDepositor.sol\":1906:1912  shares */\n      dup4\n        /* \"SuperDepositor.sol\":1906:1925  shares.safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_65\n      swap1\n        /* \"SuperDepositor.sol\":1906:1969  shares.safeTransfer(recipient, shares.balanceOf(address(this))) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_59:\n        /* \"SuperDepositor.sol\":1652:1977  {... */\n      pop\n        /* \"SuperDepositor.sol\":1570:1977  function _depositLPToVault(address lp, address vault, address recipient) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3306:4023  function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {... */\n    tag_32:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3736:3759  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3762:3831  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_67\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3790:3794  data */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3762:3831  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3770:3775  token */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3762:3789  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_68\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3762:3831  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_67:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3736:3831  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3865:3866  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3845:3855  returndata */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3845:3862  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3845:3866  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3841:4017  if (returndata.length > 0) {... */\n      iszero\n      tag_69\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3940:3950  returndata */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3929:3959  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_70\n      swap2\n      swap1\n      tag_71\n      jump\t// in\n    tag_70:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3921:4006  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_72\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_73\n      swap1\n      tag_74\n      jump\t// in\n    tag_73:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_72:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3841:4017  if (returndata.length > 0) {... */\n    tag_69:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3387:4023  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3306:4023  function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2099:2420  function safeIncreaseAllowance(... */\n    tag_47:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2236:2256  uint256 newAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2301:2306  value */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2259:2264  token */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2259:2274  token.allowance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xdd62ed3e\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2283:2287  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2290:2297  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2259:2298  token.allowance(address(this), spender) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_76\n      swap3\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_76:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_79\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_79:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_80\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_80:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2259:2306  token.allowance(address(this), spender) + value */\n      tag_81\n      swap2\n      swap1\n      tag_82\n      jump\t// in\n    tag_81:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2236:2306  uint256 newAllowance = token.allowance(address(this), spender) + value */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2316:2413  _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance)) */\n      tag_83\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2336:2341  token */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2366:2388  token.approve.selector */\n      shl(0xe0, 0x095ea7b3)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2390:2397  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2399:2411  newAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2343:2412  abi.encodeWithSelector(token.approve.selector, spender, newAllowance) */\n      add(0x24, mload(0x40))\n      tag_84\n      swap3\n      swap2\n      swap1\n      tag_85\n      jump\t// in\n    tag_84:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2316:2335  _callOptionalReturn */\n      tag_32\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2316:2413  _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance)) */\n      jump\t// in\n    tag_83:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2226:2420  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":2099:2420  function safeIncreaseAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"SuperDepositor.sol\":1985:2272  function _approveIfNeeded(address spender, address token) internal {... */\n    tag_55:\n        /* \"SuperDepositor.sol\":2063:2086  IERC20Upgradeable token */\n      0x00\n        /* \"SuperDepositor.sol\":2107:2112  token */\n      dup2\n        /* \"SuperDepositor.sol\":2063:2113  IERC20Upgradeable token = IERC20Upgradeable(token) */\n      swap1\n      pop\n        /* \"SuperDepositor.sol\":2179:2180  0 */\n      0x00\n        /* \"SuperDepositor.sol\":2128:2133  token */\n      dup2\n        /* \"SuperDepositor.sol\":2128:2143  token.allowance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xdd62ed3e\n        /* \"SuperDepositor.sol\":2152:2156  this */\n      address\n        /* \"SuperDepositor.sol\":2159:2166  spender */\n      dup7\n        /* \"SuperDepositor.sol\":2128:2167  token.allowance(address(this), spender) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_87\n      swap3\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_87:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_89\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_89:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_90\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_90:\n        /* \"SuperDepositor.sol\":2128:2181  token.allowance(address(this), spender) == uint256(0) */\n      sub\n        /* \"SuperDepositor.sol\":2124:2265  if (token.allowance(address(this), spender) == uint256(0)) {... */\n      tag_91\n      jumpi\n        /* \"SuperDepositor.sol\":2198:2253  token.safeIncreaseAllowance(spender, type(uint256).max) */\n      tag_92\n        /* \"SuperDepositor.sol\":2226:2233  spender */\n      dup4\n        /* \"SuperDepositor.sol\":2235:2252  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"SuperDepositor.sol\":2198:2203  token */\n      dup4\n        /* \"SuperDepositor.sol\":2198:2225  token.safeIncreaseAllowance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_47\n      swap1\n        /* \"SuperDepositor.sol\":2198:2253  token.safeIncreaseAllowance(spender, type(uint256).max) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_92:\n        /* \"SuperDepositor.sol\":2124:2265  if (token.allowance(address(this), spender) == uint256(0)) {... */\n    tag_91:\n        /* \"SuperDepositor.sol\":2052:2272  {... */\n      pop\n        /* \"SuperDepositor.sol\":1985:2272  function _approveIfNeeded(address spender, address token) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":745:961  function safeTransfer(... */\n    tag_65:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":868:954  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_94\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":888:893  token */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":918:941  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":943:945  to */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":947:952  value */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":895:953  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      tag_95\n      swap3\n      swap2\n      swap1\n      tag_85\n      jump\t// in\n    tag_95:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":868:887  _callOptionalReturn */\n      tag_32\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":868:954  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_94:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":745:961  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3872:4095  function functionCall(... */\n    tag_68:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4005:4017  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4036:4088  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_97\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4058:4064  target */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4066:4070  data */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4072:4073  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4075:4087  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4036:4057  functionCallWithValue */\n      tag_98\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4036:4088  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_97:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4029:4088  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3872:4095  function functionCall(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4959:5458  function functionCallWithValue(... */\n    tag_98:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5124:5136  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5181:5186  value */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5156:5177  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5156:5186  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5148:5229  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_100\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_101\n      swap1\n      tag_102\n      jump\t// in\n    tag_101:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_100:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5247:5265  isContract(target) */\n      tag_103\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5258:5264  target */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5247:5257  isContract */\n      tag_104\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5247:5265  isContract(target) */\n      jump\t// in\n    tag_103:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5239:5299  require(isContract(target), \"Address: call to non-contract\") */\n      tag_105\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_106\n      swap1\n      tag_107\n      jump\t// in\n    tag_106:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_105:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5311:5323  bool success */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5325:5348  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5352:5358  target */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5352:5363  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5371:5376  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5378:5382  data */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5352:5383  target.call{value: value}(data) */\n      mload(0x40)\n      tag_108\n      swap2\n      swap1\n      tag_109\n      jump\t// in\n    tag_108:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_112\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_111)\n    tag_112:\n      0x60\n      swap2\n      pop\n    tag_111:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5310:5383  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5400:5451  verifyCallResult(success, returndata, errorMessage) */\n      tag_113\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5417:5424  success */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5426:5436  returndata */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5438:5450  errorMessage */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5400:5416  verifyCallResult */\n      tag_114\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5400:5451  verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_113:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5393:5451  return verifyCallResult(success, returndata, errorMessage) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4959:5458  function functionCallWithValue(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1186:1506  function isContract(address account) internal view returns (bool) {... */\n    tag_104:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1246:1250  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1498:1499  0 */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1483  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1495  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1499  account.code.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1469:1499  return account.code.length > 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1186:1506  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6622:7314  function verifyCallResult(... */\n    tag_114:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6768:6780  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6796:6803  success */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6792:7308  if (success) {... */\n      iszero\n      tag_117\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6826:6836  returndata */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6819:6836  return returndata */\n      swap1\n      pop\n      jump(tag_116)\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6792:7308  if (success) {... */\n    tag_117:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6957:6958  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6937:6947  returndata */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6937:6954  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6937:6958  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6933:7298  if (returndata.length > 0) {... */\n      iszero\n      tag_119\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7131:7141  returndata */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7125:7142  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7191:7206  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7178:7188  returndata */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7174:7176  32 */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7170:7189  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7163:7207  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6933:7298  if (returndata.length > 0) {... */\n    tag_119:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7270:7282  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":7263:7283  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_121\n      swap2\n      swap1\n      tag_122\n      jump\t// in\n    tag_121:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6622:7314  function verifyCallResult(... */\n    tag_116:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_43:\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      dup1\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      iszero(iszero(0x00))\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:82   */\n    tag_123:\n        /* \"#utility.yul\":40:46   */\n      0x00\n        /* \"#utility.yul\":73:75   */\n      0x40\n        /* \"#utility.yul\":67:76   */\n      mload\n        /* \"#utility.yul\":57:76   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:82   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_124:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":211:328   */\n    tag_125:\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":334:451   */\n    tag_126:\n        /* \"#utility.yul\":443:444   */\n      0x00\n        /* \"#utility.yul\":440:441   */\n      dup1\n        /* \"#utility.yul\":433:445   */\n      revert\n        /* \"#utility.yul\":457:559   */\n    tag_127:\n        /* \"#utility.yul\":498:504   */\n      0x00\n        /* \"#utility.yul\":549:551   */\n      0x1f\n        /* \"#utility.yul\":545:552   */\n      not\n        /* \"#utility.yul\":540:542   */\n      0x1f\n        /* \"#utility.yul\":533:538   */\n      dup4\n        /* \"#utility.yul\":529:543   */\n      add\n        /* \"#utility.yul\":525:553   */\n      and\n        /* \"#utility.yul\":515:553   */\n      swap1\n      pop\n        /* \"#utility.yul\":457:559   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":565:745   */\n    tag_36:\n        /* \"#utility.yul\":613:690   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":610:611   */\n      0x00\n        /* \"#utility.yul\":603:691   */\n      mstore\n        /* \"#utility.yul\":710:714   */\n      0x41\n        /* \"#utility.yul\":707:708   */\n      0x04\n        /* \"#utility.yul\":700:715   */\n      mstore\n        /* \"#utility.yul\":734:738   */\n      0x24\n        /* \"#utility.yul\":731:732   */\n      0x00\n        /* \"#utility.yul\":724:739   */\n      revert\n        /* \"#utility.yul\":751:1032   */\n    tag_128:\n        /* \"#utility.yul\":834:861   */\n      tag_205\n        /* \"#utility.yul\":856:860   */\n      dup3\n        /* \"#utility.yul\":834:861   */\n      tag_127\n      jump\t// in\n    tag_205:\n        /* \"#utility.yul\":826:832   */\n      dup2\n        /* \"#utility.yul\":822:862   */\n      add\n        /* \"#utility.yul\":964:970   */\n      dup2\n        /* \"#utility.yul\":952:962   */\n      dup2\n        /* \"#utility.yul\":949:971   */\n      lt\n        /* \"#utility.yul\":928:946   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":916:926   */\n      dup3\n        /* \"#utility.yul\":913:947   */\n      gt\n        /* \"#utility.yul\":910:972   */\n      or\n        /* \"#utility.yul\":907:995   */\n      iszero\n      tag_206\n      jumpi\n        /* \"#utility.yul\":975:993   */\n      tag_207\n      tag_36\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":907:995   */\n    tag_206:\n        /* \"#utility.yul\":1015:1025   */\n      dup1\n        /* \"#utility.yul\":1011:1013   */\n      0x40\n        /* \"#utility.yul\":1004:1026   */\n      mstore\n        /* \"#utility.yul\":794:1032   */\n      pop\n        /* \"#utility.yul\":751:1032   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1038:1167   */\n    tag_129:\n        /* \"#utility.yul\":1072:1078   */\n      0x00\n        /* \"#utility.yul\":1099:1119   */\n      tag_209\n      tag_123\n      jump\t// in\n    tag_209:\n        /* \"#utility.yul\":1089:1119   */\n      swap1\n      pop\n        /* \"#utility.yul\":1128:1161   */\n      tag_210\n        /* \"#utility.yul\":1156:1160   */\n      dup3\n        /* \"#utility.yul\":1148:1154   */\n      dup3\n        /* \"#utility.yul\":1128:1161   */\n      tag_128\n      jump\t// in\n    tag_210:\n        /* \"#utility.yul\":1038:1167   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1173:1290   */\n    tag_130:\n        /* \"#utility.yul\":1282:1283   */\n      0x00\n        /* \"#utility.yul\":1279:1280   */\n      dup1\n        /* \"#utility.yul\":1272:1284   */\n      revert\n        /* \"#utility.yul\":1296:1413   */\n    tag_131:\n        /* \"#utility.yul\":1405:1406   */\n      0x00\n        /* \"#utility.yul\":1402:1403   */\n      dup1\n        /* \"#utility.yul\":1395:1407   */\n      revert\n        /* \"#utility.yul\":1419:1745   */\n    tag_132:\n        /* \"#utility.yul\":1511:1515   */\n      0x00\n        /* \"#utility.yul\":1601:1619   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1593:1599   */\n      dup3\n        /* \"#utility.yul\":1590:1620   */\n      gt\n        /* \"#utility.yul\":1587:1643   */\n      iszero\n      tag_214\n      jumpi\n        /* \"#utility.yul\":1623:1641   */\n      tag_215\n      tag_36\n      jump\t// in\n    tag_215:\n        /* \"#utility.yul\":1587:1643   */\n    tag_214:\n        /* \"#utility.yul\":1673:1677   */\n      0x20\n        /* \"#utility.yul\":1665:1671   */\n      dup3\n        /* \"#utility.yul\":1661:1678   */\n      mul\n        /* \"#utility.yul\":1653:1678   */\n      swap1\n      pop\n        /* \"#utility.yul\":1733:1737   */\n      0x20\n        /* \"#utility.yul\":1727:1731   */\n      dup2\n        /* \"#utility.yul\":1723:1738   */\n      add\n        /* \"#utility.yul\":1715:1738   */\n      swap1\n      pop\n        /* \"#utility.yul\":1419:1745   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1751:1868   */\n    tag_133:\n        /* \"#utility.yul\":1860:1861   */\n      0x00\n        /* \"#utility.yul\":1857:1858   */\n      dup1\n        /* \"#utility.yul\":1850:1862   */\n      revert\n        /* \"#utility.yul\":1874:2000   */\n    tag_134:\n        /* \"#utility.yul\":1911:1918   */\n      0x00\n        /* \"#utility.yul\":1951:1993   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1944:1949   */\n      dup3\n        /* \"#utility.yul\":1940:1994   */\n      and\n        /* \"#utility.yul\":1929:1994   */\n      swap1\n      pop\n        /* \"#utility.yul\":1874:2000   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2006:2102   */\n    tag_135:\n        /* \"#utility.yul\":2043:2050   */\n      0x00\n        /* \"#utility.yul\":2072:2096   */\n      tag_219\n        /* \"#utility.yul\":2090:2095   */\n      dup3\n        /* \"#utility.yul\":2072:2096   */\n      tag_134\n      jump\t// in\n    tag_219:\n        /* \"#utility.yul\":2061:2096   */\n      swap1\n      pop\n        /* \"#utility.yul\":2006:2102   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2108:2219   */\n    tag_136:\n        /* \"#utility.yul\":2160:2167   */\n      0x00\n        /* \"#utility.yul\":2189:2213   */\n      tag_221\n        /* \"#utility.yul\":2207:2212   */\n      dup3\n        /* \"#utility.yul\":2189:2213   */\n      tag_135\n      jump\t// in\n    tag_221:\n        /* \"#utility.yul\":2178:2213   */\n      swap1\n      pop\n        /* \"#utility.yul\":2108:2219   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2225:2377   */\n    tag_137:\n        /* \"#utility.yul\":2313:2352   */\n      tag_223\n        /* \"#utility.yul\":2346:2351   */\n      dup2\n        /* \"#utility.yul\":2313:2352   */\n      tag_136\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":2306:2311   */\n      dup2\n        /* \"#utility.yul\":2303:2353   */\n      eq\n        /* \"#utility.yul\":2293:2371   */\n      tag_224\n      jumpi\n        /* \"#utility.yul\":2367:2368   */\n      0x00\n        /* \"#utility.yul\":2364:2365   */\n      dup1\n        /* \"#utility.yul\":2357:2369   */\n      revert\n        /* \"#utility.yul\":2293:2371   */\n    tag_224:\n        /* \"#utility.yul\":2225:2377   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2383:2552   */\n    tag_138:\n        /* \"#utility.yul\":2444:2449   */\n      0x00\n        /* \"#utility.yul\":2482:2488   */\n      dup2\n        /* \"#utility.yul\":2469:2489   */\n      calldataload\n        /* \"#utility.yul\":2460:2489   */\n      swap1\n      pop\n        /* \"#utility.yul\":2498:2546   */\n      tag_226\n        /* \"#utility.yul\":2540:2545   */\n      dup2\n        /* \"#utility.yul\":2498:2546   */\n      tag_137\n      jump\t// in\n    tag_226:\n        /* \"#utility.yul\":2383:2552   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2583:3338   */\n    tag_139:\n        /* \"#utility.yul\":2694:2699   */\n      0x00\n        /* \"#utility.yul\":2719:2815   */\n      tag_228\n        /* \"#utility.yul\":2735:2814   */\n      tag_229\n        /* \"#utility.yul\":2807:2813   */\n      dup5\n        /* \"#utility.yul\":2735:2814   */\n      tag_132\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":2719:2815   */\n      tag_129\n      jump\t// in\n    tag_228:\n        /* \"#utility.yul\":2710:2815   */\n      swap1\n      pop\n        /* \"#utility.yul\":2835:2840   */\n      dup1\n        /* \"#utility.yul\":2864:2870   */\n      dup4\n        /* \"#utility.yul\":2857:2862   */\n      dup3\n        /* \"#utility.yul\":2850:2871   */\n      mstore\n        /* \"#utility.yul\":2898:2902   */\n      0x20\n        /* \"#utility.yul\":2891:2896   */\n      dup3\n        /* \"#utility.yul\":2887:2903   */\n      add\n        /* \"#utility.yul\":2880:2903   */\n      swap1\n      pop\n        /* \"#utility.yul\":2951:2955   */\n      0x20\n        /* \"#utility.yul\":2943:2949   */\n      dup5\n        /* \"#utility.yul\":2939:2956   */\n      mul\n        /* \"#utility.yul\":2931:2937   */\n      dup4\n        /* \"#utility.yul\":2927:2957   */\n      add\n        /* \"#utility.yul\":2980:2983   */\n      dup6\n        /* \"#utility.yul\":2972:2978   */\n      dup2\n        /* \"#utility.yul\":2969:2984   */\n      gt\n        /* \"#utility.yul\":2966:3088   */\n      iszero\n      tag_230\n      jumpi\n        /* \"#utility.yul\":2999:3078   */\n      tag_231\n      tag_133\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":2966:3088   */\n    tag_230:\n        /* \"#utility.yul\":3114:3120   */\n      dup4\n        /* \"#utility.yul\":3097:3332   */\n    tag_232:\n        /* \"#utility.yul\":3131:3137   */\n      dup2\n        /* \"#utility.yul\":3126:3129   */\n      dup2\n        /* \"#utility.yul\":3123:3138   */\n      lt\n        /* \"#utility.yul\":3097:3332   */\n      iszero\n      tag_234\n      jumpi\n        /* \"#utility.yul\":3206:3209   */\n      dup1\n        /* \"#utility.yul\":3235:3287   */\n      tag_235\n        /* \"#utility.yul\":3283:3286   */\n      dup9\n        /* \"#utility.yul\":3271:3281   */\n      dup3\n        /* \"#utility.yul\":3235:3287   */\n      tag_138\n      jump\t// in\n    tag_235:\n        /* \"#utility.yul\":3230:3233   */\n      dup5\n        /* \"#utility.yul\":3223:3288   */\n      mstore\n        /* \"#utility.yul\":3317:3321   */\n      0x20\n        /* \"#utility.yul\":3312:3315   */\n      dup5\n        /* \"#utility.yul\":3308:3322   */\n      add\n        /* \"#utility.yul\":3301:3322   */\n      swap4\n      pop\n        /* \"#utility.yul\":3173:3332   */\n      pop\n        /* \"#utility.yul\":3157:3161   */\n      0x20\n        /* \"#utility.yul\":3152:3155   */\n      dup2\n        /* \"#utility.yul\":3148:3162   */\n      add\n        /* \"#utility.yul\":3141:3162   */\n      swap1\n      pop\n        /* \"#utility.yul\":3097:3332   */\n      jump(tag_232)\n    tag_234:\n        /* \"#utility.yul\":3101:3122   */\n      pop\n        /* \"#utility.yul\":2700:3338   */\n      pop\n      pop\n        /* \"#utility.yul\":2583:3338   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3369:3769   */\n    tag_140:\n        /* \"#utility.yul\":3455:3460   */\n      0x00\n        /* \"#utility.yul\":3504:3507   */\n      dup3\n        /* \"#utility.yul\":3497:3501   */\n      0x1f\n        /* \"#utility.yul\":3489:3495   */\n      dup4\n        /* \"#utility.yul\":3485:3502   */\n      add\n        /* \"#utility.yul\":3481:3508   */\n      slt\n        /* \"#utility.yul\":3471:3593   */\n      tag_237\n      jumpi\n        /* \"#utility.yul\":3512:3591   */\n      tag_238\n      tag_131\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":3471:3593   */\n    tag_237:\n        /* \"#utility.yul\":3629:3635   */\n      dup2\n        /* \"#utility.yul\":3616:3636   */\n      calldataload\n        /* \"#utility.yul\":3654:3763   */\n      tag_239\n        /* \"#utility.yul\":3759:3762   */\n      dup5\n        /* \"#utility.yul\":3751:3757   */\n      dup3\n        /* \"#utility.yul\":3744:3748   */\n      0x20\n        /* \"#utility.yul\":3736:3742   */\n      dup7\n        /* \"#utility.yul\":3732:3749   */\n      add\n        /* \"#utility.yul\":3654:3763   */\n      tag_139\n      jump\t// in\n    tag_239:\n        /* \"#utility.yul\":3645:3763   */\n      swap2\n      pop\n        /* \"#utility.yul\":3461:3769   */\n      pop\n        /* \"#utility.yul\":3369:3769   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3775:3852   */\n    tag_141:\n        /* \"#utility.yul\":3812:3819   */\n      0x00\n        /* \"#utility.yul\":3841:3846   */\n      dup2\n        /* \"#utility.yul\":3830:3846   */\n      swap1\n      pop\n        /* \"#utility.yul\":3775:3852   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3858:3980   */\n    tag_142:\n        /* \"#utility.yul\":3931:3955   */\n      tag_242\n        /* \"#utility.yul\":3949:3954   */\n      dup2\n        /* \"#utility.yul\":3931:3955   */\n      tag_141\n      jump\t// in\n    tag_242:\n        /* \"#utility.yul\":3924:3929   */\n      dup2\n        /* \"#utility.yul\":3921:3956   */\n      eq\n        /* \"#utility.yul\":3911:3974   */\n      tag_243\n      jumpi\n        /* \"#utility.yul\":3970:3971   */\n      0x00\n        /* \"#utility.yul\":3967:3968   */\n      dup1\n        /* \"#utility.yul\":3960:3972   */\n      revert\n        /* \"#utility.yul\":3911:3974   */\n    tag_243:\n        /* \"#utility.yul\":3858:3980   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3986:4125   */\n    tag_143:\n        /* \"#utility.yul\":4032:4037   */\n      0x00\n        /* \"#utility.yul\":4070:4076   */\n      dup2\n        /* \"#utility.yul\":4057:4077   */\n      calldataload\n        /* \"#utility.yul\":4048:4077   */\n      swap1\n      pop\n        /* \"#utility.yul\":4086:4119   */\n      tag_245\n        /* \"#utility.yul\":4113:4118   */\n      dup2\n        /* \"#utility.yul\":4086:4119   */\n      tag_142\n      jump\t// in\n    tag_245:\n        /* \"#utility.yul\":3986:4125   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4131:4208   */\n    tag_144:\n        /* \"#utility.yul\":4168:4175   */\n      0x00\n        /* \"#utility.yul\":4197:4202   */\n      dup2\n        /* \"#utility.yul\":4186:4202   */\n      swap1\n      pop\n        /* \"#utility.yul\":4131:4208   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4214:4336   */\n    tag_145:\n        /* \"#utility.yul\":4287:4311   */\n      tag_248\n        /* \"#utility.yul\":4305:4310   */\n      dup2\n        /* \"#utility.yul\":4287:4311   */\n      tag_144\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":4280:4285   */\n      dup2\n        /* \"#utility.yul\":4277:4312   */\n      eq\n        /* \"#utility.yul\":4267:4330   */\n      tag_249\n      jumpi\n        /* \"#utility.yul\":4326:4327   */\n      0x00\n        /* \"#utility.yul\":4323:4324   */\n      dup1\n        /* \"#utility.yul\":4316:4328   */\n      revert\n        /* \"#utility.yul\":4267:4330   */\n    tag_249:\n        /* \"#utility.yul\":4214:4336   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4342:4481   */\n    tag_146:\n        /* \"#utility.yul\":4388:4393   */\n      0x00\n        /* \"#utility.yul\":4426:4432   */\n      dup2\n        /* \"#utility.yul\":4413:4433   */\n      calldataload\n        /* \"#utility.yul\":4404:4433   */\n      swap1\n      pop\n        /* \"#utility.yul\":4442:4475   */\n      tag_251\n        /* \"#utility.yul\":4469:4474   */\n      dup2\n        /* \"#utility.yul\":4442:4475   */\n      tag_145\n      jump\t// in\n    tag_251:\n        /* \"#utility.yul\":4342:4481   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4487:4609   */\n    tag_147:\n        /* \"#utility.yul\":4560:4584   */\n      tag_253\n        /* \"#utility.yul\":4578:4583   */\n      dup2\n        /* \"#utility.yul\":4560:4584   */\n      tag_135\n      jump\t// in\n    tag_253:\n        /* \"#utility.yul\":4553:4558   */\n      dup2\n        /* \"#utility.yul\":4550:4585   */\n      eq\n        /* \"#utility.yul\":4540:4603   */\n      tag_254\n      jumpi\n        /* \"#utility.yul\":4599:4600   */\n      0x00\n        /* \"#utility.yul\":4596:4597   */\n      dup1\n        /* \"#utility.yul\":4589:4601   */\n      revert\n        /* \"#utility.yul\":4540:4603   */\n    tag_254:\n        /* \"#utility.yul\":4487:4609   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4615:4754   */\n    tag_148:\n        /* \"#utility.yul\":4661:4666   */\n      0x00\n        /* \"#utility.yul\":4699:4705   */\n      dup2\n        /* \"#utility.yul\":4686:4706   */\n      calldataload\n        /* \"#utility.yul\":4677:4706   */\n      swap1\n      pop\n        /* \"#utility.yul\":4715:4748   */\n      tag_256\n        /* \"#utility.yul\":4742:4747   */\n      dup2\n        /* \"#utility.yul\":4715:4748   */\n      tag_147\n      jump\t// in\n    tag_256:\n        /* \"#utility.yul\":4615:4754   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4803:6265   */\n    tag_149:\n        /* \"#utility.yul\":4883:4888   */\n      0x00\n        /* \"#utility.yul\":4927:4931   */\n      0xc0\n        /* \"#utility.yul\":4915:4924   */\n      dup3\n        /* \"#utility.yul\":4910:4913   */\n      dup5\n        /* \"#utility.yul\":4906:4925   */\n      sub\n        /* \"#utility.yul\":4902:4932   */\n      slt\n        /* \"#utility.yul\":4899:5016   */\n      iszero\n      tag_258\n      jumpi\n        /* \"#utility.yul\":4935:5014   */\n      tag_259\n      tag_126\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":4899:5016   */\n    tag_258:\n        /* \"#utility.yul\":5034:5055   */\n      tag_260\n        /* \"#utility.yul\":5050:5054   */\n      0xc0\n        /* \"#utility.yul\":5034:5055   */\n      tag_129\n      jump\t// in\n    tag_260:\n        /* \"#utility.yul\":5025:5055   */\n      swap1\n      pop\n        /* \"#utility.yul\":5149:5150   */\n      0x00\n        /* \"#utility.yul\":5138:5147   */\n      dup3\n        /* \"#utility.yul\":5134:5151   */\n      add\n        /* \"#utility.yul\":5121:5152   */\n      calldataload\n        /* \"#utility.yul\":5179:5197   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5171:5177   */\n      dup2\n        /* \"#utility.yul\":5168:5198   */\n      gt\n        /* \"#utility.yul\":5165:5282   */\n      iszero\n      tag_261\n      jumpi\n        /* \"#utility.yul\":5201:5280   */\n      tag_262\n      tag_130\n      jump\t// in\n    tag_262:\n        /* \"#utility.yul\":5165:5282   */\n    tag_261:\n        /* \"#utility.yul\":5321:5410   */\n      tag_263\n        /* \"#utility.yul\":5406:5409   */\n      dup5\n        /* \"#utility.yul\":5397:5403   */\n      dup3\n        /* \"#utility.yul\":5386:5395   */\n      dup6\n        /* \"#utility.yul\":5382:5404   */\n      add\n        /* \"#utility.yul\":5321:5410   */\n      tag_140\n      jump\t// in\n    tag_263:\n        /* \"#utility.yul\":5314:5318   */\n      0x00\n        /* \"#utility.yul\":5307:5312   */\n      dup4\n        /* \"#utility.yul\":5303:5319   */\n      add\n        /* \"#utility.yul\":5296:5411   */\n      mstore\n        /* \"#utility.yul\":5065:5422   */\n      pop\n        /* \"#utility.yul\":5494:5496   */\n      0x20\n        /* \"#utility.yul\":5535:5584   */\n      tag_264\n        /* \"#utility.yul\":5580:5583   */\n      dup5\n        /* \"#utility.yul\":5571:5577   */\n      dup3\n        /* \"#utility.yul\":5560:5569   */\n      dup6\n        /* \"#utility.yul\":5556:5578   */\n      add\n        /* \"#utility.yul\":5535:5584   */\n      tag_143\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":5528:5532   */\n      0x20\n        /* \"#utility.yul\":5521:5526   */\n      dup4\n        /* \"#utility.yul\":5517:5533   */\n      add\n        /* \"#utility.yul\":5510:5585   */\n      mstore\n        /* \"#utility.yul\":5432:5596   */\n      pop\n        /* \"#utility.yul\":5662:5664   */\n      0x40\n        /* \"#utility.yul\":5703:5752   */\n      tag_265\n        /* \"#utility.yul\":5748:5751   */\n      dup5\n        /* \"#utility.yul\":5739:5745   */\n      dup3\n        /* \"#utility.yul\":5728:5737   */\n      dup6\n        /* \"#utility.yul\":5724:5746   */\n      add\n        /* \"#utility.yul\":5703:5752   */\n      tag_146\n      jump\t// in\n    tag_265:\n        /* \"#utility.yul\":5696:5700   */\n      0x40\n        /* \"#utility.yul\":5689:5694   */\n      dup4\n        /* \"#utility.yul\":5685:5701   */\n      add\n        /* \"#utility.yul\":5678:5753   */\n      mstore\n        /* \"#utility.yul\":5606:5764   */\n      pop\n        /* \"#utility.yul\":5826:5828   */\n      0x60\n        /* \"#utility.yul\":5867:5916   */\n      tag_266\n        /* \"#utility.yul\":5912:5915   */\n      dup5\n        /* \"#utility.yul\":5903:5909   */\n      dup3\n        /* \"#utility.yul\":5892:5901   */\n      dup6\n        /* \"#utility.yul\":5888:5910   */\n      add\n        /* \"#utility.yul\":5867:5916   */\n      tag_148\n      jump\t// in\n    tag_266:\n        /* \"#utility.yul\":5860:5864   */\n      0x60\n        /* \"#utility.yul\":5853:5858   */\n      dup4\n        /* \"#utility.yul\":5849:5865   */\n      add\n        /* \"#utility.yul\":5842:5917   */\n      mstore\n        /* \"#utility.yul\":5774:5928   */\n      pop\n        /* \"#utility.yul\":5988:5991   */\n      0x80\n        /* \"#utility.yul\":6030:6079   */\n      tag_267\n        /* \"#utility.yul\":6075:6078   */\n      dup5\n        /* \"#utility.yul\":6066:6072   */\n      dup3\n        /* \"#utility.yul\":6055:6064   */\n      dup6\n        /* \"#utility.yul\":6051:6073   */\n      add\n        /* \"#utility.yul\":6030:6079   */\n      tag_148\n      jump\t// in\n    tag_267:\n        /* \"#utility.yul\":6023:6027   */\n      0x80\n        /* \"#utility.yul\":6016:6021   */\n      dup4\n        /* \"#utility.yul\":6012:6028   */\n      add\n        /* \"#utility.yul\":6005:6080   */\n      mstore\n        /* \"#utility.yul\":5938:6091   */\n      pop\n        /* \"#utility.yul\":6155:6158   */\n      0xa0\n        /* \"#utility.yul\":6197:6246   */\n      tag_268\n        /* \"#utility.yul\":6242:6245   */\n      dup5\n        /* \"#utility.yul\":6233:6239   */\n      dup3\n        /* \"#utility.yul\":6222:6231   */\n      dup6\n        /* \"#utility.yul\":6218:6240   */\n      add\n        /* \"#utility.yul\":6197:6246   */\n      tag_148\n      jump\t// in\n    tag_268:\n        /* \"#utility.yul\":6190:6194   */\n      0xa0\n        /* \"#utility.yul\":6183:6188   */\n      dup4\n        /* \"#utility.yul\":6179:6195   */\n      add\n        /* \"#utility.yul\":6172:6247   */\n      mstore\n        /* \"#utility.yul\":6101:6258   */\n      pop\n        /* \"#utility.yul\":4803:6265   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6271:6967   */\n    tag_8:\n        /* \"#utility.yul\":6370:6376   */\n      0x00\n        /* \"#utility.yul\":6378:6384   */\n      dup1\n        /* \"#utility.yul\":6427:6429   */\n      0x40\n        /* \"#utility.yul\":6415:6424   */\n      dup4\n        /* \"#utility.yul\":6406:6413   */\n      dup6\n        /* \"#utility.yul\":6402:6425   */\n      sub\n        /* \"#utility.yul\":6398:6430   */\n      slt\n        /* \"#utility.yul\":6395:6514   */\n      iszero\n      tag_270\n      jumpi\n        /* \"#utility.yul\":6433:6512   */\n      tag_271\n      tag_124\n      jump\t// in\n    tag_271:\n        /* \"#utility.yul\":6395:6514   */\n    tag_270:\n        /* \"#utility.yul\":6581:6582   */\n      0x00\n        /* \"#utility.yul\":6570:6579   */\n      dup4\n        /* \"#utility.yul\":6566:6583   */\n      add\n        /* \"#utility.yul\":6553:6584   */\n      calldataload\n        /* \"#utility.yul\":6611:6629   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":6603:6609   */\n      dup2\n        /* \"#utility.yul\":6600:6630   */\n      gt\n        /* \"#utility.yul\":6597:6714   */\n      iszero\n      tag_272\n      jumpi\n        /* \"#utility.yul\":6633:6712   */\n      tag_273\n      tag_125\n      jump\t// in\n    tag_273:\n        /* \"#utility.yul\":6597:6714   */\n    tag_272:\n        /* \"#utility.yul\":6738:6822   */\n      tag_274\n        /* \"#utility.yul\":6814:6821   */\n      dup6\n        /* \"#utility.yul\":6805:6811   */\n      dup3\n        /* \"#utility.yul\":6794:6803   */\n      dup7\n        /* \"#utility.yul\":6790:6812   */\n      add\n        /* \"#utility.yul\":6738:6822   */\n      tag_149\n      jump\t// in\n    tag_274:\n        /* \"#utility.yul\":6728:6822   */\n      swap3\n      pop\n        /* \"#utility.yul\":6524:6832   */\n      pop\n        /* \"#utility.yul\":6871:6873   */\n      0x20\n        /* \"#utility.yul\":6897:6950   */\n      tag_275\n        /* \"#utility.yul\":6942:6949   */\n      dup6\n        /* \"#utility.yul\":6933:6939   */\n      dup3\n        /* \"#utility.yul\":6922:6931   */\n      dup7\n        /* \"#utility.yul\":6918:6940   */\n      add\n        /* \"#utility.yul\":6897:6950   */\n      tag_143\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":6887:6950   */\n      swap2\n      pop\n        /* \"#utility.yul\":6842:6960   */\n      pop\n        /* \"#utility.yul\":6271:6967   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6973:7091   */\n    tag_150:\n        /* \"#utility.yul\":7060:7084   */\n      tag_277\n        /* \"#utility.yul\":7078:7083   */\n      dup2\n        /* \"#utility.yul\":7060:7084   */\n      tag_135\n      jump\t// in\n    tag_277:\n        /* \"#utility.yul\":7055:7058   */\n      dup3\n        /* \"#utility.yul\":7048:7085   */\n      mstore\n        /* \"#utility.yul\":6973:7091   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7097:7319   */\n    tag_13:\n        /* \"#utility.yul\":7190:7194   */\n      0x00\n        /* \"#utility.yul\":7228:7230   */\n      0x20\n        /* \"#utility.yul\":7217:7226   */\n      dup3\n        /* \"#utility.yul\":7213:7231   */\n      add\n        /* \"#utility.yul\":7205:7231   */\n      swap1\n      pop\n        /* \"#utility.yul\":7241:7312   */\n      tag_279\n        /* \"#utility.yul\":7309:7310   */\n      0x00\n        /* \"#utility.yul\":7298:7307   */\n      dup4\n        /* \"#utility.yul\":7294:7311   */\n      add\n        /* \"#utility.yul\":7285:7291   */\n      dup5\n        /* \"#utility.yul\":7241:7312   */\n      tag_150\n      jump\t// in\n    tag_279:\n        /* \"#utility.yul\":7097:7319   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7325:7505   */\n    tag_21:\n        /* \"#utility.yul\":7373:7450   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":7370:7371   */\n      0x00\n        /* \"#utility.yul\":7363:7451   */\n      mstore\n        /* \"#utility.yul\":7470:7474   */\n      0x32\n        /* \"#utility.yul\":7467:7468   */\n      0x04\n        /* \"#utility.yul\":7460:7475   */\n      mstore\n        /* \"#utility.yul\":7494:7498   */\n      0x24\n        /* \"#utility.yul\":7491:7492   */\n      0x00\n        /* \"#utility.yul\":7484:7499   */\n      revert\n        /* \"#utility.yul\":7511:7629   */\n    tag_151:\n        /* \"#utility.yul\":7598:7622   */\n      tag_282\n        /* \"#utility.yul\":7616:7621   */\n      dup2\n        /* \"#utility.yul\":7598:7622   */\n      tag_141\n      jump\t// in\n    tag_282:\n        /* \"#utility.yul\":7593:7596   */\n      dup3\n        /* \"#utility.yul\":7586:7623   */\n      mstore\n        /* \"#utility.yul\":7511:7629   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7635:8077   */\n    tag_31:\n        /* \"#utility.yul\":7784:7788   */\n      0x00\n        /* \"#utility.yul\":7822:7824   */\n      0x60\n        /* \"#utility.yul\":7811:7820   */\n      dup3\n        /* \"#utility.yul\":7807:7825   */\n      add\n        /* \"#utility.yul\":7799:7825   */\n      swap1\n      pop\n        /* \"#utility.yul\":7835:7906   */\n      tag_284\n        /* \"#utility.yul\":7903:7904   */\n      0x00\n        /* \"#utility.yul\":7892:7901   */\n      dup4\n        /* \"#utility.yul\":7888:7905   */\n      add\n        /* \"#utility.yul\":7879:7885   */\n      dup7\n        /* \"#utility.yul\":7835:7906   */\n      tag_150\n      jump\t// in\n    tag_284:\n        /* \"#utility.yul\":7916:7988   */\n      tag_285\n        /* \"#utility.yul\":7984:7986   */\n      0x20\n        /* \"#utility.yul\":7973:7982   */\n      dup4\n        /* \"#utility.yul\":7969:7987   */\n      add\n        /* \"#utility.yul\":7960:7966   */\n      dup6\n        /* \"#utility.yul\":7916:7988   */\n      tag_150\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":7998:8070   */\n      tag_286\n        /* \"#utility.yul\":8066:8068   */\n      0x40\n        /* \"#utility.yul\":8055:8064   */\n      dup4\n        /* \"#utility.yul\":8051:8069   */\n      add\n        /* \"#utility.yul\":8042:8048   */\n      dup5\n        /* \"#utility.yul\":7998:8070   */\n      tag_151\n      jump\t// in\n    tag_286:\n        /* \"#utility.yul\":7635:8077   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8083:8169   */\n    tag_152:\n        /* \"#utility.yul\":8118:8125   */\n      0x00\n        /* \"#utility.yul\":8158:8162   */\n      0xff\n        /* \"#utility.yul\":8151:8156   */\n      dup3\n        /* \"#utility.yul\":8147:8163   */\n      and\n        /* \"#utility.yul\":8136:8163   */\n      swap1\n      pop\n        /* \"#utility.yul\":8083:8169   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8175:8287   */\n    tag_153:\n        /* \"#utility.yul\":8258:8280   */\n      tag_289\n        /* \"#utility.yul\":8274:8279   */\n      dup2\n        /* \"#utility.yul\":8258:8280   */\n      tag_152\n      jump\t// in\n    tag_289:\n        /* \"#utility.yul\":8253:8256   */\n      dup3\n        /* \"#utility.yul\":8246:8281   */\n      mstore\n        /* \"#utility.yul\":8175:8287   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8293:8407   */\n    tag_154:\n        /* \"#utility.yul\":8360:8366   */\n      0x00\n        /* \"#utility.yul\":8394:8399   */\n      dup2\n        /* \"#utility.yul\":8388:8400   */\n      mload\n        /* \"#utility.yul\":8378:8400   */\n      swap1\n      pop\n        /* \"#utility.yul\":8293:8407   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8413:8597   */\n    tag_155:\n        /* \"#utility.yul\":8512:8523   */\n      0x00\n        /* \"#utility.yul\":8546:8552   */\n      dup3\n        /* \"#utility.yul\":8541:8544   */\n      dup3\n        /* \"#utility.yul\":8534:8553   */\n      mstore\n        /* \"#utility.yul\":8586:8590   */\n      0x20\n        /* \"#utility.yul\":8581:8584   */\n      dup3\n        /* \"#utility.yul\":8577:8591   */\n      add\n        /* \"#utility.yul\":8562:8591   */\n      swap1\n      pop\n        /* \"#utility.yul\":8413:8597   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8603:8735   */\n    tag_156:\n        /* \"#utility.yul\":8670:8674   */\n      0x00\n        /* \"#utility.yul\":8693:8696   */\n      dup2\n        /* \"#utility.yul\":8685:8696   */\n      swap1\n      pop\n        /* \"#utility.yul\":8723:8727   */\n      0x20\n        /* \"#utility.yul\":8718:8721   */\n      dup3\n        /* \"#utility.yul\":8714:8728   */\n      add\n        /* \"#utility.yul\":8706:8728   */\n      swap1\n      pop\n        /* \"#utility.yul\":8603:8735   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8741:8849   */\n    tag_157:\n        /* \"#utility.yul\":8818:8842   */\n      tag_294\n        /* \"#utility.yul\":8836:8841   */\n      dup2\n        /* \"#utility.yul\":8818:8842   */\n      tag_141\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":8813:8816   */\n      dup3\n        /* \"#utility.yul\":8806:8843   */\n      mstore\n        /* \"#utility.yul\":8741:8849   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8855:9034   */\n    tag_158:\n        /* \"#utility.yul\":8924:8934   */\n      0x00\n        /* \"#utility.yul\":8945:8991   */\n      tag_296\n        /* \"#utility.yul\":8987:8990   */\n      dup4\n        /* \"#utility.yul\":8979:8985   */\n      dup4\n        /* \"#utility.yul\":8945:8991   */\n      tag_157\n      jump\t// in\n    tag_296:\n        /* \"#utility.yul\":9023:9027   */\n      0x20\n        /* \"#utility.yul\":9018:9021   */\n      dup4\n        /* \"#utility.yul\":9014:9028   */\n      add\n        /* \"#utility.yul\":9000:9028   */\n      swap1\n      pop\n        /* \"#utility.yul\":8855:9034   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9040:9153   */\n    tag_159:\n        /* \"#utility.yul\":9110:9114   */\n      0x00\n        /* \"#utility.yul\":9142:9146   */\n      0x20\n        /* \"#utility.yul\":9137:9140   */\n      dup3\n        /* \"#utility.yul\":9133:9147   */\n      add\n        /* \"#utility.yul\":9125:9147   */\n      swap1\n      pop\n        /* \"#utility.yul\":9040:9153   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9189:9921   */\n    tag_160:\n        /* \"#utility.yul\":9308:9311   */\n      0x00\n        /* \"#utility.yul\":9337:9391   */\n      tag_299\n        /* \"#utility.yul\":9385:9390   */\n      dup3\n        /* \"#utility.yul\":9337:9391   */\n      tag_154\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":9407:9493   */\n      tag_300\n        /* \"#utility.yul\":9486:9492   */\n      dup2\n        /* \"#utility.yul\":9481:9484   */\n      dup6\n        /* \"#utility.yul\":9407:9493   */\n      tag_155\n      jump\t// in\n    tag_300:\n        /* \"#utility.yul\":9400:9493   */\n      swap4\n      pop\n        /* \"#utility.yul\":9517:9573   */\n      tag_301\n        /* \"#utility.yul\":9567:9572   */\n      dup4\n        /* \"#utility.yul\":9517:9573   */\n      tag_156\n      jump\t// in\n    tag_301:\n        /* \"#utility.yul\":9596:9603   */\n      dup1\n        /* \"#utility.yul\":9627:9628   */\n      0x00\n        /* \"#utility.yul\":9612:9896   */\n    tag_302:\n        /* \"#utility.yul\":9637:9643   */\n      dup4\n        /* \"#utility.yul\":9634:9635   */\n      dup2\n        /* \"#utility.yul\":9631:9644   */\n      lt\n        /* \"#utility.yul\":9612:9896   */\n      iszero\n      tag_304\n      jumpi\n        /* \"#utility.yul\":9713:9719   */\n      dup2\n        /* \"#utility.yul\":9707:9720   */\n      mload\n        /* \"#utility.yul\":9740:9803   */\n      tag_305\n        /* \"#utility.yul\":9799:9802   */\n      dup9\n        /* \"#utility.yul\":9784:9797   */\n      dup3\n        /* \"#utility.yul\":9740:9803   */\n      tag_158\n      jump\t// in\n    tag_305:\n        /* \"#utility.yul\":9733:9803   */\n      swap8\n      pop\n        /* \"#utility.yul\":9826:9886   */\n      tag_306\n        /* \"#utility.yul\":9879:9885   */\n      dup4\n        /* \"#utility.yul\":9826:9886   */\n      tag_159\n      jump\t// in\n    tag_306:\n        /* \"#utility.yul\":9816:9886   */\n      swap3\n      pop\n        /* \"#utility.yul\":9672:9896   */\n      pop\n        /* \"#utility.yul\":9659:9660   */\n      0x01\n        /* \"#utility.yul\":9656:9657   */\n      dup2\n        /* \"#utility.yul\":9652:9661   */\n      add\n        /* \"#utility.yul\":9647:9661   */\n      swap1\n      pop\n        /* \"#utility.yul\":9612:9896   */\n      jump(tag_302)\n    tag_304:\n        /* \"#utility.yul\":9616:9630   */\n      pop\n        /* \"#utility.yul\":9912:9915   */\n      dup6\n        /* \"#utility.yul\":9905:9915   */\n      swap4\n      pop\n        /* \"#utility.yul\":9313:9921   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":9189:9921   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9927:10512   */\n    tag_41:\n        /* \"#utility.yul\":10122:10126   */\n      0x00\n        /* \"#utility.yul\":10160:10162   */\n      0x60\n        /* \"#utility.yul\":10149:10158   */\n      dup3\n        /* \"#utility.yul\":10145:10163   */\n      add\n        /* \"#utility.yul\":10137:10163   */\n      swap1\n      pop\n        /* \"#utility.yul\":10173:10240   */\n      tag_308\n        /* \"#utility.yul\":10237:10238   */\n      0x00\n        /* \"#utility.yul\":10226:10235   */\n      dup4\n        /* \"#utility.yul\":10222:10239   */\n      add\n        /* \"#utility.yul\":10213:10219   */\n      dup7\n        /* \"#utility.yul\":10173:10240   */\n      tag_153\n      jump\t// in\n    tag_308:\n        /* \"#utility.yul\":10287:10296   */\n      dup2\n        /* \"#utility.yul\":10281:10285   */\n      dup2\n        /* \"#utility.yul\":10277:10297   */\n      sub\n        /* \"#utility.yul\":10272:10274   */\n      0x20\n        /* \"#utility.yul\":10261:10270   */\n      dup4\n        /* \"#utility.yul\":10257:10275   */\n      add\n        /* \"#utility.yul\":10250:10298   */\n      mstore\n        /* \"#utility.yul\":10315:10423   */\n      tag_309\n        /* \"#utility.yul\":10418:10422   */\n      dup2\n        /* \"#utility.yul\":10409:10415   */\n      dup6\n        /* \"#utility.yul\":10315:10423   */\n      tag_160\n      jump\t// in\n    tag_309:\n        /* \"#utility.yul\":10307:10423   */\n      swap1\n      pop\n        /* \"#utility.yul\":10433:10505   */\n      tag_310\n        /* \"#utility.yul\":10501:10503   */\n      0x40\n        /* \"#utility.yul\":10490:10499   */\n      dup4\n        /* \"#utility.yul\":10486:10504   */\n      add\n        /* \"#utility.yul\":10477:10483   */\n      dup5\n        /* \"#utility.yul\":10433:10505   */\n      tag_151\n      jump\t// in\n    tag_310:\n        /* \"#utility.yul\":9927:10512   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10518:10636   */\n    tag_161:\n        /* \"#utility.yul\":10605:10629   */\n      tag_312\n        /* \"#utility.yul\":10623:10628   */\n      dup2\n        /* \"#utility.yul\":10605:10629   */\n      tag_144\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":10600:10603   */\n      dup3\n        /* \"#utility.yul\":10593:10630   */\n      mstore\n        /* \"#utility.yul\":10518:10636   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10642:10771   */\n    tag_162:\n        /* \"#utility.yul\":10724:10730   */\n      0x00\n        /* \"#utility.yul\":10758:10763   */\n      dup2\n        /* \"#utility.yul\":10752:10764   */\n      mload\n        /* \"#utility.yul\":10742:10764   */\n      swap1\n      pop\n        /* \"#utility.yul\":10642:10771   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10777:10951   */\n    tag_163:\n        /* \"#utility.yul\":10866:10877   */\n      0x00\n        /* \"#utility.yul\":10900:10906   */\n      dup3\n        /* \"#utility.yul\":10895:10898   */\n      dup3\n        /* \"#utility.yul\":10888:10907   */\n      mstore\n        /* \"#utility.yul\":10940:10944   */\n      0x20\n        /* \"#utility.yul\":10935:10938   */\n      dup3\n        /* \"#utility.yul\":10931:10945   */\n      add\n        /* \"#utility.yul\":10916:10945   */\n      swap1\n      pop\n        /* \"#utility.yul\":10777:10951   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10957:11104   */\n    tag_164:\n        /* \"#utility.yul\":11039:11043   */\n      0x00\n        /* \"#utility.yul\":11062:11065   */\n      dup2\n        /* \"#utility.yul\":11054:11065   */\n      swap1\n      pop\n        /* \"#utility.yul\":11092:11096   */\n      0x20\n        /* \"#utility.yul\":11087:11090   */\n      dup3\n        /* \"#utility.yul\":11083:11097   */\n      add\n        /* \"#utility.yul\":11075:11097   */\n      swap1\n      pop\n        /* \"#utility.yul\":10957:11104   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11110:11170   */\n    tag_165:\n        /* \"#utility.yul\":11138:11141   */\n      0x00\n        /* \"#utility.yul\":11159:11164   */\n      dup2\n        /* \"#utility.yul\":11152:11164   */\n      swap1\n      pop\n        /* \"#utility.yul\":11110:11170   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11176:11318   */\n    tag_166:\n        /* \"#utility.yul\":11226:11235   */\n      0x00\n        /* \"#utility.yul\":11259:11312   */\n      tag_318\n        /* \"#utility.yul\":11277:11311   */\n      tag_319\n        /* \"#utility.yul\":11286:11310   */\n      tag_320\n        /* \"#utility.yul\":11304:11309   */\n      dup5\n        /* \"#utility.yul\":11286:11310   */\n      tag_134\n      jump\t// in\n    tag_320:\n        /* \"#utility.yul\":11277:11311   */\n      tag_165\n      jump\t// in\n    tag_319:\n        /* \"#utility.yul\":11259:11312   */\n      tag_134\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":11246:11312   */\n      swap1\n      pop\n        /* \"#utility.yul\":11176:11318   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11324:11450   */\n    tag_167:\n        /* \"#utility.yul\":11374:11383   */\n      0x00\n        /* \"#utility.yul\":11407:11444   */\n      tag_322\n        /* \"#utility.yul\":11438:11443   */\n      dup3\n        /* \"#utility.yul\":11407:11444   */\n      tag_166\n      jump\t// in\n    tag_322:\n        /* \"#utility.yul\":11394:11444   */\n      swap1\n      pop\n        /* \"#utility.yul\":11324:11450   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11456:11597   */\n    tag_168:\n        /* \"#utility.yul\":11521:11530   */\n      0x00\n        /* \"#utility.yul\":11554:11591   */\n      tag_324\n        /* \"#utility.yul\":11585:11590   */\n      dup3\n        /* \"#utility.yul\":11554:11591   */\n      tag_167\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":11541:11591   */\n      swap1\n      pop\n        /* \"#utility.yul\":11456:11597   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11603:11754   */\n    tag_169:\n        /* \"#utility.yul\":11695:11747   */\n      tag_326\n        /* \"#utility.yul\":11741:11746   */\n      dup2\n        /* \"#utility.yul\":11695:11747   */\n      tag_168\n      jump\t// in\n    tag_326:\n        /* \"#utility.yul\":11690:11693   */\n      dup3\n        /* \"#utility.yul\":11683:11748   */\n      mstore\n        /* \"#utility.yul\":11603:11754   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11760:11969   */\n    tag_170:\n        /* \"#utility.yul\":11844:11854   */\n      0x00\n        /* \"#utility.yul\":11865:11926   */\n      tag_328\n        /* \"#utility.yul\":11922:11925   */\n      dup4\n        /* \"#utility.yul\":11914:11920   */\n      dup4\n        /* \"#utility.yul\":11865:11926   */\n      tag_169\n      jump\t// in\n    tag_328:\n        /* \"#utility.yul\":11958:11962   */\n      0x20\n        /* \"#utility.yul\":11953:11956   */\n      dup4\n        /* \"#utility.yul\":11949:11963   */\n      add\n        /* \"#utility.yul\":11935:11963   */\n      swap1\n      pop\n        /* \"#utility.yul\":11760:11969   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11975:12103   */\n    tag_171:\n        /* \"#utility.yul\":12060:12064   */\n      0x00\n        /* \"#utility.yul\":12092:12096   */\n      0x20\n        /* \"#utility.yul\":12087:12090   */\n      dup3\n        /* \"#utility.yul\":12083:12097   */\n      add\n        /* \"#utility.yul\":12075:12097   */\n      swap1\n      pop\n        /* \"#utility.yul\":11975:12103   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12147:12934   */\n    tag_172:\n        /* \"#utility.yul\":12271:12274   */\n      0x00\n        /* \"#utility.yul\":12300:12369   */\n      tag_331\n        /* \"#utility.yul\":12363:12368   */\n      dup3\n        /* \"#utility.yul\":12300:12369   */\n      tag_162\n      jump\t// in\n    tag_331:\n        /* \"#utility.yul\":12385:12461   */\n      tag_332\n        /* \"#utility.yul\":12454:12460   */\n      dup2\n        /* \"#utility.yul\":12449:12452   */\n      dup6\n        /* \"#utility.yul\":12385:12461   */\n      tag_163\n      jump\t// in\n    tag_332:\n        /* \"#utility.yul\":12378:12461   */\n      swap4\n      pop\n        /* \"#utility.yul\":12485:12556   */\n      tag_333\n        /* \"#utility.yul\":12550:12555   */\n      dup4\n        /* \"#utility.yul\":12485:12556   */\n      tag_164\n      jump\t// in\n    tag_333:\n        /* \"#utility.yul\":12579:12586   */\n      dup1\n        /* \"#utility.yul\":12610:12611   */\n      0x00\n        /* \"#utility.yul\":12595:12909   */\n    tag_334:\n        /* \"#utility.yul\":12620:12626   */\n      dup4\n        /* \"#utility.yul\":12617:12618   */\n      dup2\n        /* \"#utility.yul\":12614:12627   */\n      lt\n        /* \"#utility.yul\":12595:12909   */\n      iszero\n      tag_336\n      jumpi\n        /* \"#utility.yul\":12696:12702   */\n      dup2\n        /* \"#utility.yul\":12690:12703   */\n      mload\n        /* \"#utility.yul\":12723:12801   */\n      tag_337\n        /* \"#utility.yul\":12797:12800   */\n      dup9\n        /* \"#utility.yul\":12782:12795   */\n      dup3\n        /* \"#utility.yul\":12723:12801   */\n      tag_170\n      jump\t// in\n    tag_337:\n        /* \"#utility.yul\":12716:12801   */\n      swap8\n      pop\n        /* \"#utility.yul\":12824:12899   */\n      tag_338\n        /* \"#utility.yul\":12892:12898   */\n      dup4\n        /* \"#utility.yul\":12824:12899   */\n      tag_171\n      jump\t// in\n    tag_338:\n        /* \"#utility.yul\":12814:12899   */\n      swap3\n      pop\n        /* \"#utility.yul\":12655:12909   */\n      pop\n        /* \"#utility.yul\":12642:12643   */\n      0x01\n        /* \"#utility.yul\":12639:12640   */\n      dup2\n        /* \"#utility.yul\":12635:12644   */\n      add\n        /* \"#utility.yul\":12630:12644   */\n      swap1\n      pop\n        /* \"#utility.yul\":12595:12909   */\n      jump(tag_334)\n    tag_336:\n        /* \"#utility.yul\":12599:12613   */\n      pop\n        /* \"#utility.yul\":12925:12928   */\n      dup6\n        /* \"#utility.yul\":12918:12928   */\n      swap4\n      pop\n        /* \"#utility.yul\":12276:12934   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":12147:12934   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12940:13114   */\n    tag_173:\n        /* \"#utility.yul\":13029:13040   */\n      0x00\n        /* \"#utility.yul\":13063:13069   */\n      dup3\n        /* \"#utility.yul\":13058:13061   */\n      dup3\n        /* \"#utility.yul\":13051:13070   */\n      mstore\n        /* \"#utility.yul\":13103:13107   */\n      0x20\n        /* \"#utility.yul\":13098:13101   */\n      dup3\n        /* \"#utility.yul\":13094:13108   */\n      add\n        /* \"#utility.yul\":13079:13108   */\n      swap1\n      pop\n        /* \"#utility.yul\":12940:13114   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13150:13862   */\n    tag_174:\n        /* \"#utility.yul\":13259:13262   */\n      0x00\n        /* \"#utility.yul\":13288:13342   */\n      tag_341\n        /* \"#utility.yul\":13336:13341   */\n      dup3\n        /* \"#utility.yul\":13288:13342   */\n      tag_154\n      jump\t// in\n    tag_341:\n        /* \"#utility.yul\":13358:13434   */\n      tag_342\n        /* \"#utility.yul\":13427:13433   */\n      dup2\n        /* \"#utility.yul\":13422:13425   */\n      dup6\n        /* \"#utility.yul\":13358:13434   */\n      tag_173\n      jump\t// in\n    tag_342:\n        /* \"#utility.yul\":13351:13434   */\n      swap4\n      pop\n        /* \"#utility.yul\":13458:13514   */\n      tag_343\n        /* \"#utility.yul\":13508:13513   */\n      dup4\n        /* \"#utility.yul\":13458:13514   */\n      tag_156\n      jump\t// in\n    tag_343:\n        /* \"#utility.yul\":13537:13544   */\n      dup1\n        /* \"#utility.yul\":13568:13569   */\n      0x00\n        /* \"#utility.yul\":13553:13837   */\n    tag_344:\n        /* \"#utility.yul\":13578:13584   */\n      dup4\n        /* \"#utility.yul\":13575:13576   */\n      dup2\n        /* \"#utility.yul\":13572:13585   */\n      lt\n        /* \"#utility.yul\":13553:13837   */\n      iszero\n      tag_346\n      jumpi\n        /* \"#utility.yul\":13654:13660   */\n      dup2\n        /* \"#utility.yul\":13648:13661   */\n      mload\n        /* \"#utility.yul\":13681:13744   */\n      tag_347\n        /* \"#utility.yul\":13740:13743   */\n      dup9\n        /* \"#utility.yul\":13725:13738   */\n      dup3\n        /* \"#utility.yul\":13681:13744   */\n      tag_158\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":13674:13744   */\n      swap8\n      pop\n        /* \"#utility.yul\":13767:13827   */\n      tag_348\n        /* \"#utility.yul\":13820:13826   */\n      dup4\n        /* \"#utility.yul\":13767:13827   */\n      tag_159\n      jump\t// in\n    tag_348:\n        /* \"#utility.yul\":13757:13827   */\n      swap3\n      pop\n        /* \"#utility.yul\":13613:13837   */\n      pop\n        /* \"#utility.yul\":13600:13601   */\n      0x01\n        /* \"#utility.yul\":13597:13598   */\n      dup2\n        /* \"#utility.yul\":13593:13602   */\n      add\n        /* \"#utility.yul\":13588:13602   */\n      swap1\n      pop\n        /* \"#utility.yul\":13553:13837   */\n      jump(tag_344)\n    tag_346:\n        /* \"#utility.yul\":13557:13571   */\n      pop\n        /* \"#utility.yul\":13853:13856   */\n      dup6\n        /* \"#utility.yul\":13846:13856   */\n      swap4\n      pop\n        /* \"#utility.yul\":13264:13862   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":13150:13862   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13868:13966   */\n    tag_175:\n        /* \"#utility.yul\":13919:13925   */\n      0x00\n        /* \"#utility.yul\":13953:13958   */\n      dup2\n        /* \"#utility.yul\":13947:13959   */\n      mload\n        /* \"#utility.yul\":13937:13959   */\n      swap1\n      pop\n        /* \"#utility.yul\":13868:13966   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13972:14130   */\n    tag_176:\n        /* \"#utility.yul\":14045:14056   */\n      0x00\n        /* \"#utility.yul\":14079:14085   */\n      dup3\n        /* \"#utility.yul\":14074:14077   */\n      dup3\n        /* \"#utility.yul\":14067:14086   */\n      mstore\n        /* \"#utility.yul\":14119:14123   */\n      0x20\n        /* \"#utility.yul\":14114:14117   */\n      dup3\n        /* \"#utility.yul\":14110:14124   */\n      add\n        /* \"#utility.yul\":14095:14124   */\n      swap1\n      pop\n        /* \"#utility.yul\":13972:14130   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14136:14443   */\n    tag_177:\n        /* \"#utility.yul\":14204:14205   */\n      0x00\n        /* \"#utility.yul\":14214:14327   */\n    tag_352:\n        /* \"#utility.yul\":14228:14234   */\n      dup4\n        /* \"#utility.yul\":14225:14226   */\n      dup2\n        /* \"#utility.yul\":14222:14235   */\n      lt\n        /* \"#utility.yul\":14214:14327   */\n      iszero\n      tag_354\n      jumpi\n        /* \"#utility.yul\":14313:14314   */\n      dup1\n        /* \"#utility.yul\":14308:14311   */\n      dup3\n        /* \"#utility.yul\":14304:14315   */\n      add\n        /* \"#utility.yul\":14298:14316   */\n      mload\n        /* \"#utility.yul\":14294:14295   */\n      dup2\n        /* \"#utility.yul\":14289:14292   */\n      dup5\n        /* \"#utility.yul\":14285:14296   */\n      add\n        /* \"#utility.yul\":14278:14317   */\n      mstore\n        /* \"#utility.yul\":14250:14252   */\n      0x20\n        /* \"#utility.yul\":14247:14248   */\n      dup2\n        /* \"#utility.yul\":14243:14253   */\n      add\n        /* \"#utility.yul\":14238:14253   */\n      swap1\n      pop\n        /* \"#utility.yul\":14214:14327   */\n      jump(tag_352)\n    tag_354:\n        /* \"#utility.yul\":14345:14351   */\n      dup4\n        /* \"#utility.yul\":14342:14343   */\n      dup2\n        /* \"#utility.yul\":14339:14352   */\n      gt\n        /* \"#utility.yul\":14336:14437   */\n      iszero\n      tag_355\n      jumpi\n        /* \"#utility.yul\":14425:14426   */\n      0x00\n        /* \"#utility.yul\":14416:14422   */\n      dup5\n        /* \"#utility.yul\":14411:14414   */\n      dup5\n        /* \"#utility.yul\":14407:14423   */\n      add\n        /* \"#utility.yul\":14400:14427   */\n      mstore\n        /* \"#utility.yul\":14336:14437   */\n    tag_355:\n        /* \"#utility.yul\":14185:14443   */\n      pop\n        /* \"#utility.yul\":14136:14443   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14449:14789   */\n    tag_178:\n        /* \"#utility.yul\":14525:14528   */\n      0x00\n        /* \"#utility.yul\":14553:14591   */\n      tag_357\n        /* \"#utility.yul\":14585:14590   */\n      dup3\n        /* \"#utility.yul\":14553:14591   */\n      tag_175\n      jump\t// in\n    tag_357:\n        /* \"#utility.yul\":14607:14667   */\n      tag_358\n        /* \"#utility.yul\":14660:14666   */\n      dup2\n        /* \"#utility.yul\":14655:14658   */\n      dup6\n        /* \"#utility.yul\":14607:14667   */\n      tag_176\n      jump\t// in\n    tag_358:\n        /* \"#utility.yul\":14600:14667   */\n      swap4\n      pop\n        /* \"#utility.yul\":14676:14728   */\n      tag_359\n        /* \"#utility.yul\":14721:14727   */\n      dup2\n        /* \"#utility.yul\":14716:14719   */\n      dup6\n        /* \"#utility.yul\":14709:14713   */\n      0x20\n        /* \"#utility.yul\":14702:14707   */\n      dup7\n        /* \"#utility.yul\":14698:14714   */\n      add\n        /* \"#utility.yul\":14676:14728   */\n      tag_177\n      jump\t// in\n    tag_359:\n        /* \"#utility.yul\":14753:14782   */\n      tag_360\n        /* \"#utility.yul\":14775:14781   */\n      dup2\n        /* \"#utility.yul\":14753:14782   */\n      tag_127\n      jump\t// in\n    tag_360:\n        /* \"#utility.yul\":14748:14751   */\n      dup5\n        /* \"#utility.yul\":14744:14783   */\n      add\n        /* \"#utility.yul\":14737:14783   */\n      swap2\n      pop\n        /* \"#utility.yul\":14529:14789   */\n      pop\n        /* \"#utility.yul\":14449:14789   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14795:14885   */\n    tag_179:\n        /* \"#utility.yul\":14829:14836   */\n      0x00\n        /* \"#utility.yul\":14872:14877   */\n      dup2\n        /* \"#utility.yul\":14865:14878   */\n      iszero\n        /* \"#utility.yul\":14858:14879   */\n      iszero\n        /* \"#utility.yul\":14847:14879   */\n      swap1\n      pop\n        /* \"#utility.yul\":14795:14885   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14891:14990   */\n    tag_180:\n        /* \"#utility.yul\":14962:14983   */\n      tag_363\n        /* \"#utility.yul\":14977:14982   */\n      dup2\n        /* \"#utility.yul\":14962:14983   */\n      tag_179\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":14957:14960   */\n      dup3\n        /* \"#utility.yul\":14950:14984   */\n      mstore\n        /* \"#utility.yul\":14891:14990   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15074:16282   */\n    tag_181:\n        /* \"#utility.yul\":15209:15212   */\n      0x00\n        /* \"#utility.yul\":15245:15249   */\n      0x80\n        /* \"#utility.yul\":15240:15243   */\n      dup4\n        /* \"#utility.yul\":15236:15250   */\n      add\n        /* \"#utility.yul\":15334:15338   */\n      0x00\n        /* \"#utility.yul\":15327:15332   */\n      dup4\n        /* \"#utility.yul\":15323:15339   */\n      add\n        /* \"#utility.yul\":15317:15340   */\n      mload\n        /* \"#utility.yul\":15387:15390   */\n      dup5\n        /* \"#utility.yul\":15381:15385   */\n      dup3\n        /* \"#utility.yul\":15377:15391   */\n      sub\n        /* \"#utility.yul\":15370:15374   */\n      0x00\n        /* \"#utility.yul\":15365:15368   */\n      dup7\n        /* \"#utility.yul\":15361:15375   */\n      add\n        /* \"#utility.yul\":15354:15392   */\n      mstore\n        /* \"#utility.yul\":15413:15531   */\n      tag_365\n        /* \"#utility.yul\":15526:15530   */\n      dup3\n        /* \"#utility.yul\":15512:15524   */\n      dup3\n        /* \"#utility.yul\":15413:15531   */\n      tag_172\n      jump\t// in\n    tag_365:\n        /* \"#utility.yul\":15405:15531   */\n      swap2\n      pop\n        /* \"#utility.yul\":15260:15542   */\n      pop\n        /* \"#utility.yul\":15632:15636   */\n      0x20\n        /* \"#utility.yul\":15625:15630   */\n      dup4\n        /* \"#utility.yul\":15621:15637   */\n      add\n        /* \"#utility.yul\":15615:15638   */\n      mload\n        /* \"#utility.yul\":15685:15688   */\n      dup5\n        /* \"#utility.yul\":15679:15683   */\n      dup3\n        /* \"#utility.yul\":15675:15689   */\n      sub\n        /* \"#utility.yul\":15668:15672   */\n      0x20\n        /* \"#utility.yul\":15663:15666   */\n      dup7\n        /* \"#utility.yul\":15659:15673   */\n      add\n        /* \"#utility.yul\":15652:15690   */\n      mstore\n        /* \"#utility.yul\":15711:15814   */\n      tag_366\n        /* \"#utility.yul\":15809:15813   */\n      dup3\n        /* \"#utility.yul\":15795:15807   */\n      dup3\n        /* \"#utility.yul\":15711:15814   */\n      tag_174\n      jump\t// in\n    tag_366:\n        /* \"#utility.yul\":15703:15814   */\n      swap2\n      pop\n        /* \"#utility.yul\":15552:15825   */\n      pop\n        /* \"#utility.yul\":15911:15915   */\n      0x40\n        /* \"#utility.yul\":15904:15909   */\n      dup4\n        /* \"#utility.yul\":15900:15916   */\n      add\n        /* \"#utility.yul\":15894:15917   */\n      mload\n        /* \"#utility.yul\":15964:15967   */\n      dup5\n        /* \"#utility.yul\":15958:15962   */\n      dup3\n        /* \"#utility.yul\":15954:15968   */\n      sub\n        /* \"#utility.yul\":15947:15951   */\n      0x40\n        /* \"#utility.yul\":15942:15945   */\n      dup7\n        /* \"#utility.yul\":15938:15952   */\n      add\n        /* \"#utility.yul\":15931:15969   */\n      mstore\n        /* \"#utility.yul\":15990:16061   */\n      tag_367\n        /* \"#utility.yul\":16056:16060   */\n      dup3\n        /* \"#utility.yul\":16042:16054   */\n      dup3\n        /* \"#utility.yul\":15990:16061   */\n      tag_178\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":15982:16061   */\n      swap2\n      pop\n        /* \"#utility.yul\":15835:16072   */\n      pop\n        /* \"#utility.yul\":16169:16173   */\n      0x60\n        /* \"#utility.yul\":16162:16167   */\n      dup4\n        /* \"#utility.yul\":16158:16174   */\n      add\n        /* \"#utility.yul\":16152:16175   */\n      mload\n        /* \"#utility.yul\":16188:16245   */\n      tag_368\n        /* \"#utility.yul\":16239:16243   */\n      0x60\n        /* \"#utility.yul\":16234:16237   */\n      dup7\n        /* \"#utility.yul\":16230:16244   */\n      add\n        /* \"#utility.yul\":16216:16228   */\n      dup3\n        /* \"#utility.yul\":16188:16245   */\n      tag_180\n      jump\t// in\n    tag_368:\n        /* \"#utility.yul\":16082:16255   */\n      pop\n        /* \"#utility.yul\":16272:16276   */\n      dup1\n        /* \"#utility.yul\":16265:16276   */\n      swap2\n      pop\n        /* \"#utility.yul\":15214:16282   */\n      pop\n        /* \"#utility.yul\":15074:16282   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16288:17024   */\n    tag_49:\n        /* \"#utility.yul\":16531:16535   */\n      0x00\n        /* \"#utility.yul\":16569:16572   */\n      0x80\n        /* \"#utility.yul\":16558:16567   */\n      dup3\n        /* \"#utility.yul\":16554:16573   */\n      add\n        /* \"#utility.yul\":16546:16573   */\n      swap1\n      pop\n        /* \"#utility.yul\":16583:16654   */\n      tag_370\n        /* \"#utility.yul\":16651:16652   */\n      0x00\n        /* \"#utility.yul\":16640:16649   */\n      dup4\n        /* \"#utility.yul\":16636:16653   */\n      add\n        /* \"#utility.yul\":16627:16633   */\n      dup8\n        /* \"#utility.yul\":16583:16654   */\n      tag_161\n      jump\t// in\n    tag_370:\n        /* \"#utility.yul\":16664:16736   */\n      tag_371\n        /* \"#utility.yul\":16732:16734   */\n      0x20\n        /* \"#utility.yul\":16721:16730   */\n      dup4\n        /* \"#utility.yul\":16717:16735   */\n      add\n        /* \"#utility.yul\":16708:16714   */\n      dup7\n        /* \"#utility.yul\":16664:16736   */\n      tag_150\n      jump\t// in\n    tag_371:\n        /* \"#utility.yul\":16746:16818   */\n      tag_372\n        /* \"#utility.yul\":16814:16816   */\n      0x40\n        /* \"#utility.yul\":16803:16812   */\n      dup4\n        /* \"#utility.yul\":16799:16817   */\n      add\n        /* \"#utility.yul\":16790:16796   */\n      dup6\n        /* \"#utility.yul\":16746:16818   */\n      tag_150\n      jump\t// in\n    tag_372:\n        /* \"#utility.yul\":16865:16874   */\n      dup2\n        /* \"#utility.yul\":16859:16863   */\n      dup2\n        /* \"#utility.yul\":16855:16875   */\n      sub\n        /* \"#utility.yul\":16850:16852   */\n      0x60\n        /* \"#utility.yul\":16839:16848   */\n      dup4\n        /* \"#utility.yul\":16835:16853   */\n      add\n        /* \"#utility.yul\":16828:16876   */\n      mstore\n        /* \"#utility.yul\":16893:17017   */\n      tag_373\n        /* \"#utility.yul\":17012:17016   */\n      dup2\n        /* \"#utility.yul\":17003:17009   */\n      dup5\n        /* \"#utility.yul\":16893:17017   */\n      tag_181\n      jump\t// in\n    tag_373:\n        /* \"#utility.yul\":16885:17017   */\n      swap1\n      pop\n        /* \"#utility.yul\":16288:17024   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17030:17173   */\n    tag_182:\n        /* \"#utility.yul\":17087:17092   */\n      0x00\n        /* \"#utility.yul\":17118:17124   */\n      dup2\n        /* \"#utility.yul\":17112:17125   */\n      mload\n        /* \"#utility.yul\":17103:17125   */\n      swap1\n      pop\n        /* \"#utility.yul\":17134:17167   */\n      tag_375\n        /* \"#utility.yul\":17161:17166   */\n      dup2\n        /* \"#utility.yul\":17134:17167   */\n      tag_142\n      jump\t// in\n    tag_375:\n        /* \"#utility.yul\":17030:17173   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17179:17530   */\n    tag_64:\n        /* \"#utility.yul\":17249:17255   */\n      0x00\n        /* \"#utility.yul\":17298:17300   */\n      0x20\n        /* \"#utility.yul\":17286:17295   */\n      dup3\n        /* \"#utility.yul\":17277:17284   */\n      dup5\n        /* \"#utility.yul\":17273:17296   */\n      sub\n        /* \"#utility.yul\":17269:17301   */\n      slt\n        /* \"#utility.yul\":17266:17385   */\n      iszero\n      tag_377\n      jumpi\n        /* \"#utility.yul\":17304:17383   */\n      tag_378\n      tag_124\n      jump\t// in\n    tag_378:\n        /* \"#utility.yul\":17266:17385   */\n    tag_377:\n        /* \"#utility.yul\":17424:17425   */\n      0x00\n        /* \"#utility.yul\":17449:17513   */\n      tag_379\n        /* \"#utility.yul\":17505:17512   */\n      dup5\n        /* \"#utility.yul\":17496:17502   */\n      dup3\n        /* \"#utility.yul\":17485:17494   */\n      dup6\n        /* \"#utility.yul\":17481:17503   */\n      add\n        /* \"#utility.yul\":17449:17513   */\n      tag_182\n      jump\t// in\n    tag_379:\n        /* \"#utility.yul\":17439:17513   */\n      swap2\n      pop\n        /* \"#utility.yul\":17395:17523   */\n      pop\n        /* \"#utility.yul\":17179:17530   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17536:17652   */\n    tag_183:\n        /* \"#utility.yul\":17606:17627   */\n      tag_381\n        /* \"#utility.yul\":17621:17626   */\n      dup2\n        /* \"#utility.yul\":17606:17627   */\n      tag_179\n      jump\t// in\n    tag_381:\n        /* \"#utility.yul\":17599:17604   */\n      dup2\n        /* \"#utility.yul\":17596:17628   */\n      eq\n        /* \"#utility.yul\":17586:17646   */\n      tag_382\n      jumpi\n        /* \"#utility.yul\":17642:17643   */\n      0x00\n        /* \"#utility.yul\":17639:17640   */\n      dup1\n        /* \"#utility.yul\":17632:17644   */\n      revert\n        /* \"#utility.yul\":17586:17646   */\n    tag_382:\n        /* \"#utility.yul\":17536:17652   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17658:17795   */\n    tag_184:\n        /* \"#utility.yul\":17712:17717   */\n      0x00\n        /* \"#utility.yul\":17743:17749   */\n      dup2\n        /* \"#utility.yul\":17737:17750   */\n      mload\n        /* \"#utility.yul\":17728:17750   */\n      swap1\n      pop\n        /* \"#utility.yul\":17759:17789   */\n      tag_384\n        /* \"#utility.yul\":17783:17788   */\n      dup2\n        /* \"#utility.yul\":17759:17789   */\n      tag_183\n      jump\t// in\n    tag_384:\n        /* \"#utility.yul\":17658:17795   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17801:18146   */\n    tag_71:\n        /* \"#utility.yul\":17868:17874   */\n      0x00\n        /* \"#utility.yul\":17917:17919   */\n      0x20\n        /* \"#utility.yul\":17905:17914   */\n      dup3\n        /* \"#utility.yul\":17896:17903   */\n      dup5\n        /* \"#utility.yul\":17892:17915   */\n      sub\n        /* \"#utility.yul\":17888:17920   */\n      slt\n        /* \"#utility.yul\":17885:18004   */\n      iszero\n      tag_386\n      jumpi\n        /* \"#utility.yul\":17923:18002   */\n      tag_387\n      tag_124\n      jump\t// in\n    tag_387:\n        /* \"#utility.yul\":17885:18004   */\n    tag_386:\n        /* \"#utility.yul\":18043:18044   */\n      0x00\n        /* \"#utility.yul\":18068:18129   */\n      tag_388\n        /* \"#utility.yul\":18121:18128   */\n      dup5\n        /* \"#utility.yul\":18112:18118   */\n      dup3\n        /* \"#utility.yul\":18101:18110   */\n      dup6\n        /* \"#utility.yul\":18097:18119   */\n      add\n        /* \"#utility.yul\":18068:18129   */\n      tag_184\n      jump\t// in\n    tag_388:\n        /* \"#utility.yul\":18058:18129   */\n      swap2\n      pop\n        /* \"#utility.yul\":18014:18139   */\n      pop\n        /* \"#utility.yul\":17801:18146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18152:18321   */\n    tag_185:\n        /* \"#utility.yul\":18236:18247   */\n      0x00\n        /* \"#utility.yul\":18270:18276   */\n      dup3\n        /* \"#utility.yul\":18265:18268   */\n      dup3\n        /* \"#utility.yul\":18258:18277   */\n      mstore\n        /* \"#utility.yul\":18310:18314   */\n      0x20\n        /* \"#utility.yul\":18305:18308   */\n      dup3\n        /* \"#utility.yul\":18301:18315   */\n      add\n        /* \"#utility.yul\":18286:18315   */\n      swap1\n      pop\n        /* \"#utility.yul\":18152:18321   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18327:18556   */\n    tag_186:\n        /* \"#utility.yul\":18467:18501   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":18463:18464   */\n      0x00\n        /* \"#utility.yul\":18455:18461   */\n      dup3\n        /* \"#utility.yul\":18451:18465   */\n      add\n        /* \"#utility.yul\":18444:18502   */\n      mstore\n        /* \"#utility.yul\":18536:18548   */\n      0x6f74207375636365656400000000000000000000000000000000000000000000\n        /* \"#utility.yul\":18531:18533   */\n      0x20\n        /* \"#utility.yul\":18523:18529   */\n      dup3\n        /* \"#utility.yul\":18519:18534   */\n      add\n        /* \"#utility.yul\":18512:18549   */\n      mstore\n        /* \"#utility.yul\":18327:18556   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18562:18928   */\n    tag_187:\n        /* \"#utility.yul\":18704:18707   */\n      0x00\n        /* \"#utility.yul\":18725:18792   */\n      tag_392\n        /* \"#utility.yul\":18789:18791   */\n      0x2a\n        /* \"#utility.yul\":18784:18787   */\n      dup4\n        /* \"#utility.yul\":18725:18792   */\n      tag_185\n      jump\t// in\n    tag_392:\n        /* \"#utility.yul\":18718:18792   */\n      swap2\n      pop\n        /* \"#utility.yul\":18801:18894   */\n      tag_393\n        /* \"#utility.yul\":18890:18893   */\n      dup3\n        /* \"#utility.yul\":18801:18894   */\n      tag_186\n      jump\t// in\n    tag_393:\n        /* \"#utility.yul\":18919:18921   */\n      0x40\n        /* \"#utility.yul\":18914:18917   */\n      dup3\n        /* \"#utility.yul\":18910:18922   */\n      add\n        /* \"#utility.yul\":18903:18922   */\n      swap1\n      pop\n        /* \"#utility.yul\":18562:18928   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18934:19353   */\n    tag_74:\n        /* \"#utility.yul\":19100:19104   */\n      0x00\n        /* \"#utility.yul\":19138:19140   */\n      0x20\n        /* \"#utility.yul\":19127:19136   */\n      dup3\n        /* \"#utility.yul\":19123:19141   */\n      add\n        /* \"#utility.yul\":19115:19141   */\n      swap1\n      pop\n        /* \"#utility.yul\":19187:19196   */\n      dup2\n        /* \"#utility.yul\":19181:19185   */\n      dup2\n        /* \"#utility.yul\":19177:19197   */\n      sub\n        /* \"#utility.yul\":19173:19174   */\n      0x00\n        /* \"#utility.yul\":19162:19171   */\n      dup4\n        /* \"#utility.yul\":19158:19175   */\n      add\n        /* \"#utility.yul\":19151:19198   */\n      mstore\n        /* \"#utility.yul\":19215:19346   */\n      tag_395\n        /* \"#utility.yul\":19341:19345   */\n      dup2\n        /* \"#utility.yul\":19215:19346   */\n      tag_187\n      jump\t// in\n    tag_395:\n        /* \"#utility.yul\":19207:19346   */\n      swap1\n      pop\n        /* \"#utility.yul\":18934:19353   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19359:19691   */\n    tag_77:\n        /* \"#utility.yul\":19480:19484   */\n      0x00\n        /* \"#utility.yul\":19518:19520   */\n      0x40\n        /* \"#utility.yul\":19507:19516   */\n      dup3\n        /* \"#utility.yul\":19503:19521   */\n      add\n        /* \"#utility.yul\":19495:19521   */\n      swap1\n      pop\n        /* \"#utility.yul\":19531:19602   */\n      tag_397\n        /* \"#utility.yul\":19599:19600   */\n      0x00\n        /* \"#utility.yul\":19588:19597   */\n      dup4\n        /* \"#utility.yul\":19584:19601   */\n      add\n        /* \"#utility.yul\":19575:19581   */\n      dup6\n        /* \"#utility.yul\":19531:19602   */\n      tag_150\n      jump\t// in\n    tag_397:\n        /* \"#utility.yul\":19612:19684   */\n      tag_398\n        /* \"#utility.yul\":19680:19682   */\n      0x20\n        /* \"#utility.yul\":19669:19678   */\n      dup4\n        /* \"#utility.yul\":19665:19683   */\n      add\n        /* \"#utility.yul\":19656:19662   */\n      dup5\n        /* \"#utility.yul\":19612:19684   */\n      tag_150\n      jump\t// in\n    tag_398:\n        /* \"#utility.yul\":19359:19691   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":19697:19877   */\n    tag_188:\n        /* \"#utility.yul\":19745:19822   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":19742:19743   */\n      0x00\n        /* \"#utility.yul\":19735:19823   */\n      mstore\n        /* \"#utility.yul\":19842:19846   */\n      0x11\n        /* \"#utility.yul\":19839:19840   */\n      0x04\n        /* \"#utility.yul\":19832:19847   */\n      mstore\n        /* \"#utility.yul\":19866:19870   */\n      0x24\n        /* \"#utility.yul\":19863:19864   */\n      0x00\n        /* \"#utility.yul\":19856:19871   */\n      revert\n        /* \"#utility.yul\":19883:20188   */\n    tag_82:\n        /* \"#utility.yul\":19923:19926   */\n      0x00\n        /* \"#utility.yul\":19942:19962   */\n      tag_401\n        /* \"#utility.yul\":19960:19961   */\n      dup3\n        /* \"#utility.yul\":19942:19962   */\n      tag_141\n      jump\t// in\n    tag_401:\n        /* \"#utility.yul\":19937:19962   */\n      swap2\n      pop\n        /* \"#utility.yul\":19976:19996   */\n      tag_402\n        /* \"#utility.yul\":19994:19995   */\n      dup4\n        /* \"#utility.yul\":19976:19996   */\n      tag_141\n      jump\t// in\n    tag_402:\n        /* \"#utility.yul\":19971:19996   */\n      swap3\n      pop\n        /* \"#utility.yul\":20130:20131   */\n      dup3\n        /* \"#utility.yul\":20062:20128   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":20058:20132   */\n      sub\n        /* \"#utility.yul\":20055:20056   */\n      dup3\n        /* \"#utility.yul\":20052:20133   */\n      gt\n        /* \"#utility.yul\":20049:20156   */\n      iszero\n      tag_403\n      jumpi\n        /* \"#utility.yul\":20136:20154   */\n      tag_404\n      tag_188\n      jump\t// in\n    tag_404:\n        /* \"#utility.yul\":20049:20156   */\n    tag_403:\n        /* \"#utility.yul\":20180:20181   */\n      dup3\n        /* \"#utility.yul\":20177:20178   */\n      dup3\n        /* \"#utility.yul\":20173:20182   */\n      add\n        /* \"#utility.yul\":20166:20182   */\n      swap1\n      pop\n        /* \"#utility.yul\":19883:20188   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20194:20526   */\n    tag_85:\n        /* \"#utility.yul\":20315:20319   */\n      0x00\n        /* \"#utility.yul\":20353:20355   */\n      0x40\n        /* \"#utility.yul\":20342:20351   */\n      dup3\n        /* \"#utility.yul\":20338:20356   */\n      add\n        /* \"#utility.yul\":20330:20356   */\n      swap1\n      pop\n        /* \"#utility.yul\":20366:20437   */\n      tag_406\n        /* \"#utility.yul\":20434:20435   */\n      0x00\n        /* \"#utility.yul\":20423:20432   */\n      dup4\n        /* \"#utility.yul\":20419:20436   */\n      add\n        /* \"#utility.yul\":20410:20416   */\n      dup6\n        /* \"#utility.yul\":20366:20437   */\n      tag_150\n      jump\t// in\n    tag_406:\n        /* \"#utility.yul\":20447:20519   */\n      tag_407\n        /* \"#utility.yul\":20515:20517   */\n      0x20\n        /* \"#utility.yul\":20504:20513   */\n      dup4\n        /* \"#utility.yul\":20500:20518   */\n      add\n        /* \"#utility.yul\":20491:20497   */\n      dup5\n        /* \"#utility.yul\":20447:20519   */\n      tag_151\n      jump\t// in\n    tag_407:\n        /* \"#utility.yul\":20194:20526   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20532:20757   */\n    tag_189:\n        /* \"#utility.yul\":20672:20706   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":20668:20669   */\n      0x00\n        /* \"#utility.yul\":20660:20666   */\n      dup3\n        /* \"#utility.yul\":20656:20670   */\n      add\n        /* \"#utility.yul\":20649:20707   */\n      mstore\n        /* \"#utility.yul\":20741:20749   */\n      0x722063616c6c0000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":20736:20738   */\n      0x20\n        /* \"#utility.yul\":20728:20734   */\n      dup3\n        /* \"#utility.yul\":20724:20739   */\n      add\n        /* \"#utility.yul\":20717:20750   */\n      mstore\n        /* \"#utility.yul\":20532:20757   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":20763:21129   */\n    tag_190:\n        /* \"#utility.yul\":20905:20908   */\n      0x00\n        /* \"#utility.yul\":20926:20993   */\n      tag_410\n        /* \"#utility.yul\":20990:20992   */\n      0x26\n        /* \"#utility.yul\":20985:20988   */\n      dup4\n        /* \"#utility.yul\":20926:20993   */\n      tag_185\n      jump\t// in\n    tag_410:\n        /* \"#utility.yul\":20919:20993   */\n      swap2\n      pop\n        /* \"#utility.yul\":21002:21095   */\n      tag_411\n        /* \"#utility.yul\":21091:21094   */\n      dup3\n        /* \"#utility.yul\":21002:21095   */\n      tag_189\n      jump\t// in\n    tag_411:\n        /* \"#utility.yul\":21120:21122   */\n      0x40\n        /* \"#utility.yul\":21115:21118   */\n      dup3\n        /* \"#utility.yul\":21111:21123   */\n      add\n        /* \"#utility.yul\":21104:21123   */\n      swap1\n      pop\n        /* \"#utility.yul\":20763:21129   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21135:21554   */\n    tag_102:\n        /* \"#utility.yul\":21301:21305   */\n      0x00\n        /* \"#utility.yul\":21339:21341   */\n      0x20\n        /* \"#utility.yul\":21328:21337   */\n      dup3\n        /* \"#utility.yul\":21324:21342   */\n      add\n        /* \"#utility.yul\":21316:21342   */\n      swap1\n      pop\n        /* \"#utility.yul\":21388:21397   */\n      dup2\n        /* \"#utility.yul\":21382:21386   */\n      dup2\n        /* \"#utility.yul\":21378:21398   */\n      sub\n        /* \"#utility.yul\":21374:21375   */\n      0x00\n        /* \"#utility.yul\":21363:21372   */\n      dup4\n        /* \"#utility.yul\":21359:21376   */\n      add\n        /* \"#utility.yul\":21352:21399   */\n      mstore\n        /* \"#utility.yul\":21416:21547   */\n      tag_413\n        /* \"#utility.yul\":21542:21546   */\n      dup2\n        /* \"#utility.yul\":21416:21547   */\n      tag_190\n      jump\t// in\n    tag_413:\n        /* \"#utility.yul\":21408:21547   */\n      swap1\n      pop\n        /* \"#utility.yul\":21135:21554   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21560:21739   */\n    tag_191:\n        /* \"#utility.yul\":21700:21731   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":21696:21697   */\n      0x00\n        /* \"#utility.yul\":21688:21694   */\n      dup3\n        /* \"#utility.yul\":21684:21698   */\n      add\n        /* \"#utility.yul\":21677:21732   */\n      mstore\n        /* \"#utility.yul\":21560:21739   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":21745:22111   */\n    tag_192:\n        /* \"#utility.yul\":21887:21890   */\n      0x00\n        /* \"#utility.yul\":21908:21975   */\n      tag_416\n        /* \"#utility.yul\":21972:21974   */\n      0x1d\n        /* \"#utility.yul\":21967:21970   */\n      dup4\n        /* \"#utility.yul\":21908:21975   */\n      tag_185\n      jump\t// in\n    tag_416:\n        /* \"#utility.yul\":21901:21975   */\n      swap2\n      pop\n        /* \"#utility.yul\":21984:22077   */\n      tag_417\n        /* \"#utility.yul\":22073:22076   */\n      dup3\n        /* \"#utility.yul\":21984:22077   */\n      tag_191\n      jump\t// in\n    tag_417:\n        /* \"#utility.yul\":22102:22104   */\n      0x20\n        /* \"#utility.yul\":22097:22100   */\n      dup3\n        /* \"#utility.yul\":22093:22105   */\n      add\n        /* \"#utility.yul\":22086:22105   */\n      swap1\n      pop\n        /* \"#utility.yul\":21745:22111   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22117:22536   */\n    tag_107:\n        /* \"#utility.yul\":22283:22287   */\n      0x00\n        /* \"#utility.yul\":22321:22323   */\n      0x20\n        /* \"#utility.yul\":22310:22319   */\n      dup3\n        /* \"#utility.yul\":22306:22324   */\n      add\n        /* \"#utility.yul\":22298:22324   */\n      swap1\n      pop\n        /* \"#utility.yul\":22370:22379   */\n      dup2\n        /* \"#utility.yul\":22364:22368   */\n      dup2\n        /* \"#utility.yul\":22360:22380   */\n      sub\n        /* \"#utility.yul\":22356:22357   */\n      0x00\n        /* \"#utility.yul\":22345:22354   */\n      dup4\n        /* \"#utility.yul\":22341:22358   */\n      add\n        /* \"#utility.yul\":22334:22381   */\n      mstore\n        /* \"#utility.yul\":22398:22529   */\n      tag_419\n        /* \"#utility.yul\":22524:22528   */\n      dup2\n        /* \"#utility.yul\":22398:22529   */\n      tag_192\n      jump\t// in\n    tag_419:\n        /* \"#utility.yul\":22390:22529   */\n      swap1\n      pop\n        /* \"#utility.yul\":22117:22536   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22542:22689   */\n    tag_193:\n        /* \"#utility.yul\":22643:22654   */\n      0x00\n        /* \"#utility.yul\":22680:22683   */\n      dup2\n        /* \"#utility.yul\":22665:22683   */\n      swap1\n      pop\n        /* \"#utility.yul\":22542:22689   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":22695:23068   */\n    tag_194:\n        /* \"#utility.yul\":22799:22802   */\n      0x00\n        /* \"#utility.yul\":22827:22865   */\n      tag_422\n        /* \"#utility.yul\":22859:22864   */\n      dup3\n        /* \"#utility.yul\":22827:22865   */\n      tag_175\n      jump\t// in\n    tag_422:\n        /* \"#utility.yul\":22881:22969   */\n      tag_423\n        /* \"#utility.yul\":22962:22968   */\n      dup2\n        /* \"#utility.yul\":22957:22960   */\n      dup6\n        /* \"#utility.yul\":22881:22969   */\n      tag_193\n      jump\t// in\n    tag_423:\n        /* \"#utility.yul\":22874:22969   */\n      swap4\n      pop\n        /* \"#utility.yul\":22978:23030   */\n      tag_424\n        /* \"#utility.yul\":23023:23029   */\n      dup2\n        /* \"#utility.yul\":23018:23021   */\n      dup6\n        /* \"#utility.yul\":23011:23015   */\n      0x20\n        /* \"#utility.yul\":23004:23009   */\n      dup7\n        /* \"#utility.yul\":23000:23016   */\n      add\n        /* \"#utility.yul\":22978:23030   */\n      tag_177\n      jump\t// in\n    tag_424:\n        /* \"#utility.yul\":23055:23061   */\n      dup1\n        /* \"#utility.yul\":23050:23053   */\n      dup5\n        /* \"#utility.yul\":23046:23062   */\n      add\n        /* \"#utility.yul\":23039:23062   */\n      swap2\n      pop\n        /* \"#utility.yul\":22803:23068   */\n      pop\n        /* \"#utility.yul\":22695:23068   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23074:23345   */\n    tag_109:\n        /* \"#utility.yul\":23204:23207   */\n      0x00\n        /* \"#utility.yul\":23226:23319   */\n      tag_426\n        /* \"#utility.yul\":23315:23318   */\n      dup3\n        /* \"#utility.yul\":23306:23312   */\n      dup5\n        /* \"#utility.yul\":23226:23319   */\n      tag_194\n      jump\t// in\n    tag_426:\n        /* \"#utility.yul\":23219:23319   */\n      swap2\n      pop\n        /* \"#utility.yul\":23336:23339   */\n      dup2\n        /* \"#utility.yul\":23329:23339   */\n      swap1\n      pop\n        /* \"#utility.yul\":23074:23345   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23351:23450   */\n    tag_195:\n        /* \"#utility.yul\":23403:23409   */\n      0x00\n        /* \"#utility.yul\":23437:23442   */\n      dup2\n        /* \"#utility.yul\":23431:23443   */\n      mload\n        /* \"#utility.yul\":23421:23443   */\n      swap1\n      pop\n        /* \"#utility.yul\":23351:23450   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23456:23820   */\n    tag_196:\n        /* \"#utility.yul\":23544:23547   */\n      0x00\n        /* \"#utility.yul\":23572:23611   */\n      tag_429\n        /* \"#utility.yul\":23605:23610   */\n      dup3\n        /* \"#utility.yul\":23572:23611   */\n      tag_195\n      jump\t// in\n    tag_429:\n        /* \"#utility.yul\":23627:23698   */\n      tag_430\n        /* \"#utility.yul\":23691:23697   */\n      dup2\n        /* \"#utility.yul\":23686:23689   */\n      dup6\n        /* \"#utility.yul\":23627:23698   */\n      tag_185\n      jump\t// in\n    tag_430:\n        /* \"#utility.yul\":23620:23698   */\n      swap4\n      pop\n        /* \"#utility.yul\":23707:23759   */\n      tag_431\n        /* \"#utility.yul\":23752:23758   */\n      dup2\n        /* \"#utility.yul\":23747:23750   */\n      dup6\n        /* \"#utility.yul\":23740:23744   */\n      0x20\n        /* \"#utility.yul\":23733:23738   */\n      dup7\n        /* \"#utility.yul\":23729:23745   */\n      add\n        /* \"#utility.yul\":23707:23759   */\n      tag_177\n      jump\t// in\n    tag_431:\n        /* \"#utility.yul\":23784:23813   */\n      tag_432\n        /* \"#utility.yul\":23806:23812   */\n      dup2\n        /* \"#utility.yul\":23784:23813   */\n      tag_127\n      jump\t// in\n    tag_432:\n        /* \"#utility.yul\":23779:23782   */\n      dup5\n        /* \"#utility.yul\":23775:23814   */\n      add\n        /* \"#utility.yul\":23768:23814   */\n      swap2\n      pop\n        /* \"#utility.yul\":23548:23820   */\n      pop\n        /* \"#utility.yul\":23456:23820   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":23826:24139   */\n    tag_122:\n        /* \"#utility.yul\":23939:23943   */\n      0x00\n        /* \"#utility.yul\":23977:23979   */\n      0x20\n        /* \"#utility.yul\":23966:23975   */\n      dup3\n        /* \"#utility.yul\":23962:23980   */\n      add\n        /* \"#utility.yul\":23954:23980   */\n      swap1\n      pop\n        /* \"#utility.yul\":24026:24035   */\n      dup2\n        /* \"#utility.yul\":24020:24024   */\n      dup2\n        /* \"#utility.yul\":24016:24036   */\n      sub\n        /* \"#utility.yul\":24012:24013   */\n      0x00\n        /* \"#utility.yul\":24001:24010   */\n      dup4\n        /* \"#utility.yul\":23997:24014   */\n      add\n        /* \"#utility.yul\":23990:24037   */\n      mstore\n        /* \"#utility.yul\":24054:24132   */\n      tag_434\n        /* \"#utility.yul\":24127:24131   */\n      dup2\n        /* \"#utility.yul\":24118:24124   */\n      dup5\n        /* \"#utility.yul\":24054:24132   */\n      tag_196\n      jump\t// in\n    tag_434:\n        /* \"#utility.yul\":24046:24132   */\n      swap1\n      pop\n        /* \"#utility.yul\":23826:24139   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122006189797d4b756d9da998b41eead227f9f43a87af3edc622510e453b2a100cbd64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1401": {
									"entryPoint": null,
									"id": 1401,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 197,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 220,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 151,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 119,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 114,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 171,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1199:14",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:14"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:14"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:14",
														"type": ""
													}
												],
												"src": "7:75:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:14"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:14"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:14",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:14",
														"type": ""
													}
												],
												"src": "334:126:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:14",
														"type": ""
													}
												],
												"src": "466:96:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:14"
															},
															"nodeType": "YulIf",
															"src": "621:63:14"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:14",
														"type": ""
													}
												],
												"src": "568:122:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "759:80:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "769:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:13:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "800:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "800:33:14"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "737:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "745:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "753:5:14",
														"type": ""
													}
												],
												"src": "696:143:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "922:274:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "968:83:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "970:77:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "970:79:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "970:79:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "943:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "952:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "939:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "964:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "935:32:14"
															},
															"nodeType": "YulIf",
															"src": "932:119:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "1061:128:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1076:15:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1090:1:14",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1080:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1105:74:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1151:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1162:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1147:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1147:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1171:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1115:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:64:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1105:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "892:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "903:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "915:6:14",
														"type": ""
													}
												],
												"src": "845:351:14"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60a06040523480156200001157600080fd5b5060405162001750380380620017508339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b608051611619620001376000396000818160a2015281816102b0015261031201526116196000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806311ffbf3c1461004657806377aba213146100625780638114456314610080575b600080fd5b610060600480360381019061005b9190610d18565b61009c565b005b61006a6100a0565b6040516100779190610d83565b60405180910390f35b61009a60048036038101906100959190610d18565b6100c4565b005b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082600001518360200151815181106100e1576100e0610d9e565b5b602002602001015190506101183330848473ffffffffffffffffffffffffffffffffffffffff1661014c909392919063ffffffff16565b610130836000015183856020015186604001516101d5565b610147836060015184608001518560a001516103ac565b505050565b6101cf846323b872dd60e01b85858560405160240161016d93929190610ddc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506104c5565b50505050565b6000600190506000855167ffffffffffffffff8111156101f8576101f7610a07565b5b6040519080825280602002602001820160405280156102265781602001602082028036833780820191505090505b5090508481858151811061023d5761023c610d9e565b5b602002602001018181525050600060019050600083838360405160200161026693929190610eed565b604051602081830303815290604052905061027f6109b3565b88816000018190525083816020018190525081816040018190525060008160600190151590811515815250506103107f0000000000000000000000000000000000000000000000000000000000000000898b8a815181106102e3576102e2610d9e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661058c9092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b95cac28873030856040518563ffffffff1660e01b815260040161036f94939291906111cb565b600060405180830381600087803b15801561038957600080fd5b505af115801561039d573d6000803e3d6000fd5b50505050505050505050505050565b6103b6828461069e565b8173ffffffffffffffffffffffffffffffffffffffff1663de5f62686040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103fe57600080fd5b505af1158015610412573d6000803e3d6000fd5b5050505060008290506104bf828273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104589190610d83565b602060405180830381865afa158015610475573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610499919061122c565b8373ffffffffffffffffffffffffffffffffffffffff166107779092919063ffffffff16565b50505050565b6000610527826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166107fd9092919063ffffffff16565b905060008151111561058757808060200190518101906105479190611285565b610586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057d90611335565b60405180910390fd5b5b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b81526004016105ca929190611355565b602060405180830381865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b919061122c565b61061591906113ad565b90506106988463095ea7b360e01b8584604051602401610636929190611403565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506104c5565b50505050565b600081905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b81526004016106e0929190611355565b602060405180830381865afa1580156106fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610721919061122c565b0361077257610771837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8373ffffffffffffffffffffffffffffffffffffffff1661058c9092919063ffffffff16565b5b505050565b6107f88363a9059cbb60e01b8484604051602401610796929190611403565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506104c5565b505050565b606061080c8484600085610815565b90509392505050565b60608247101561085a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108519061149e565b60405180910390fd5b61086385610929565b6108a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108999061150a565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516108cb9190611566565b60006040518083038185875af1925050503d8060008114610908576040519150601f19603f3d011682016040523d82523d6000602084013e61090d565b606091505b509150915061091d82828661094c565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561095c578290506109ac565b60008351111561096f5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a391906115c1565b60405180910390fd5b9392505050565b60405180608001604052806060815260200160608152602001606081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a3f826109f6565b810181811067ffffffffffffffff82111715610a5e57610a5d610a07565b5b80604052505050565b6000610a716109dd565b9050610a7d8282610a36565b919050565b600080fd5b600080fd5b600067ffffffffffffffff821115610aa757610aa6610a07565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae882610abd565b9050919050565b6000610afa82610add565b9050919050565b610b0a81610aef565b8114610b1557600080fd5b50565b600081359050610b2781610b01565b92915050565b6000610b40610b3b84610a8c565b610a67565b90508083825260208201905060208402830185811115610b6357610b62610ab8565b5b835b81811015610b8c5780610b788882610b18565b845260208401935050602081019050610b65565b5050509392505050565b600082601f830112610bab57610baa610a87565b5b8135610bbb848260208601610b2d565b91505092915050565b6000819050919050565b610bd781610bc4565b8114610be257600080fd5b50565b600081359050610bf481610bce565b92915050565b6000819050919050565b610c0d81610bfa565b8114610c1857600080fd5b50565b600081359050610c2a81610c04565b92915050565b610c3981610add565b8114610c4457600080fd5b50565b600081359050610c5681610c30565b92915050565b600060c08284031215610c7257610c716109f1565b5b610c7c60c0610a67565b9050600082013567ffffffffffffffff811115610c9c57610c9b610a82565b5b610ca884828501610b96565b6000830152506020610cbc84828501610be5565b6020830152506040610cd084828501610c1b565b6040830152506060610ce484828501610c47565b6060830152506080610cf884828501610c47565b60808301525060a0610d0c84828501610c47565b60a08301525092915050565b60008060408385031215610d2f57610d2e6109e7565b5b600083013567ffffffffffffffff811115610d4d57610d4c6109ec565b5b610d5985828601610c5c565b9250506020610d6a85828601610be5565b9150509250929050565b610d7d81610add565b82525050565b6000602082019050610d986000830184610d74565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610dd681610bc4565b82525050565b6000606082019050610df16000830186610d74565b610dfe6020830185610d74565b610e0b6040830184610dcd565b949350505050565b600060ff82169050919050565b610e2981610e13565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610e6481610bc4565b82525050565b6000610e768383610e5b565b60208301905092915050565b6000602082019050919050565b6000610e9a82610e2f565b610ea48185610e3a565b9350610eaf83610e4b565b8060005b83811015610ee0578151610ec78882610e6a565b9750610ed283610e82565b925050600181019050610eb3565b5085935050505092915050565b6000606082019050610f026000830186610e20565b8181036020830152610f148185610e8f565b9050610f236040830184610dcd565b949350505050565b610f3481610bfa565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6000610f8b610f86610f8184610abd565b610f66565b610abd565b9050919050565b6000610f9d82610f70565b9050919050565b6000610faf82610f92565b9050919050565b610fbf81610fa4565b82525050565b6000610fd18383610fb6565b60208301905092915050565b6000602082019050919050565b6000610ff582610f3a565b610fff8185610f45565b935061100a83610f56565b8060005b8381101561103b5781516110228882610fc5565b975061102d83610fdd565b92505060018101905061100e565b5085935050505092915050565b600082825260208201905092915050565b600061106482610e2f565b61106e8185611048565b935061107983610e4b565b8060005b838110156110aa5781516110918882610e6a565b975061109c83610e82565b92505060018101905061107d565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110f15780820151818401526020810190506110d6565b83811115611100576000848401525b50505050565b6000611111826110b7565b61111b81856110c2565b935061112b8185602086016110d3565b611134816109f6565b840191505092915050565b60008115159050919050565b6111548161113f565b82525050565b600060808301600083015184820360008601526111778282610fea565b915050602083015184820360208601526111918282611059565b915050604083015184820360408601526111ab8282611106565b91505060608301516111c0606086018261114b565b508091505092915050565b60006080820190506111e06000830187610f2b565b6111ed6020830186610d74565b6111fa6040830185610d74565b818103606083015261120c818461115a565b905095945050505050565b60008151905061122681610bce565b92915050565b600060208284031215611242576112416109e7565b5b600061125084828501611217565b91505092915050565b6112628161113f565b811461126d57600080fd5b50565b60008151905061127f81611259565b92915050565b60006020828403121561129b5761129a6109e7565b5b60006112a984828501611270565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061131f602a836112b2565b915061132a826112c3565b604082019050919050565b6000602082019050818103600083015261134e81611312565b9050919050565b600060408201905061136a6000830185610d74565b6113776020830184610d74565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113b882610bc4565b91506113c383610bc4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113f8576113f761137e565b5b828201905092915050565b60006040820190506114186000830185610d74565b6114256020830184610dcd565b9392505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006114886026836112b2565b91506114938261142c565b604082019050919050565b600060208201905081810360008301526114b78161147b565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006114f4601d836112b2565b91506114ff826114be565b602082019050919050565b60006020820190508181036000830152611523816114e7565b9050919050565b600081905092915050565b6000611540826110b7565b61154a818561152a565b935061155a8185602086016110d3565b80840191505092915050565b60006115728284611535565b915081905092915050565b600081519050919050565b60006115938261157d565b61159d81856112b2565b93506115ad8185602086016110d3565b6115b6816109f6565b840191505092915050565b600060208201905081810360008301526115db8184611588565b90509291505056fea264697066735822122006189797d4b756d9da998b41eead227f9f43a87af3edc622510e453b2a100cbd64736f6c634300080d0033",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1750 CODESIZE SUB DUP1 PUSH3 0x1750 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0xDC JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP PUSH3 0x10E JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xA4 DUP3 PUSH3 0x77 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0xB6 DUP2 PUSH3 0x97 JUMP JUMPDEST DUP2 EQ PUSH3 0xC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0xD6 DUP2 PUSH3 0xAB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xF5 JUMPI PUSH3 0xF4 PUSH3 0x72 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x105 DUP5 DUP3 DUP6 ADD PUSH3 0xC5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1619 PUSH3 0x137 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0xA2 ADD MSTORE DUP2 DUP2 PUSH2 0x2B0 ADD MSTORE PUSH2 0x312 ADD MSTORE PUSH2 0x1619 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x11FFBF3C EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x77ABA213 EQ PUSH2 0x62 JUMPI DUP1 PUSH4 0x81144563 EQ PUSH2 0x80 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B SWAP2 SWAP1 PUSH2 0xD18 JUMP JUMPDEST PUSH2 0x9C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6A PUSH2 0xA0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x77 SWAP2 SWAP1 PUSH2 0xD83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x95 SWAP2 SWAP1 PUSH2 0xD18 JUMP JUMPDEST PUSH2 0xC4 JUMP JUMPDEST STOP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0xE1 JUMPI PUSH2 0xE0 PUSH2 0xD9E JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x118 CALLER ADDRESS DUP5 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14C SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x130 DUP4 PUSH1 0x0 ADD MLOAD DUP4 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x1D5 JUMP JUMPDEST PUSH2 0x147 DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0xA0 ADD MLOAD PUSH2 0x3AC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1CF DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x16D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xDDC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x4C5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP PUSH1 0x0 DUP6 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F8 JUMPI PUSH2 0x1F7 PUSH2 0xA07 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x226 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP5 DUP2 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x23D JUMPI PUSH2 0x23C PUSH2 0xD9E JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x1 SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x266 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xEED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x27F PUSH2 0x9B3 JUMP JUMPDEST DUP9 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 MSTORE POP DUP4 DUP2 PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP DUP2 DUP2 PUSH1 0x40 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 DUP2 PUSH1 0x60 ADD SWAP1 ISZERO ISZERO SWAP1 DUP2 ISZERO ISZERO DUP2 MSTORE POP POP PUSH2 0x310 PUSH32 0x0 DUP10 DUP12 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x2E3 JUMPI PUSH2 0x2E2 PUSH2 0xD9E JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x58C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB95CAC28 DUP8 ADDRESS ADDRESS DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11CB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x39D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3B6 DUP3 DUP5 PUSH2 0x69E JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDE5F6268 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x412 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP3 SWAP1 POP PUSH2 0x4BF DUP3 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x458 SWAP2 SWAP1 PUSH2 0xD83 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x475 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x499 SWAP2 SWAP1 PUSH2 0x122C JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x777 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x527 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x7FD SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x587 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x547 SWAP2 SWAP1 PUSH2 0x1285 JUMP JUMPDEST PUSH2 0x586 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57D SWAP1 PUSH2 0x1335 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E ADDRESS DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CA SWAP3 SWAP2 SWAP1 PUSH2 0x1355 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x60B SWAP2 SWAP1 PUSH2 0x122C JUMP JUMPDEST PUSH2 0x615 SWAP2 SWAP1 PUSH2 0x13AD JUMP JUMPDEST SWAP1 POP PUSH2 0x698 DUP5 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP6 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x636 SWAP3 SWAP2 SWAP1 PUSH2 0x1403 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x4C5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E ADDRESS DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E0 SWAP3 SWAP2 SWAP1 PUSH2 0x1355 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x721 SWAP2 SWAP1 PUSH2 0x122C JUMP JUMPDEST SUB PUSH2 0x772 JUMPI PUSH2 0x771 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x58C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x7F8 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x796 SWAP3 SWAP2 SWAP1 PUSH2 0x1403 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x4C5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x80C DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x815 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x85A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x851 SWAP1 PUSH2 0x149E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x863 DUP6 PUSH2 0x929 JUMP JUMPDEST PUSH2 0x8A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x899 SWAP1 PUSH2 0x150A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x8CB SWAP2 SWAP1 PUSH2 0x1566 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x908 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x90D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x91D DUP3 DUP3 DUP7 PUSH2 0x94C JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x95C JUMPI DUP3 SWAP1 POP PUSH2 0x9AC JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x96F JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A3 SWAP2 SWAP1 PUSH2 0x15C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xA3F DUP3 PUSH2 0x9F6 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xA5E JUMPI PUSH2 0xA5D PUSH2 0xA07 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 PUSH2 0x9DD JUMP JUMPDEST SWAP1 POP PUSH2 0xA7D DUP3 DUP3 PUSH2 0xA36 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xAA7 JUMPI PUSH2 0xAA6 PUSH2 0xA07 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE8 DUP3 PUSH2 0xABD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAFA DUP3 PUSH2 0xADD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB0A DUP2 PUSH2 0xAEF JUMP JUMPDEST DUP2 EQ PUSH2 0xB15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB27 DUP2 PUSH2 0xB01 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB40 PUSH2 0xB3B DUP5 PUSH2 0xA8C JUMP JUMPDEST PUSH2 0xA67 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0xB63 JUMPI PUSH2 0xB62 PUSH2 0xAB8 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB8C JUMPI DUP1 PUSH2 0xB78 DUP9 DUP3 PUSH2 0xB18 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB65 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBAB JUMPI PUSH2 0xBAA PUSH2 0xA87 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBBB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBD7 DUP2 PUSH2 0xBC4 JUMP JUMPDEST DUP2 EQ PUSH2 0xBE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBF4 DUP2 PUSH2 0xBCE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC0D DUP2 PUSH2 0xBFA JUMP JUMPDEST DUP2 EQ PUSH2 0xC18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xC2A DUP2 PUSH2 0xC04 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC39 DUP2 PUSH2 0xADD JUMP JUMPDEST DUP2 EQ PUSH2 0xC44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xC56 DUP2 PUSH2 0xC30 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC72 JUMPI PUSH2 0xC71 PUSH2 0x9F1 JUMP JUMPDEST JUMPDEST PUSH2 0xC7C PUSH1 0xC0 PUSH2 0xA67 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC9C JUMPI PUSH2 0xC9B PUSH2 0xA82 JUMP JUMPDEST JUMPDEST PUSH2 0xCA8 DUP5 DUP3 DUP6 ADD PUSH2 0xB96 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0xCBC DUP5 DUP3 DUP6 ADD PUSH2 0xBE5 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xCD0 DUP5 DUP3 DUP6 ADD PUSH2 0xC1B JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xCE4 DUP5 DUP3 DUP6 ADD PUSH2 0xC47 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xCF8 DUP5 DUP3 DUP6 ADD PUSH2 0xC47 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0xD0C DUP5 DUP3 DUP6 ADD PUSH2 0xC47 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD2F JUMPI PUSH2 0xD2E PUSH2 0x9E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD4D JUMPI PUSH2 0xD4C PUSH2 0x9EC JUMP JUMPDEST JUMPDEST PUSH2 0xD59 DUP6 DUP3 DUP7 ADD PUSH2 0xC5C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD6A DUP6 DUP3 DUP7 ADD PUSH2 0xBE5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xD7D DUP2 PUSH2 0xADD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD98 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD74 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xDD6 DUP2 PUSH2 0xBC4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xDF1 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xD74 JUMP JUMPDEST PUSH2 0xDFE PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xD74 JUMP JUMPDEST PUSH2 0xE0B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xDCD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE29 DUP2 PUSH2 0xE13 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE64 DUP2 PUSH2 0xBC4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE76 DUP4 DUP4 PUSH2 0xE5B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE9A DUP3 PUSH2 0xE2F JUMP JUMPDEST PUSH2 0xEA4 DUP2 DUP6 PUSH2 0xE3A JUMP JUMPDEST SWAP4 POP PUSH2 0xEAF DUP4 PUSH2 0xE4B JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEE0 JUMPI DUP2 MLOAD PUSH2 0xEC7 DUP9 DUP3 PUSH2 0xE6A JUMP JUMPDEST SWAP8 POP PUSH2 0xED2 DUP4 PUSH2 0xE82 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xEB3 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xF02 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xE20 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xF14 DUP2 DUP6 PUSH2 0xE8F JUMP JUMPDEST SWAP1 POP PUSH2 0xF23 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xDCD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xF34 DUP2 PUSH2 0xBFA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8B PUSH2 0xF86 PUSH2 0xF81 DUP5 PUSH2 0xABD JUMP JUMPDEST PUSH2 0xF66 JUMP JUMPDEST PUSH2 0xABD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF9D DUP3 PUSH2 0xF70 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFAF DUP3 PUSH2 0xF92 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFBF DUP2 PUSH2 0xFA4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD1 DUP4 DUP4 PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF5 DUP3 PUSH2 0xF3A JUMP JUMPDEST PUSH2 0xFFF DUP2 DUP6 PUSH2 0xF45 JUMP JUMPDEST SWAP4 POP PUSH2 0x100A DUP4 PUSH2 0xF56 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x103B JUMPI DUP2 MLOAD PUSH2 0x1022 DUP9 DUP3 PUSH2 0xFC5 JUMP JUMPDEST SWAP8 POP PUSH2 0x102D DUP4 PUSH2 0xFDD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x100E JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1064 DUP3 PUSH2 0xE2F JUMP JUMPDEST PUSH2 0x106E DUP2 DUP6 PUSH2 0x1048 JUMP JUMPDEST SWAP4 POP PUSH2 0x1079 DUP4 PUSH2 0xE4B JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10AA JUMPI DUP2 MLOAD PUSH2 0x1091 DUP9 DUP3 PUSH2 0xE6A JUMP JUMPDEST SWAP8 POP PUSH2 0x109C DUP4 PUSH2 0xE82 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x107D JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10F1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x10D6 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1100 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1111 DUP3 PUSH2 0x10B7 JUMP JUMPDEST PUSH2 0x111B DUP2 DUP6 PUSH2 0x10C2 JUMP JUMPDEST SWAP4 POP PUSH2 0x112B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x10D3 JUMP JUMPDEST PUSH2 0x1134 DUP2 PUSH2 0x9F6 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1154 DUP2 PUSH2 0x113F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x0 DUP7 ADD MSTORE PUSH2 0x1177 DUP3 DUP3 PUSH2 0xFEA JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x1191 DUP3 DUP3 PUSH2 0x1059 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x11AB DUP3 DUP3 PUSH2 0x1106 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x11C0 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x114B JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x11E0 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0xF2B JUMP JUMPDEST PUSH2 0x11ED PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0xD74 JUMP JUMPDEST PUSH2 0x11FA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xD74 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x120C DUP2 DUP5 PUSH2 0x115A JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1226 DUP2 PUSH2 0xBCE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1242 JUMPI PUSH2 0x1241 PUSH2 0x9E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1250 DUP5 DUP3 DUP6 ADD PUSH2 0x1217 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1262 DUP2 PUSH2 0x113F JUMP JUMPDEST DUP2 EQ PUSH2 0x126D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x127F DUP2 PUSH2 0x1259 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x129B JUMPI PUSH2 0x129A PUSH2 0x9E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x12A9 DUP5 DUP3 DUP6 ADD PUSH2 0x1270 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x131F PUSH1 0x2A DUP4 PUSH2 0x12B2 JUMP JUMPDEST SWAP2 POP PUSH2 0x132A DUP3 PUSH2 0x12C3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x134E DUP2 PUSH2 0x1312 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x136A PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xD74 JUMP JUMPDEST PUSH2 0x1377 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xD74 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13B8 DUP3 PUSH2 0xBC4 JUMP JUMPDEST SWAP2 POP PUSH2 0x13C3 DUP4 PUSH2 0xBC4 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x13F8 JUMPI PUSH2 0x13F7 PUSH2 0x137E JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1418 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xD74 JUMP JUMPDEST PUSH2 0x1425 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDCD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1488 PUSH1 0x26 DUP4 PUSH2 0x12B2 JUMP JUMPDEST SWAP2 POP PUSH2 0x1493 DUP3 PUSH2 0x142C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14B7 DUP2 PUSH2 0x147B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14F4 PUSH1 0x1D DUP4 PUSH2 0x12B2 JUMP JUMPDEST SWAP2 POP PUSH2 0x14FF DUP3 PUSH2 0x14BE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1523 DUP2 PUSH2 0x14E7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1540 DUP3 PUSH2 0x10B7 JUMP JUMPDEST PUSH2 0x154A DUP2 DUP6 PUSH2 0x152A JUMP JUMPDEST SWAP4 POP PUSH2 0x155A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x10D3 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1572 DUP3 DUP5 PUSH2 0x1535 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1593 DUP3 PUSH2 0x157D JUMP JUMPDEST PUSH2 0x159D DUP2 DUP6 PUSH2 0x12B2 JUMP JUMPDEST SWAP4 POP PUSH2 0x15AD DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x10D3 JUMP JUMPDEST PUSH2 0x15B6 DUP2 PUSH2 0x9F6 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x15DB DUP2 DUP5 PUSH2 0x1588 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD XOR SWAP8 SWAP8 0xD4 0xB7 JUMP 0xD9 0xDA SWAP10 DUP12 COINBASE 0xEE 0xAD 0x22 PUSH32 0x9F43A87AF3EDC622510E453B2A100CBD64736F6C634300080D00330000000000 ",
							"sourceMap": "289:3006:7:-:0;;;904:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;957:9;946:20;;;;;;;;;;904:70;289:3006;;88:117:14;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;289:3006:7:-;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_approveIfNeeded_1546": {
									"entryPoint": 1694,
									"id": 1546,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_callOptionalReturn_1078": {
									"entryPoint": 1221,
									"id": 1078,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_depositLPToVault_1505": {
									"entryPoint": 940,
									"id": 1505,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_joinPool_1655": {
									"entryPoint": 469,
									"id": 1655,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@balVault_1376": {
									"entryPoint": 160,
									"id": 1376,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@functionCallWithValue_1238": {
									"entryPoint": 2069,
									"id": 1238,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_1168": {
									"entryPoint": 2045,
									"id": 1168,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@isContract_1097": {
									"entryPoint": 2345,
									"id": 1097,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@routeDeposit_1410": {
									"entryPoint": 156,
									"id": 1410,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@safeIncreaseAllowance_992": {
									"entryPoint": 1420,
									"id": 992,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_912": {
									"entryPoint": 332,
									"id": 912,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_886": {
									"entryPoint": 1911,
									"id": 886,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@singleSideDeposit_1464": {
									"entryPoint": 196,
									"id": 1464,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@verifyCallResult_1321": {
									"entryPoint": 2380,
									"id": 1321,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_available_length_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr": {
									"entryPoint": 2861,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 3143,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr": {
									"entryPoint": 2966,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 4720,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes32": {
									"entryPoint": 3099,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_contract$_IAsset_$1660": {
									"entryPoint": 2840,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_struct$_DepositParams_$1391_memory_ptr": {
									"entryPoint": 3164,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 3045,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 4631,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 4741,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_struct$_DepositParams_$1391_memory_ptrt_uint256": {
									"entryPoint": 3352,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 4652,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encodeUpdatedPos_t_contract$_IAsset_$1660_to_t_address": {
									"entryPoint": 4037,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encodeUpdatedPos_t_uint256_to_t_uint256": {
									"entryPoint": 3690,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 3444,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr": {
									"entryPoint": 4074,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 4185,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
									"entryPoint": 3727,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_bool_to_t_bool": {
									"entryPoint": 4427,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_fromStack": {
									"entryPoint": 3883,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr": {
									"entryPoint": 4358,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 5429,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_contract$_IAsset_$1660_to_t_address": {
									"entryPoint": 4022,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5512,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5243,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 5351,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4882,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_struct$_JoinPoolRequest_$1931_memory_ptr_to_t_struct$_JoinPoolRequest_$1931_memory_ptr_fromStack": {
									"entryPoint": 4442,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256": {
									"entryPoint": 3675,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 3533,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 3616,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 5478,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 3459,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": 4949,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 3548,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 5123,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_address_t_address_t_struct$_JoinPoolRequest_$1931_memory_ptr__to_t_bytes32_t_address_t_address_t_struct$_JoinPoolRequest_$1931_memory_ptr__fromStack_reversed": {
									"entryPoint": 4555,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5569,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5278,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5386,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4917,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8_t_array$_t_uint256_$dyn_memory_ptr_t_uint256__to_t_uint8_t_array$_t_uint256_$dyn_memory_ptr_t_uint256__fromStack_reversed": {
									"entryPoint": 3821,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 2663,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 2525,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr": {
									"entryPoint": 2700,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_dataslot_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr": {
									"entryPoint": 3926,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 3659,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr": {
									"entryPoint": 3898,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 3631,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 4279,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 5501,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_nextElement_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr": {
									"entryPoint": 4061,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 3714,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr": {
									"entryPoint": 3909,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 4168,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
									"entryPoint": 3642,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr": {
									"entryPoint": 4290,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 5418,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 4786,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 5037,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 2781,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 4415,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 3066,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_contract$_IAsset_$1660": {
									"entryPoint": 2799,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 2749,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 3012,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 3603,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_IAsset_$1660_to_t_address": {
									"entryPoint": 4004,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 3986,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 3952,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 4307,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"finalize_allocation": {
									"entryPoint": 2614,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"identity": {
									"entryPoint": 3942,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 4990,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 3486,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 2567,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 2695,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f": {
									"entryPoint": 2545,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421": {
									"entryPoint": 2690,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
									"entryPoint": 2744,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 2540,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 2535,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 2550,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c": {
									"entryPoint": 5164,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
									"entryPoint": 5310,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd": {
									"entryPoint": 4803,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 3120,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 4697,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes32": {
									"entryPoint": 3076,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_contract$_IAsset_$1660": {
									"entryPoint": 2817,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 3022,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:24142:14",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:14"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:14"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:14",
														"type": ""
													}
												],
												"src": "7:75:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:14"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:14"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "423:28:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "440:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "443:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "433:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "433:12:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "433:12:14"
														}
													]
												},
												"name": "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
												"nodeType": "YulFunctionDefinition",
												"src": "334:117:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "505:54:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "515:38:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "533:5:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "540:2:14",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "529:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "529:14:14"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "549:2:14",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "545:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "545:7:14"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "525:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "525:28:14"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "515:6:14"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "488:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "498:6:14",
														"type": ""
													}
												],
												"src": "457:102:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "593:152:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "610:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "613:77:14",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "603:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "603:88:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "603:88:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "707:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "710:4:14",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "700:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "700:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "700:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "731:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "734:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "724:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "724:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "724:15:14"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "565:180:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "794:238:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "804:58:14",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "826:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "856:4:14"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "834:21:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "834:27:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "822:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "822:40:14"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "808:10:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "973:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "975:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "975:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "975:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "916:10:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "928:18:14",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "913:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "913:34:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "952:10:14"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "964:6:14"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "949:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "949:22:14"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "910:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "910:62:14"
															},
															"nodeType": "YulIf",
															"src": "907:88:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1011:2:14",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "1015:10:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1004:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1004:22:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1004:22:14"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "780:6:14",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "788:4:14",
														"type": ""
													}
												],
												"src": "751:281:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1079:88:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1089:30:14",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "1099:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1099:20:14"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1089:6:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1148:6:14"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "1156:4:14"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "1128:19:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1128:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1128:33:14"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1063:4:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1072:6:14",
														"type": ""
													}
												],
												"src": "1038:129:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1262:28:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1279:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1282:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1272:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1272:12:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1272:12:14"
														}
													]
												},
												"name": "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
												"nodeType": "YulFunctionDefinition",
												"src": "1173:117:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1385:28:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1402:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1405:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1395:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1395:12:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1395:12:14"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "1296:117:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1516:229:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1621:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1623:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1623:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1623:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1593:6:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1601:18:14",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1590:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1590:30:14"
															},
															"nodeType": "YulIf",
															"src": "1587:56:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1653:25:14",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1665:6:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1673:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1661:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1661:17:14"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1653:4:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1715:23:14",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "1727:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1733:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1723:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1723:15:14"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1715:4:14"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1500:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1511:4:14",
														"type": ""
													}
												],
												"src": "1419:326:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1840:28:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1857:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1860:1:14",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1850:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1850:12:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1850:12:14"
														}
													]
												},
												"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
												"nodeType": "YulFunctionDefinition",
												"src": "1751:117:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1919:81:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1929:65:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1944:5:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1951:42:14",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1940:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1940:54:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1929:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1901:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1911:7:14",
														"type": ""
													}
												],
												"src": "1874:126:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2051:51:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2061:35:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2090:5:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "2072:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2072:24:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2061:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2033:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2043:7:14",
														"type": ""
													}
												],
												"src": "2006:96:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2168:51:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2178:35:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2207:5:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2189:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2189:24:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2178:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_contract$_IAsset_$1660",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2150:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2160:7:14",
														"type": ""
													}
												],
												"src": "2108:111:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2283:94:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2355:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2364:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2367:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2357:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2357:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2357:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2306:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2346:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_contract$_IAsset_$1660",
																					"nodeType": "YulIdentifier",
																					"src": "2313:32:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2313:39:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2303:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2303:50:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2296:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2296:58:14"
															},
															"nodeType": "YulIf",
															"src": "2293:78:14"
														}
													]
												},
												"name": "validator_revert_t_contract$_IAsset_$1660",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2276:5:14",
														"type": ""
													}
												],
												"src": "2225:152:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2450:102:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2460:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2482:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2469:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2469:20:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2460:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2540:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_contract$_IAsset_$1660",
																	"nodeType": "YulIdentifier",
																	"src": "2498:41:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2498:48:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2498:48:14"
														}
													]
												},
												"name": "abi_decode_t_contract$_IAsset_$1660",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2428:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2436:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2444:5:14",
														"type": ""
													}
												],
												"src": "2383:169:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2700:638:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2710:105:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2807:6:14"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "2735:71:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2735:79:14"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2719:15:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2719:96:14"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "2710:5:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2824:16:14",
															"value": {
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "2835:5:14"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "2828:3:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "2857:5:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2864:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2850:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2850:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2850:21:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2880:23:14",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "2891:5:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2898:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2887:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2887:16:14"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "2880:3:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2913:44:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2931:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2943:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2951:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2939:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2939:17:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2927:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2927:30:14"
															},
															"variables": [
																{
																	"name": "srcEnd",
																	"nodeType": "YulTypedName",
																	"src": "2917:6:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2985:103:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
																				"nodeType": "YulIdentifier",
																				"src": "2999:77:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2999:79:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2999:79:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2972:6:14"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "2980:3:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2969:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2969:15:14"
															},
															"nodeType": "YulIf",
															"src": "2966:122:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3173:159:14",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "3188:21:14",
																		"value": {
																			"name": "src",
																			"nodeType": "YulIdentifier",
																			"src": "3206:3:14"
																		},
																		"variables": [
																			{
																				"name": "elementPos",
																				"nodeType": "YulTypedName",
																				"src": "3192:10:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "3230:3:14"
																				},
																				{
																					"arguments": [
																						{
																							"name": "elementPos",
																							"nodeType": "YulIdentifier",
																							"src": "3271:10:14"
																						},
																						{
																							"name": "end",
																							"nodeType": "YulIdentifier",
																							"src": "3283:3:14"
																						}
																					],
																					"functionName": {
																						"name": "abi_decode_t_contract$_IAsset_$1660",
																						"nodeType": "YulIdentifier",
																						"src": "3235:35:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3235:52:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3223:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3223:65:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3223:65:14"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "3301:21:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "3312:3:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3317:4:14",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "3308:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3308:14:14"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "3301:3:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "3126:3:14"
																	},
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3131:6:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3123:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3123:15:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "3139:25:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3141:21:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "3152:3:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3157:4:14",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "3148:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3148:14:14"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "3141:3:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "3101:21:14",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "3103:17:14",
																		"value": {
																			"name": "offset",
																			"nodeType": "YulIdentifier",
																			"src": "3114:6:14"
																		},
																		"variables": [
																			{
																				"name": "src",
																				"nodeType": "YulTypedName",
																				"src": "3107:3:14",
																				"type": ""
																			}
																		]
																	}
																]
															},
															"src": "3097:235:14"
														}
													]
												},
												"name": "abi_decode_available_length_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2670:6:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2678:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2686:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2694:5:14",
														"type": ""
													}
												],
												"src": "2583:755:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3461:308:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3510:83:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "3512:77:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3512:79:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3512:79:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3489:6:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3497:4:14",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3485:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3485:17:14"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "3504:3:14"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3481:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3481:27:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3474:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3474:35:14"
															},
															"nodeType": "YulIf",
															"src": "3471:122:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3602:34:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3629:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3616:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3616:20:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3606:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3645:118:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3736:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3744:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3732:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3732:17:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3751:6:14"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "3759:3:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "3654:77:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3654:109:14"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "3645:5:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3439:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3447:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "3455:5:14",
														"type": ""
													}
												],
												"src": "3369:400:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3820:32:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3830:16:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3841:5:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3830:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3802:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3812:7:14",
														"type": ""
													}
												],
												"src": "3775:77:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3901:79:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3958:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3967:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3970:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3960:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3960:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3960:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3924:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3949:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "3931:17:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3931:24:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3921:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3921:35:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3914:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3914:43:14"
															},
															"nodeType": "YulIf",
															"src": "3911:63:14"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3894:5:14",
														"type": ""
													}
												],
												"src": "3858:122:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4038:87:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4048:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4070:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4057:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4057:20:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4048:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4113:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4086:26:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4086:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4086:33:14"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4016:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4024:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4032:5:14",
														"type": ""
													}
												],
												"src": "3986:139:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4176:32:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4186:16:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "4197:5:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "4186:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4158:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "4168:7:14",
														"type": ""
													}
												],
												"src": "4131:77:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4257:79:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4314:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4323:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4326:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4316:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4316:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4316:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4280:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4305:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes32",
																					"nodeType": "YulIdentifier",
																					"src": "4287:17:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4287:24:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4277:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4277:35:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4270:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4270:43:14"
															},
															"nodeType": "YulIf",
															"src": "4267:63:14"
														}
													]
												},
												"name": "validator_revert_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4250:5:14",
														"type": ""
													}
												],
												"src": "4214:122:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4394:87:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4404:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4426:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4413:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4413:20:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4404:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4469:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes32",
																	"nodeType": "YulIdentifier",
																	"src": "4442:26:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4442:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4442:33:14"
														}
													]
												},
												"name": "abi_decode_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4372:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4380:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4388:5:14",
														"type": ""
													}
												],
												"src": "4342:139:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4530:79:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4587:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4596:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4599:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4589:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4589:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4589:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4553:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4578:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "4560:17:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4560:24:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4550:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4550:35:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4543:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4543:43:14"
															},
															"nodeType": "YulIf",
															"src": "4540:63:14"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4523:5:14",
														"type": ""
													}
												],
												"src": "4487:122:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4667:87:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4677:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4699:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4686:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4686:20:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4677:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4742:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "4715:26:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4715:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4715:33:14"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4645:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4653:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4661:5:14",
														"type": ""
													}
												],
												"src": "4615:139:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4889:1376:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4933:83:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
																				"nodeType": "YulIdentifier",
																				"src": "4935:77:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4935:79:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4935:79:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "4910:3:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4915:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4906:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4906:19:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4927:4:14",
																		"type": "",
																		"value": "0xc0"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4902:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4902:30:14"
															},
															"nodeType": "YulIf",
															"src": "4899:117:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5025:30:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5050:4:14",
																		"type": "",
																		"value": "0xc0"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5034:15:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5034:21:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5025:5:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5065:357:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5107:45:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5138:9:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5149:1:14",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5134:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5134:17:14"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "5121:12:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5121:31:14"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5111:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "5199:83:14",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
																						"nodeType": "YulIdentifier",
																						"src": "5201:77:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5201:79:14"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "5201:79:14"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "5171:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5179:18:14",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5168:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5168:30:14"
																	},
																	"nodeType": "YulIf",
																	"src": "5165:117:14"
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5307:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5314:4:14",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5303:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5303:16:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "headStart",
																								"nodeType": "YulIdentifier",
																								"src": "5386:9:14"
																							},
																							{
																								"name": "offset",
																								"nodeType": "YulIdentifier",
																								"src": "5397:6:14"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "5382:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5382:22:14"
																					},
																					{
																						"name": "end",
																						"nodeType": "YulIdentifier",
																						"src": "5406:3:14"
																					}
																				],
																				"functionName": {
																					"name": "abi_decode_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
																					"nodeType": "YulIdentifier",
																					"src": "5321:60:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5321:89:14"
																			}
																		],
																		"functionName": {
																			"name": "mstore",
																			"nodeType": "YulIdentifier",
																			"src": "5296:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5296:115:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "5296:115:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5432:164:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5480:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5494:2:14",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5484:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5521:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5528:4:14",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5517:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5517:16:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "headStart",
																								"nodeType": "YulIdentifier",
																								"src": "5560:9:14"
																							},
																							{
																								"name": "offset",
																								"nodeType": "YulIdentifier",
																								"src": "5571:6:14"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "5556:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5556:22:14"
																					},
																					{
																						"name": "end",
																						"nodeType": "YulIdentifier",
																						"src": "5580:3:14"
																					}
																				],
																				"functionName": {
																					"name": "abi_decode_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "5535:20:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5535:49:14"
																			}
																		],
																		"functionName": {
																			"name": "mstore",
																			"nodeType": "YulIdentifier",
																			"src": "5510:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5510:75:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "5510:75:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5606:158:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5648:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5662:2:14",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5652:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5689:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5696:4:14",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5685:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5685:16:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "headStart",
																								"nodeType": "YulIdentifier",
																								"src": "5728:9:14"
																							},
																							{
																								"name": "offset",
																								"nodeType": "YulIdentifier",
																								"src": "5739:6:14"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "5724:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5724:22:14"
																					},
																					{
																						"name": "end",
																						"nodeType": "YulIdentifier",
																						"src": "5748:3:14"
																					}
																				],
																				"functionName": {
																					"name": "abi_decode_t_bytes32",
																					"nodeType": "YulIdentifier",
																					"src": "5703:20:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5703:49:14"
																			}
																		],
																		"functionName": {
																			"name": "mstore",
																			"nodeType": "YulIdentifier",
																			"src": "5678:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5678:75:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "5678:75:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5774:154:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5812:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5826:2:14",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5816:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5853:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5860:4:14",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5849:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5849:16:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "headStart",
																								"nodeType": "YulIdentifier",
																								"src": "5892:9:14"
																							},
																							{
																								"name": "offset",
																								"nodeType": "YulIdentifier",
																								"src": "5903:6:14"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "5888:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5888:22:14"
																					},
																					{
																						"name": "end",
																						"nodeType": "YulIdentifier",
																						"src": "5912:3:14"
																					}
																				],
																				"functionName": {
																					"name": "abi_decode_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "5867:20:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5867:49:14"
																			}
																		],
																		"functionName": {
																			"name": "mstore",
																			"nodeType": "YulIdentifier",
																			"src": "5842:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5842:75:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "5842:75:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5938:153:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5974:17:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5988:3:14",
																		"type": "",
																		"value": "128"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5978:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6016:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6023:4:14",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6012:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6012:16:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "headStart",
																								"nodeType": "YulIdentifier",
																								"src": "6055:9:14"
																							},
																							{
																								"name": "offset",
																								"nodeType": "YulIdentifier",
																								"src": "6066:6:14"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "6051:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6051:22:14"
																					},
																					{
																						"name": "end",
																						"nodeType": "YulIdentifier",
																						"src": "6075:3:14"
																					}
																				],
																				"functionName": {
																					"name": "abi_decode_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "6030:20:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6030:49:14"
																			}
																		],
																		"functionName": {
																			"name": "mstore",
																			"nodeType": "YulIdentifier",
																			"src": "6005:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6005:75:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "6005:75:14"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6101:157:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6141:17:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6155:3:14",
																		"type": "",
																		"value": "160"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6145:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6183:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6190:4:14",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6179:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6179:16:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "headStart",
																								"nodeType": "YulIdentifier",
																								"src": "6222:9:14"
																							},
																							{
																								"name": "offset",
																								"nodeType": "YulIdentifier",
																								"src": "6233:6:14"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "6218:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6218:22:14"
																					},
																					{
																						"name": "end",
																						"nodeType": "YulIdentifier",
																						"src": "6242:3:14"
																					}
																				],
																				"functionName": {
																					"name": "abi_decode_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "6197:20:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6197:49:14"
																			}
																		],
																		"functionName": {
																			"name": "mstore",
																			"nodeType": "YulIdentifier",
																			"src": "6172:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6172:75:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "6172:75:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_struct$_DepositParams_$1391_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4864:9:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4875:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4883:5:14",
														"type": ""
													}
												],
												"src": "4803:1462:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6385:582:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6431:83:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6433:77:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6433:79:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6433:79:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6406:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6415:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6402:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6402:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6427:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6398:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6398:32:14"
															},
															"nodeType": "YulIf",
															"src": "6395:119:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "6524:308:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6539:45:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6570:9:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6581:1:14",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6566:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6566:17:14"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "6553:12:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6553:31:14"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6543:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "6631:83:14",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "6633:77:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6633:79:14"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "6633:79:14"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "6603:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6611:18:14",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "6600:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6600:30:14"
																	},
																	"nodeType": "YulIf",
																	"src": "6597:117:14"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6728:94:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6794:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6805:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6790:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6790:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6814:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_struct$_DepositParams_$1391_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "6738:51:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6738:84:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6728:6:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6842:118:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6857:16:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6871:2:14",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6861:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6887:63:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6922:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6933:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6918:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6918:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6942:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "6897:20:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6897:53:14"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "6887:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_struct$_DepositParams_$1391_memory_ptrt_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6347:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6358:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6370:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6378:6:14",
														"type": ""
													}
												],
												"src": "6271:696:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7038:53:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7055:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7078:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "7060:17:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7060:24:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7048:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7048:37:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7048:37:14"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7026:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7033:3:14",
														"type": ""
													}
												],
												"src": "6973:118:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7195:124:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7205:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7217:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7228:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7213:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7213:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7205:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7285:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7298:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7309:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7294:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7294:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7241:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7241:71:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7241:71:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7167:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7179:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7190:4:14",
														"type": ""
													}
												],
												"src": "7097:222:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7353:152:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7370:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7373:77:14",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7363:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7363:88:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7363:88:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7467:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7470:4:14",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7460:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7460:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7460:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7491:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7494:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7484:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7484:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7484:15:14"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "7325:180:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7576:53:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7593:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7616:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "7598:17:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7598:24:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7586:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7586:37:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7586:37:14"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7564:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7571:3:14",
														"type": ""
													}
												],
												"src": "7511:118:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7789:288:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7799:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7811:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7822:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7807:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7807:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7799:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7879:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7892:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7903:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7888:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7888:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7835:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7835:71:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7835:71:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "7960:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7973:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7984:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7969:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7969:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7916:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7916:72:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7916:72:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "8042:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8055:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8066:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8051:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8051:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7998:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7998:72:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7998:72:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7745:9:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7757:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7765:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7773:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7784:4:14",
														"type": ""
													}
												],
												"src": "7635:442:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8126:43:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8136:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8151:5:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8158:4:14",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "8147:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8147:16:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "8136:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8108:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "8118:7:14",
														"type": ""
													}
												],
												"src": "8083:86:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8236:51:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8253:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "8274:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nodeType": "YulIdentifier",
																			"src": "8258:15:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8258:22:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8246:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8246:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8246:35:14"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8224:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8231:3:14",
														"type": ""
													}
												],
												"src": "8175:112:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8367:40:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8378:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8394:5:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8388:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8388:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "8378:6:14"
																}
															]
														}
													]
												},
												"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8350:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8360:6:14",
														"type": ""
													}
												],
												"src": "8293:114:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8524:73:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8541:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8546:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8534:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8534:19:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8534:19:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8562:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8581:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8586:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8577:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8577:14:14"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "8562:11:14"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8496:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8501:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "8512:11:14",
														"type": ""
													}
												],
												"src": "8413:184:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8675:60:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8685:11:14",
															"value": {
																"name": "ptr",
																"nodeType": "YulIdentifier",
																"src": "8693:3:14"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "8685:4:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8706:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "8718:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8723:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8714:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8714:14:14"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "8706:4:14"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "8662:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "8670:4:14",
														"type": ""
													}
												],
												"src": "8603:132:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8796:53:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8813:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "8836:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "8818:17:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8818:24:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8806:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8806:37:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8806:37:14"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8784:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8791:3:14",
														"type": ""
													}
												],
												"src": "8741:108:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8935:99:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8979:6:14"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8987:3:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8945:33:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8945:46:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8945:46:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9000:28:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9018:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9023:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9014:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9014:14:14"
															},
															"variableNames": [
																{
																	"name": "updatedPos",
																	"nodeType": "YulIdentifier",
																	"src": "9000:10:14"
																}
															]
														}
													]
												},
												"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8908:6:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8916:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updatedPos",
														"nodeType": "YulTypedName",
														"src": "8924:10:14",
														"type": ""
													}
												],
												"src": "8855:179:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9115:38:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9125:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "9137:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9142:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9133:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9133:14:14"
															},
															"variableNames": [
																{
																	"name": "next",
																	"nodeType": "YulIdentifier",
																	"src": "9125:4:14"
																}
															]
														}
													]
												},
												"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "9102:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "next",
														"nodeType": "YulTypedName",
														"src": "9110:4:14",
														"type": ""
													}
												],
												"src": "9040:113:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9313:608:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9323:68:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9385:5:14"
																	}
																],
																"functionName": {
																	"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "9337:47:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9337:54:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "9327:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9400:93:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9481:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9486:6:14"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9407:73:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9407:86:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "9400:3:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9502:71:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9567:5:14"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "9517:49:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9517:56:14"
															},
															"variables": [
																{
																	"name": "baseRef",
																	"nodeType": "YulTypedName",
																	"src": "9506:7:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9582:21:14",
															"value": {
																"name": "baseRef",
																"nodeType": "YulIdentifier",
																"src": "9596:7:14"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "9586:6:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9672:224:14",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9686:34:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "9713:6:14"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9707:5:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9707:13:14"
																		},
																		"variables": [
																			{
																				"name": "elementValue0",
																				"nodeType": "YulTypedName",
																				"src": "9690:13:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "9733:70:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "elementValue0",
																					"nodeType": "YulIdentifier",
																					"src": "9784:13:14"
																				},
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "9799:3:14"
																				}
																			],
																			"functionName": {
																				"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
																				"nodeType": "YulIdentifier",
																				"src": "9740:43:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9740:63:14"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "9733:3:14"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "9816:70:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "9879:6:14"
																				}
																			],
																			"functionName": {
																				"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
																				"nodeType": "YulIdentifier",
																				"src": "9826:52:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9826:60:14"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "9816:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "9634:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9637:6:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "9631:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9631:13:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "9645:18:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "9647:14:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "9656:1:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9659:1:14",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "9652:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9652:9:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "9647:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "9616:14:14",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9618:10:14",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "9627:1:14",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "i",
																				"nodeType": "YulTypedName",
																				"src": "9622:1:14",
																				"type": ""
																			}
																		]
																	}
																]
															},
															"src": "9612:284:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9905:10:14",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "9912:3:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9905:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9292:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9299:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9308:3:14",
														"type": ""
													}
												],
												"src": "9189:732:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10127:385:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10137:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10149:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10160:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10145:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10145:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10137:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10213:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10226:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10237:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10222:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10222:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10173:39:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10173:67:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10173:67:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10261:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10272:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10257:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10257:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "10281:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10287:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10277:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10277:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10250:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10250:48:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10250:48:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10307:116:14",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "10409:6:14"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10418:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10315:93:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10315:108:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10307:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "10477:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10490:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10501:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10486:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10486:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10433:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10433:72:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10433:72:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8_t_array$_t_uint256_$dyn_memory_ptr_t_uint256__to_t_uint8_t_array$_t_uint256_$dyn_memory_ptr_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10083:9:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10095:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10103:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10111:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10122:4:14",
														"type": ""
													}
												],
												"src": "9927:585:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10583:53:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10600:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10623:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "10605:17:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10605:24:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10593:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10593:37:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10593:37:14"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10571:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10578:3:14",
														"type": ""
													}
												],
												"src": "10518:118:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10731:40:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10742:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10758:5:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10752:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10752:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "10742:6:14"
																}
															]
														}
													]
												},
												"name": "array_length_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10714:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10724:6:14",
														"type": ""
													}
												],
												"src": "10642:129:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10878:73:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10895:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10900:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10888:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10888:19:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10888:19:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10916:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10935:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10940:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10931:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10931:14:14"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "10916:11:14"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10850:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10855:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "10866:11:14",
														"type": ""
													}
												],
												"src": "10777:174:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11044:60:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11054:11:14",
															"value": {
																"name": "ptr",
																"nodeType": "YulIdentifier",
																"src": "11062:3:14"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "11054:4:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11075:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "11087:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11092:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11083:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11083:14:14"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "11075:4:14"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "11031:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "11039:4:14",
														"type": ""
													}
												],
												"src": "10957:147:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11142:28:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11152:12:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "11159:5:14"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "11152:3:14"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11128:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "11138:3:14",
														"type": ""
													}
												],
												"src": "11110:60:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11236:82:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11246:66:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "11304:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nodeType": "YulIdentifier",
																					"src": "11286:17:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11286:24:14"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "11277:8:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11277:34:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "11259:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11259:53:14"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "11246:9:14"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11216:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "11226:9:14",
														"type": ""
													}
												],
												"src": "11176:142:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11384:66:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11394:50:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11438:5:14"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "11407:30:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11407:37:14"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "11394:9:14"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11364:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "11374:9:14",
														"type": ""
													}
												],
												"src": "11324:126:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11531:66:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11541:50:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11585:5:14"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "11554:30:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11554:37:14"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "11541:9:14"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_IAsset_$1660_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11511:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "11521:9:14",
														"type": ""
													}
												],
												"src": "11456:141:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11673:81:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11690:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11741:5:14"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_IAsset_$1660_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "11695:45:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11695:52:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11683:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11683:65:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11683:65:14"
														}
													]
												},
												"name": "abi_encode_t_contract$_IAsset_$1660_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11661:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11668:3:14",
														"type": ""
													}
												],
												"src": "11603:151:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11855:114:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11914:6:14"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11922:3:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_IAsset_$1660_to_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "11865:48:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11865:61:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11865:61:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11935:28:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11953:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11958:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11949:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11949:14:14"
															},
															"variableNames": [
																{
																	"name": "updatedPos",
																	"nodeType": "YulIdentifier",
																	"src": "11935:10:14"
																}
															]
														}
													]
												},
												"name": "abi_encodeUpdatedPos_t_contract$_IAsset_$1660_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11828:6:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11836:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updatedPos",
														"nodeType": "YulTypedName",
														"src": "11844:10:14",
														"type": ""
													}
												],
												"src": "11760:209:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12065:38:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12075:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "12087:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12092:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12083:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12083:14:14"
															},
															"variableNames": [
																{
																	"name": "next",
																	"nodeType": "YulIdentifier",
																	"src": "12075:4:14"
																}
															]
														}
													]
												},
												"name": "array_nextElement_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "12052:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "next",
														"nodeType": "YulTypedName",
														"src": "12060:4:14",
														"type": ""
													}
												],
												"src": "11975:128:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12276:658:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12286:83:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12363:5:14"
																	}
																],
																"functionName": {
																	"name": "array_length_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "12300:62:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12300:69:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "12290:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12378:83:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12449:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12454:6:14"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "12385:63:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12385:76:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "12378:3:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12470:86:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12550:5:14"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "12485:64:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12485:71:14"
															},
															"variables": [
																{
																	"name": "baseRef",
																	"nodeType": "YulTypedName",
																	"src": "12474:7:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12565:21:14",
															"value": {
																"name": "baseRef",
																"nodeType": "YulIdentifier",
																"src": "12579:7:14"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "12569:6:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12655:254:14",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "12669:34:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "12696:6:14"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "12690:5:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12690:13:14"
																		},
																		"variables": [
																			{
																				"name": "elementValue0",
																				"nodeType": "YulTypedName",
																				"src": "12673:13:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "12716:85:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "elementValue0",
																					"nodeType": "YulIdentifier",
																					"src": "12782:13:14"
																				},
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "12797:3:14"
																				}
																			],
																			"functionName": {
																				"name": "abi_encodeUpdatedPos_t_contract$_IAsset_$1660_to_t_address",
																				"nodeType": "YulIdentifier",
																				"src": "12723:58:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12723:78:14"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "12716:3:14"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "12814:85:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "12892:6:14"
																				}
																			],
																			"functionName": {
																				"name": "array_nextElement_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
																				"nodeType": "YulIdentifier",
																				"src": "12824:67:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12824:75:14"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12814:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "12617:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12620:6:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "12614:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12614:13:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "12628:18:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "12630:14:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "12639:1:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12642:1:14",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "12635:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12635:9:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "12630:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "12599:14:14",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "12601:10:14",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "12610:1:14",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "i",
																				"nodeType": "YulTypedName",
																				"src": "12605:1:14",
																				"type": ""
																			}
																		]
																	}
																]
															},
															"src": "12595:314:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12918:10:14",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "12925:3:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "12918:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12255:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "12262:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "12271:3:14",
														"type": ""
													}
												],
												"src": "12147:787:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13041:73:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13058:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13063:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13051:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13051:19:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13051:19:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13079:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13098:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13103:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13094:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13094:14:14"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "13079:11:14"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13013:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "13018:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "13029:11:14",
														"type": ""
													}
												],
												"src": "12940:174:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13264:598:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13274:68:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13336:5:14"
																	}
																],
																"functionName": {
																	"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "13288:47:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13288:54:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "13278:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13351:83:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13422:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13427:6:14"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "13358:63:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13358:76:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13351:3:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13443:71:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13508:5:14"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "13458:49:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13458:56:14"
															},
															"variables": [
																{
																	"name": "baseRef",
																	"nodeType": "YulTypedName",
																	"src": "13447:7:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13523:21:14",
															"value": {
																"name": "baseRef",
																"nodeType": "YulIdentifier",
																"src": "13537:7:14"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "13527:6:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13613:224:14",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "13627:34:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "13654:6:14"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "13648:5:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13648:13:14"
																		},
																		"variables": [
																			{
																				"name": "elementValue0",
																				"nodeType": "YulTypedName",
																				"src": "13631:13:14",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "13674:70:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "elementValue0",
																					"nodeType": "YulIdentifier",
																					"src": "13725:13:14"
																				},
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "13740:3:14"
																				}
																			],
																			"functionName": {
																				"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
																				"nodeType": "YulIdentifier",
																				"src": "13681:43:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13681:63:14"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "13674:3:14"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "13757:70:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "13820:6:14"
																				}
																			],
																			"functionName": {
																				"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
																				"nodeType": "YulIdentifier",
																				"src": "13767:52:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13767:60:14"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13757:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "13575:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13578:6:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "13572:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13572:13:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "13586:18:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "13588:14:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "13597:1:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13600:1:14",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "13593:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13593:9:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "13588:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "13557:14:14",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "13559:10:14",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "13568:1:14",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "i",
																				"nodeType": "YulTypedName",
																				"src": "13563:1:14",
																				"type": ""
																			}
																		]
																	}
																]
															},
															"src": "13553:284:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13846:10:14",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "13853:3:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13846:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13243:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13250:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "13259:3:14",
														"type": ""
													}
												],
												"src": "13150:712:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13926:40:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13937:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13953:5:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "13947:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13947:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "13937:6:14"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13909:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "13919:6:14",
														"type": ""
													}
												],
												"src": "13868:98:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14057:73:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14074:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14079:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14067:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14067:19:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14067:19:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14095:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14114:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14119:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14110:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14110:14:14"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "14095:11:14"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14029:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "14034:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "14045:11:14",
														"type": ""
													}
												],
												"src": "13972:158:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14185:258:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14195:10:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "14204:1:14",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "14199:1:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14264:63:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "14289:3:14"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "14294:1:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "14285:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "14285:11:14"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "14308:3:14"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "14313:1:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "14304:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "14304:11:14"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "14298:5:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "14298:18:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "14278:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14278:39:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14278:39:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "14225:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14228:6:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "14222:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14222:13:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "14236:19:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "14238:15:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "14247:1:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14250:2:14",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "14243:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14243:10:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "14238:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "14218:3:14",
																"statements": []
															},
															"src": "14214:113:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14361:76:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "14411:3:14"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "14416:6:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "14407:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "14407:16:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14425:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "14400:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14400:27:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14400:27:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "14342:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14345:6:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "14339:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14339:13:14"
															},
															"nodeType": "YulIf",
															"src": "14336:101:14"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "14167:3:14",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "14172:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "14177:6:14",
														"type": ""
													}
												],
												"src": "14136:307:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14529:260:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14539:52:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14585:5:14"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "14553:31:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14553:38:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "14543:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "14600:67:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14655:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14660:6:14"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "14607:47:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14607:60:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "14600:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "14702:5:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14709:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14698:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14698:16:14"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14716:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14721:6:14"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "14676:21:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14676:52:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14676:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14737:46:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14748:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "14775:6:14"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "14753:21:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14753:29:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14744:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14744:39:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "14737:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14510:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14517:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14525:3:14",
														"type": ""
													}
												],
												"src": "14449:340:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14837:48:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14847:32:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "14872:5:14"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "14865:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14865:13:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14858:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14858:21:14"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "14847:7:14"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14819:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "14829:7:14",
														"type": ""
													}
												],
												"src": "14795:90:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14940:50:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14957:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "14977:5:14"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "14962:14:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14962:21:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14950:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14950:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14950:34:14"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14928:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14935:3:14",
														"type": ""
													}
												],
												"src": "14891:99:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15214:1068:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "15224:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15240:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15245:4:14",
																		"type": "",
																		"value": "0x80"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15236:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "15236:14:14"
															},
															"variables": [
																{
																	"name": "tail",
																	"nodeType": "YulTypedName",
																	"src": "15228:4:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "15260:282:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "15297:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "15327:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "15334:4:14",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "15323:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15323:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "15317:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15317:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "15301:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "15365:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "15370:4:14",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "15361:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15361:14:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "tail",
																						"nodeType": "YulIdentifier",
																						"src": "15381:4:14"
																					},
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "15387:3:14"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "15377:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15377:14:14"
																			}
																		],
																		"functionName": {
																			"name": "mstore",
																			"nodeType": "YulIdentifier",
																			"src": "15354:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15354:38:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "15354:38:14"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "15405:126:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "15512:12:14"
																			},
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "15526:4:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "15413:98:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15413:118:14"
																	},
																	"variableNames": [
																		{
																			"name": "tail",
																			"nodeType": "YulIdentifier",
																			"src": "15405:4:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "15552:273:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "15595:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "15625:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "15632:4:14",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "15621:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15621:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "15615:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15615:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "15599:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "15663:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "15668:4:14",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "15659:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15659:14:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "tail",
																						"nodeType": "YulIdentifier",
																						"src": "15679:4:14"
																					},
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "15685:3:14"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "15675:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15675:14:14"
																			}
																		],
																		"functionName": {
																			"name": "mstore",
																			"nodeType": "YulIdentifier",
																			"src": "15652:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15652:38:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "15652:38:14"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "15703:111:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "15795:12:14"
																			},
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "15809:4:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "15711:83:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15711:103:14"
																	},
																	"variableNames": [
																		{
																			"name": "tail",
																			"nodeType": "YulIdentifier",
																			"src": "15703:4:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "15835:237:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "15874:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "15904:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "15911:4:14",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "15900:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15900:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "15894:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15894:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "15878:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "15942:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "15947:4:14",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "15938:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15938:14:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "tail",
																						"nodeType": "YulIdentifier",
																						"src": "15958:4:14"
																					},
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "15964:3:14"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "15954:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "15954:14:14"
																			}
																		],
																		"functionName": {
																			"name": "mstore",
																			"nodeType": "YulIdentifier",
																			"src": "15931:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15931:38:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "15931:38:14"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "15982:79:14",
																	"value": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "16042:12:14"
																			},
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "16056:4:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "15990:51:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15990:71:14"
																	},
																	"variableNames": [
																		{
																			"name": "tail",
																			"nodeType": "YulIdentifier",
																			"src": "15982:4:14"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "16082:173:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "16132:43:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "16162:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "16169:4:14",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "16158:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "16158:16:14"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "16152:5:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16152:23:14"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "16136:12:14",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "16216:12:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "16234:3:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "16239:4:14",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "16230:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "16230:14:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_bool_to_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "16188:27:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16188:57:14"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "16188:57:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "16265:11:14",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "16272:4:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "16265:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_struct$_JoinPoolRequest_$1931_memory_ptr_to_t_struct$_JoinPoolRequest_$1931_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15193:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "15200:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "15209:3:14",
														"type": ""
													}
												],
												"src": "15074:1208:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16536:488:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16546:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "16558:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16569:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16554:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "16554:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16546:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "16627:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16640:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16651:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16636:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16636:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16583:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "16583:71:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16583:71:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "16708:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16721:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16732:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16717:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16717:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16664:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "16664:72:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16664:72:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "16790:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16803:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16814:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16799:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16799:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16746:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "16746:72:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16746:72:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16839:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16850:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16835:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16835:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "16859:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "16865:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "16855:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16855:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16828:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "16828:48:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16828:48:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16885:132:14",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "17003:6:14"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "17012:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_struct$_JoinPoolRequest_$1931_memory_ptr_to_t_struct$_JoinPoolRequest_$1931_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16893:109:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "16893:124:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "16885:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_struct$_JoinPoolRequest_$1931_memory_ptr__to_t_bytes32_t_address_t_address_t_struct$_JoinPoolRequest_$1931_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "16484:9:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "16496:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "16504:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "16512:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "16520:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "16531:4:14",
														"type": ""
													}
												],
												"src": "16288:736:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17093:80:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17103:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "17118:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "17112:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "17112:13:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "17103:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17161:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "17134:26:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "17134:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17134:33:14"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "17071:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "17079:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17087:5:14",
														"type": ""
													}
												],
												"src": "17030:143:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17256:274:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17302:83:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "17304:77:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17304:79:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17304:79:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "17277:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17286:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "17273:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17273:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17298:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "17269:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "17269:32:14"
															},
															"nodeType": "YulIf",
															"src": "17266:119:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "17395:128:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "17410:15:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17424:1:14",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "17414:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "17439:74:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "17485:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "17496:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "17481:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "17481:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "17505:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "17449:31:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17449:64:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "17439:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17226:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "17237:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "17249:6:14",
														"type": ""
													}
												],
												"src": "17179:351:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17576:76:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17630:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17639:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17642:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "17632:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17632:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17632:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "17599:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "17621:5:14"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "17606:14:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "17606:21:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "17596:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17596:32:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "17589:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "17589:40:14"
															},
															"nodeType": "YulIf",
															"src": "17586:60:14"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17569:5:14",
														"type": ""
													}
												],
												"src": "17536:116:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17718:77:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17728:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "17743:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "17737:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "17737:13:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "17728:5:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17783:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "17759:23:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "17759:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17759:30:14"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "17696:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "17704:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17712:5:14",
														"type": ""
													}
												],
												"src": "17658:137:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17875:271:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17921:83:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "17923:77:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17923:79:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17923:79:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "17896:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17905:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "17892:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17892:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17917:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "17888:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "17888:32:14"
															},
															"nodeType": "YulIf",
															"src": "17885:119:14"
														},
														{
															"nodeType": "YulBlock",
															"src": "18014:125:14",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "18029:15:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18043:1:14",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "18033:6:14",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "18058:71:14",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "18101:9:14"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "18112:6:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "18097:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "18097:22:14"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "18121:7:14"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "18068:28:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18068:61:14"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "18058:6:14"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17845:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "17856:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "17868:6:14",
														"type": ""
													}
												],
												"src": "17801:345:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18248:73:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "18265:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "18270:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18258:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "18258:19:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18258:19:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18286:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "18305:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18310:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18301:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "18301:14:14"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "18286:11:14"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "18220:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "18225:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "18236:11:14",
														"type": ""
													}
												],
												"src": "18152:169:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18433:123:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "18455:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18463:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18451:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18451:14:14"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "18467:34:14",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18444:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "18444:58:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18444:58:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "18523:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18531:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18519:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18519:15:14"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "18536:12:14",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "18512:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "18512:37:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18512:37:14"
														}
													]
												},
												"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "18425:6:14",
														"type": ""
													}
												],
												"src": "18327:229:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18708:220:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "18718:74:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "18784:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18789:2:14",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "18725:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "18725:67:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "18718:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "18890:3:14"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																	"nodeType": "YulIdentifier",
																	"src": "18801:88:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "18801:93:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "18801:93:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "18903:19:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "18914:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "18919:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "18910:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "18910:12:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "18903:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "18696:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "18704:3:14",
														"type": ""
													}
												],
												"src": "18562:366:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19105:248:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "19115:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19127:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19138:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19123:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "19123:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "19115:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19162:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19173:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19158:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19158:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "19181:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19187:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "19177:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19177:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19151:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "19151:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19151:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "19207:139:14",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "19341:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "19215:124:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "19215:131:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "19207:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "19085:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "19100:4:14",
														"type": ""
													}
												],
												"src": "18934:419:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19485:206:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "19495:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "19507:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19518:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "19503:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "19503:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "19495:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "19575:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19588:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19599:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19584:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19584:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "19531:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "19531:71:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19531:71:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "19656:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "19669:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "19680:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "19665:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "19665:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "19612:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "19612:72:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19612:72:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "19449:9:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "19461:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "19469:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "19480:4:14",
														"type": ""
													}
												],
												"src": "19359:332:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19725:152:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19742:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19745:77:14",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19735:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "19735:88:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19735:88:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19839:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19842:4:14",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "19832:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "19832:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19832:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19863:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "19866:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "19856:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "19856:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "19856:15:14"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "19697:180:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "19927:261:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "19937:25:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "19960:1:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "19942:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "19942:20:14"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "19937:1:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "19971:25:14",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "19994:1:14"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "19976:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "19976:20:14"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "19971:1:14"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "20134:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "20136:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "20136:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "20136:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "20055:1:14"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20062:66:14",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "20130:1:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "20058:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20058:74:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "20052:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "20052:81:14"
															},
															"nodeType": "YulIf",
															"src": "20049:107:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "20166:16:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "20177:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "20180:1:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "20173:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "20173:9:14"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "20166:3:14"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "19914:1:14",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "19917:1:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "19923:3:14",
														"type": ""
													}
												],
												"src": "19883:305:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20320:206:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "20330:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "20342:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20353:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "20338:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "20338:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "20330:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "20410:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "20423:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20434:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20419:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20419:17:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "20366:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "20366:71:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20366:71:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "20491:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "20504:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20515:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20500:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20500:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "20447:43:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "20447:72:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20447:72:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "20284:9:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "20296:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "20304:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "20315:4:14",
														"type": ""
													}
												],
												"src": "20194:332:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20638:119:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "20660:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20668:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20656:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20656:14:14"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20672:34:14",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20649:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "20649:58:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20649:58:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "20728:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "20736:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "20724:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "20724:15:14"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "20741:8:14",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "20717:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "20717:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "20717:33:14"
														}
													]
												},
												"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "20630:6:14",
														"type": ""
													}
												],
												"src": "20532:225:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "20909:220:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "20919:74:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "20985:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "20990:2:14",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "20926:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "20926:67:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "20919:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "21091:3:14"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																	"nodeType": "YulIdentifier",
																	"src": "21002:88:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "21002:93:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21002:93:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "21104:19:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "21115:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21120:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "21111:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "21111:12:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "21104:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "20897:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "20905:3:14",
														"type": ""
													}
												],
												"src": "20763:366:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21306:248:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "21316:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "21328:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21339:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "21324:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "21324:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "21316:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21363:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21374:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21359:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21359:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "21382:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "21388:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "21378:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21378:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21352:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "21352:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21352:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "21408:139:14",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "21542:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "21416:124:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "21416:131:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "21408:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "21286:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "21301:4:14",
														"type": ""
													}
												],
												"src": "21135:419:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21666:73:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "21688:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "21696:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "21684:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "21684:14:14"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "21700:31:14",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "21677:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "21677:55:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21677:55:14"
														}
													]
												},
												"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "21658:6:14",
														"type": ""
													}
												],
												"src": "21560:179:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "21891:220:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "21901:74:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "21967:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "21972:2:14",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "21908:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "21908:67:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "21901:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "22073:3:14"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																	"nodeType": "YulIdentifier",
																	"src": "21984:88:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "21984:93:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "21984:93:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "22086:19:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "22097:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22102:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "22093:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "22093:12:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "22086:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "21879:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "21887:3:14",
														"type": ""
													}
												],
												"src": "21745:366:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22288:248:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "22298:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "22310:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "22321:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "22306:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "22306:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "22298:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "22345:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "22356:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "22341:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22341:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "22364:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "22370:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "22360:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "22360:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "22334:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "22334:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22334:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "22390:139:14",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "22524:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "22398:124:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "22398:131:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "22390:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "22268:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "22283:4:14",
														"type": ""
													}
												],
												"src": "22117:419:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22655:34:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "22665:18:14",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "22680:3:14"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "22665:11:14"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "22627:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "22632:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "22643:11:14",
														"type": ""
													}
												],
												"src": "22542:147:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "22803:265:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "22813:52:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "22859:5:14"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "22827:31:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "22827:38:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "22817:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "22874:95:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "22957:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "22962:6:14"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "22881:75:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "22881:88:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "22874:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "23004:5:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23011:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23000:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23000:16:14"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23018:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "23023:6:14"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "22978:21:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "22978:52:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "22978:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "23039:23:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23050:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "23055:6:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23046:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "23046:16:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "23039:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "22784:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "22791:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "22799:3:14",
														"type": ""
													}
												],
												"src": "22695:373:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23208:137:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "23219:100:14",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "23306:6:14"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23315:3:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "23226:79:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "23226:93:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "23219:3:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "23329:10:14",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "23336:3:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "23329:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "23187:3:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "23193:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "23204:3:14",
														"type": ""
													}
												],
												"src": "23074:271:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23410:40:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "23421:22:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "23437:5:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "23431:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "23431:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "23421:6:14"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "23393:5:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "23403:6:14",
														"type": ""
													}
												],
												"src": "23351:99:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23548:272:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "23558:53:14",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "23605:5:14"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "23572:32:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "23572:39:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "23562:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "23620:78:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23686:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "23691:6:14"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "23627:58:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "23627:71:14"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "23620:3:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "23733:5:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "23740:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23729:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23729:16:14"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23747:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "23752:6:14"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "23707:21:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "23707:52:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23707:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "23768:46:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "23779:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "23806:6:14"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "23784:21:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23784:29:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23775:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "23775:39:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "23768:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "23529:5:14",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "23536:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "23544:3:14",
														"type": ""
													}
												],
												"src": "23456:364:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "23944:195:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "23954:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "23966:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "23977:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "23962:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "23962:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "23954:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "24001:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "24012:1:14",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "23997:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "23997:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "24020:4:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "24026:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "24016:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "24016:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "23990:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "23990:47:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "23990:47:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "24046:86:14",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "24118:6:14"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "24127:4:14"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "24054:63:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "24054:78:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "24046:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "23916:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "23928:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "23939:4:14",
														"type": ""
													}
												],
												"src": "23826:313:14"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function array_allocation_size_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_contract$_IAsset_$1660(value) -> cleaned {\n        cleaned := cleanup_t_address(value)\n    }\n\n    function validator_revert_t_contract$_IAsset_$1660(value) {\n        if iszero(eq(value, cleanup_t_contract$_IAsset_$1660(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_contract$_IAsset_$1660(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_contract$_IAsset_$1660(value)\n    }\n\n    // contract IAsset[]\n    function abi_decode_available_length_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_contract$_IAsset_$1660(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // contract IAsset[]\n    function abi_decode_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // struct SuperDepositor.DepositParams\n    function abi_decode_t_struct$_DepositParams_$1391_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0xc0) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0xc0)\n\n        {\n            // underlyings\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() }\n\n            mstore(add(value, 0x00), abi_decode_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr(add(headStart, offset), end))\n\n        }\n\n        {\n            // depositTokenIndex\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_uint256(add(headStart, offset), end))\n\n        }\n\n        {\n            // beetsPoolId\n\n            let offset := 64\n\n            mstore(add(value, 0x40), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // lpToken\n\n            let offset := 96\n\n            mstore(add(value, 0x60), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n        {\n            // vault\n\n            let offset := 128\n\n            mstore(add(value, 0x80), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n        {\n            // recipient\n\n            let offset := 160\n\n            mstore(add(value, 0xa0), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_DepositParams_$1391_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_struct$_DepositParams_$1391_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_uint8_t_array$_t_uint256_$dyn_memory_ptr_t_uint256__to_t_uint8_t_array$_t_uint256_$dyn_memory_ptr_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value1,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function array_length_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IAsset_$1660_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IAsset_$1660_to_t_address(value, pos) {\n        mstore(pos, convert_t_contract$_IAsset_$1660_to_t_address(value))\n    }\n\n    function abi_encodeUpdatedPos_t_contract$_IAsset_$1660_to_t_address(value0, pos) -> updatedPos {\n        abi_encode_t_contract$_IAsset_$1660_to_t_address(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // contract IAsset[] -> address[]\n    function abi_encode_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr(value, pos)  -> end  {\n        let length := array_length_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr(pos, length)\n        let baseRef := array_dataslot_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_contract$_IAsset_$1660_to_t_address(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    // struct IBeetVault.JoinPoolRequest -> struct IBeetVault.JoinPoolRequest\n    function abi_encode_t_struct$_JoinPoolRequest_$1931_memory_ptr_to_t_struct$_JoinPoolRequest_$1931_memory_ptr_fromStack(value, pos)  -> end  {\n        let tail := add(pos, 0x80)\n\n        {\n            // assets\n\n            let memberValue0 := mload(add(value, 0x00))\n\n            mstore(add(pos, 0x00), sub(tail, pos))\n            tail := abi_encode_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // maxAmountsIn\n\n            let memberValue0 := mload(add(value, 0x20))\n\n            mstore(add(pos, 0x20), sub(tail, pos))\n            tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // userData\n\n            let memberValue0 := mload(add(value, 0x40))\n\n            mstore(add(pos, 0x40), sub(tail, pos))\n            tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // fromInternalBalance\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0x60))\n        }\n\n        end := tail\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_struct$_JoinPoolRequest_$1931_memory_ptr__to_t_bytes32_t_address_t_address_t_struct$_JoinPoolRequest_$1931_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_struct$_JoinPoolRequest_$1931_memory_ptr_to_t_struct$_JoinPoolRequest_$1931_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1376": [
									{
										"length": 32,
										"start": 162
									},
									{
										"length": 32,
										"start": 688
									},
									{
										"length": 32,
										"start": 786
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100415760003560e01c806311ffbf3c1461004657806377aba213146100625780638114456314610080575b600080fd5b610060600480360381019061005b9190610d18565b61009c565b005b61006a6100a0565b6040516100779190610d83565b60405180910390f35b61009a60048036038101906100959190610d18565b6100c4565b005b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082600001518360200151815181106100e1576100e0610d9e565b5b602002602001015190506101183330848473ffffffffffffffffffffffffffffffffffffffff1661014c909392919063ffffffff16565b610130836000015183856020015186604001516101d5565b610147836060015184608001518560a001516103ac565b505050565b6101cf846323b872dd60e01b85858560405160240161016d93929190610ddc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506104c5565b50505050565b6000600190506000855167ffffffffffffffff8111156101f8576101f7610a07565b5b6040519080825280602002602001820160405280156102265781602001602082028036833780820191505090505b5090508481858151811061023d5761023c610d9e565b5b602002602001018181525050600060019050600083838360405160200161026693929190610eed565b604051602081830303815290604052905061027f6109b3565b88816000018190525083816020018190525081816040018190525060008160600190151590811515815250506103107f0000000000000000000000000000000000000000000000000000000000000000898b8a815181106102e3576102e2610d9e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661058c9092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b95cac28873030856040518563ffffffff1660e01b815260040161036f94939291906111cb565b600060405180830381600087803b15801561038957600080fd5b505af115801561039d573d6000803e3d6000fd5b50505050505050505050505050565b6103b6828461069e565b8173ffffffffffffffffffffffffffffffffffffffff1663de5f62686040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156103fe57600080fd5b505af1158015610412573d6000803e3d6000fd5b5050505060008290506104bf828273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104589190610d83565b602060405180830381865afa158015610475573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610499919061122c565b8373ffffffffffffffffffffffffffffffffffffffff166107779092919063ffffffff16565b50505050565b6000610527826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166107fd9092919063ffffffff16565b905060008151111561058757808060200190518101906105479190611285565b610586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057d90611335565b60405180910390fd5b5b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b81526004016105ca929190611355565b602060405180830381865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b919061122c565b61061591906113ad565b90506106988463095ea7b360e01b8584604051602401610636929190611403565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506104c5565b50505050565b600081905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b81526004016106e0929190611355565b602060405180830381865afa1580156106fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610721919061122c565b0361077257610771837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8373ffffffffffffffffffffffffffffffffffffffff1661058c9092919063ffffffff16565b5b505050565b6107f88363a9059cbb60e01b8484604051602401610796929190611403565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506104c5565b505050565b606061080c8484600085610815565b90509392505050565b60608247101561085a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108519061149e565b60405180910390fd5b61086385610929565b6108a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108999061150a565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516108cb9190611566565b60006040518083038185875af1925050503d8060008114610908576040519150601f19603f3d011682016040523d82523d6000602084013e61090d565b606091505b509150915061091d82828661094c565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561095c578290506109ac565b60008351111561096f5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a391906115c1565b60405180910390fd5b9392505050565b60405180608001604052806060815260200160608152602001606081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a3f826109f6565b810181811067ffffffffffffffff82111715610a5e57610a5d610a07565b5b80604052505050565b6000610a716109dd565b9050610a7d8282610a36565b919050565b600080fd5b600080fd5b600067ffffffffffffffff821115610aa757610aa6610a07565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae882610abd565b9050919050565b6000610afa82610add565b9050919050565b610b0a81610aef565b8114610b1557600080fd5b50565b600081359050610b2781610b01565b92915050565b6000610b40610b3b84610a8c565b610a67565b90508083825260208201905060208402830185811115610b6357610b62610ab8565b5b835b81811015610b8c5780610b788882610b18565b845260208401935050602081019050610b65565b5050509392505050565b600082601f830112610bab57610baa610a87565b5b8135610bbb848260208601610b2d565b91505092915050565b6000819050919050565b610bd781610bc4565b8114610be257600080fd5b50565b600081359050610bf481610bce565b92915050565b6000819050919050565b610c0d81610bfa565b8114610c1857600080fd5b50565b600081359050610c2a81610c04565b92915050565b610c3981610add565b8114610c4457600080fd5b50565b600081359050610c5681610c30565b92915050565b600060c08284031215610c7257610c716109f1565b5b610c7c60c0610a67565b9050600082013567ffffffffffffffff811115610c9c57610c9b610a82565b5b610ca884828501610b96565b6000830152506020610cbc84828501610be5565b6020830152506040610cd084828501610c1b565b6040830152506060610ce484828501610c47565b6060830152506080610cf884828501610c47565b60808301525060a0610d0c84828501610c47565b60a08301525092915050565b60008060408385031215610d2f57610d2e6109e7565b5b600083013567ffffffffffffffff811115610d4d57610d4c6109ec565b5b610d5985828601610c5c565b9250506020610d6a85828601610be5565b9150509250929050565b610d7d81610add565b82525050565b6000602082019050610d986000830184610d74565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610dd681610bc4565b82525050565b6000606082019050610df16000830186610d74565b610dfe6020830185610d74565b610e0b6040830184610dcd565b949350505050565b600060ff82169050919050565b610e2981610e13565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610e6481610bc4565b82525050565b6000610e768383610e5b565b60208301905092915050565b6000602082019050919050565b6000610e9a82610e2f565b610ea48185610e3a565b9350610eaf83610e4b565b8060005b83811015610ee0578151610ec78882610e6a565b9750610ed283610e82565b925050600181019050610eb3565b5085935050505092915050565b6000606082019050610f026000830186610e20565b8181036020830152610f148185610e8f565b9050610f236040830184610dcd565b949350505050565b610f3481610bfa565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6000610f8b610f86610f8184610abd565b610f66565b610abd565b9050919050565b6000610f9d82610f70565b9050919050565b6000610faf82610f92565b9050919050565b610fbf81610fa4565b82525050565b6000610fd18383610fb6565b60208301905092915050565b6000602082019050919050565b6000610ff582610f3a565b610fff8185610f45565b935061100a83610f56565b8060005b8381101561103b5781516110228882610fc5565b975061102d83610fdd565b92505060018101905061100e565b5085935050505092915050565b600082825260208201905092915050565b600061106482610e2f565b61106e8185611048565b935061107983610e4b565b8060005b838110156110aa5781516110918882610e6a565b975061109c83610e82565b92505060018101905061107d565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110f15780820151818401526020810190506110d6565b83811115611100576000848401525b50505050565b6000611111826110b7565b61111b81856110c2565b935061112b8185602086016110d3565b611134816109f6565b840191505092915050565b60008115159050919050565b6111548161113f565b82525050565b600060808301600083015184820360008601526111778282610fea565b915050602083015184820360208601526111918282611059565b915050604083015184820360408601526111ab8282611106565b91505060608301516111c0606086018261114b565b508091505092915050565b60006080820190506111e06000830187610f2b565b6111ed6020830186610d74565b6111fa6040830185610d74565b818103606083015261120c818461115a565b905095945050505050565b60008151905061122681610bce565b92915050565b600060208284031215611242576112416109e7565b5b600061125084828501611217565b91505092915050565b6112628161113f565b811461126d57600080fd5b50565b60008151905061127f81611259565b92915050565b60006020828403121561129b5761129a6109e7565b5b60006112a984828501611270565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061131f602a836112b2565b915061132a826112c3565b604082019050919050565b6000602082019050818103600083015261134e81611312565b9050919050565b600060408201905061136a6000830185610d74565b6113776020830184610d74565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113b882610bc4565b91506113c383610bc4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113f8576113f761137e565b5b828201905092915050565b60006040820190506114186000830185610d74565b6114256020830184610dcd565b9392505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006114886026836112b2565b91506114938261142c565b604082019050919050565b600060208201905081810360008301526114b78161147b565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006114f4601d836112b2565b91506114ff826114be565b602082019050919050565b60006020820190508181036000830152611523816114e7565b9050919050565b600081905092915050565b6000611540826110b7565b61154a818561152a565b935061155a8185602086016110d3565b80840191505092915050565b60006115728284611535565b915081905092915050565b600081519050919050565b60006115938261157d565b61159d81856112b2565b93506115ad8185602086016110d3565b6115b6816109f6565b840191505092915050565b600060208201905081810360008301526115db8184611588565b90509291505056fea264697066735822122006189797d4b756d9da998b41eead227f9f43a87af3edc622510e453b2a100cbd64736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x11FFBF3C EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x77ABA213 EQ PUSH2 0x62 JUMPI DUP1 PUSH4 0x81144563 EQ PUSH2 0x80 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B SWAP2 SWAP1 PUSH2 0xD18 JUMP JUMPDEST PUSH2 0x9C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6A PUSH2 0xA0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x77 SWAP2 SWAP1 PUSH2 0xD83 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x95 SWAP2 SWAP1 PUSH2 0xD18 JUMP JUMPDEST PUSH2 0xC4 JUMP JUMPDEST STOP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0xE1 JUMPI PUSH2 0xE0 PUSH2 0xD9E JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x118 CALLER ADDRESS DUP5 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14C SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x130 DUP4 PUSH1 0x0 ADD MLOAD DUP4 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x1D5 JUMP JUMPDEST PUSH2 0x147 DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0xA0 ADD MLOAD PUSH2 0x3AC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1CF DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x16D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xDDC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x4C5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP PUSH1 0x0 DUP6 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F8 JUMPI PUSH2 0x1F7 PUSH2 0xA07 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x226 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP5 DUP2 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x23D JUMPI PUSH2 0x23C PUSH2 0xD9E JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x1 SWAP1 POP PUSH1 0x0 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x266 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xEED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0x27F PUSH2 0x9B3 JUMP JUMPDEST DUP9 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 MSTORE POP DUP4 DUP2 PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP DUP2 DUP2 PUSH1 0x40 ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 DUP2 PUSH1 0x60 ADD SWAP1 ISZERO ISZERO SWAP1 DUP2 ISZERO ISZERO DUP2 MSTORE POP POP PUSH2 0x310 PUSH32 0x0 DUP10 DUP12 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x2E3 JUMPI PUSH2 0x2E2 PUSH2 0xD9E JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x58C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB95CAC28 DUP8 ADDRESS ADDRESS DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11CB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x39D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3B6 DUP3 DUP5 PUSH2 0x69E JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDE5F6268 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x412 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP3 SWAP1 POP PUSH2 0x4BF DUP3 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x458 SWAP2 SWAP1 PUSH2 0xD83 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x475 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x499 SWAP2 SWAP1 PUSH2 0x122C JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x777 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x527 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x7FD SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x587 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x547 SWAP2 SWAP1 PUSH2 0x1285 JUMP JUMPDEST PUSH2 0x586 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x57D SWAP1 PUSH2 0x1335 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E ADDRESS DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CA SWAP3 SWAP2 SWAP1 PUSH2 0x1355 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5E7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x60B SWAP2 SWAP1 PUSH2 0x122C JUMP JUMPDEST PUSH2 0x615 SWAP2 SWAP1 PUSH2 0x13AD JUMP JUMPDEST SWAP1 POP PUSH2 0x698 DUP5 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP6 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x636 SWAP3 SWAP2 SWAP1 PUSH2 0x1403 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x4C5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E ADDRESS DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E0 SWAP3 SWAP2 SWAP1 PUSH2 0x1355 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x721 SWAP2 SWAP1 PUSH2 0x122C JUMP JUMPDEST SUB PUSH2 0x772 JUMPI PUSH2 0x771 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x58C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x7F8 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x796 SWAP3 SWAP2 SWAP1 PUSH2 0x1403 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x4C5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x80C DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x815 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x85A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x851 SWAP1 PUSH2 0x149E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x863 DUP6 PUSH2 0x929 JUMP JUMPDEST PUSH2 0x8A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x899 SWAP1 PUSH2 0x150A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x8CB SWAP2 SWAP1 PUSH2 0x1566 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x908 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x90D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x91D DUP3 DUP3 DUP7 PUSH2 0x94C JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x95C JUMPI DUP3 SWAP1 POP PUSH2 0x9AC JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x96F JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A3 SWAP2 SWAP1 PUSH2 0x15C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xA3F DUP3 PUSH2 0x9F6 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0xA5E JUMPI PUSH2 0xA5D PUSH2 0xA07 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 PUSH2 0x9DD JUMP JUMPDEST SWAP1 POP PUSH2 0xA7D DUP3 DUP3 PUSH2 0xA36 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xAA7 JUMPI PUSH2 0xAA6 PUSH2 0xA07 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE8 DUP3 PUSH2 0xABD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAFA DUP3 PUSH2 0xADD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB0A DUP2 PUSH2 0xAEF JUMP JUMPDEST DUP2 EQ PUSH2 0xB15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB27 DUP2 PUSH2 0xB01 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB40 PUSH2 0xB3B DUP5 PUSH2 0xA8C JUMP JUMPDEST PUSH2 0xA67 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0xB63 JUMPI PUSH2 0xB62 PUSH2 0xAB8 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB8C JUMPI DUP1 PUSH2 0xB78 DUP9 DUP3 PUSH2 0xB18 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB65 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBAB JUMPI PUSH2 0xBAA PUSH2 0xA87 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBBB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB2D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBD7 DUP2 PUSH2 0xBC4 JUMP JUMPDEST DUP2 EQ PUSH2 0xBE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBF4 DUP2 PUSH2 0xBCE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC0D DUP2 PUSH2 0xBFA JUMP JUMPDEST DUP2 EQ PUSH2 0xC18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xC2A DUP2 PUSH2 0xC04 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC39 DUP2 PUSH2 0xADD JUMP JUMPDEST DUP2 EQ PUSH2 0xC44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xC56 DUP2 PUSH2 0xC30 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC72 JUMPI PUSH2 0xC71 PUSH2 0x9F1 JUMP JUMPDEST JUMPDEST PUSH2 0xC7C PUSH1 0xC0 PUSH2 0xA67 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC9C JUMPI PUSH2 0xC9B PUSH2 0xA82 JUMP JUMPDEST JUMPDEST PUSH2 0xCA8 DUP5 DUP3 DUP6 ADD PUSH2 0xB96 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0xCBC DUP5 DUP3 DUP6 ADD PUSH2 0xBE5 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0xCD0 DUP5 DUP3 DUP6 ADD PUSH2 0xC1B JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0xCE4 DUP5 DUP3 DUP6 ADD PUSH2 0xC47 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0xCF8 DUP5 DUP3 DUP6 ADD PUSH2 0xC47 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0xD0C DUP5 DUP3 DUP6 ADD PUSH2 0xC47 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD2F JUMPI PUSH2 0xD2E PUSH2 0x9E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD4D JUMPI PUSH2 0xD4C PUSH2 0x9EC JUMP JUMPDEST JUMPDEST PUSH2 0xD59 DUP6 DUP3 DUP7 ADD PUSH2 0xC5C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD6A DUP6 DUP3 DUP7 ADD PUSH2 0xBE5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xD7D DUP2 PUSH2 0xADD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD98 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD74 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xDD6 DUP2 PUSH2 0xBC4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xDF1 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xD74 JUMP JUMPDEST PUSH2 0xDFE PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xD74 JUMP JUMPDEST PUSH2 0xE0B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xDCD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE29 DUP2 PUSH2 0xE13 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE64 DUP2 PUSH2 0xBC4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE76 DUP4 DUP4 PUSH2 0xE5B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE9A DUP3 PUSH2 0xE2F JUMP JUMPDEST PUSH2 0xEA4 DUP2 DUP6 PUSH2 0xE3A JUMP JUMPDEST SWAP4 POP PUSH2 0xEAF DUP4 PUSH2 0xE4B JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEE0 JUMPI DUP2 MLOAD PUSH2 0xEC7 DUP9 DUP3 PUSH2 0xE6A JUMP JUMPDEST SWAP8 POP PUSH2 0xED2 DUP4 PUSH2 0xE82 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xEB3 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xF02 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xE20 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xF14 DUP2 DUP6 PUSH2 0xE8F JUMP JUMPDEST SWAP1 POP PUSH2 0xF23 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xDCD JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xF34 DUP2 PUSH2 0xBFA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF8B PUSH2 0xF86 PUSH2 0xF81 DUP5 PUSH2 0xABD JUMP JUMPDEST PUSH2 0xF66 JUMP JUMPDEST PUSH2 0xABD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF9D DUP3 PUSH2 0xF70 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFAF DUP3 PUSH2 0xF92 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFBF DUP2 PUSH2 0xFA4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD1 DUP4 DUP4 PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFF5 DUP3 PUSH2 0xF3A JUMP JUMPDEST PUSH2 0xFFF DUP2 DUP6 PUSH2 0xF45 JUMP JUMPDEST SWAP4 POP PUSH2 0x100A DUP4 PUSH2 0xF56 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x103B JUMPI DUP2 MLOAD PUSH2 0x1022 DUP9 DUP3 PUSH2 0xFC5 JUMP JUMPDEST SWAP8 POP PUSH2 0x102D DUP4 PUSH2 0xFDD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x100E JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1064 DUP3 PUSH2 0xE2F JUMP JUMPDEST PUSH2 0x106E DUP2 DUP6 PUSH2 0x1048 JUMP JUMPDEST SWAP4 POP PUSH2 0x1079 DUP4 PUSH2 0xE4B JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10AA JUMPI DUP2 MLOAD PUSH2 0x1091 DUP9 DUP3 PUSH2 0xE6A JUMP JUMPDEST SWAP8 POP PUSH2 0x109C DUP4 PUSH2 0xE82 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x107D JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10F1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x10D6 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1100 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1111 DUP3 PUSH2 0x10B7 JUMP JUMPDEST PUSH2 0x111B DUP2 DUP6 PUSH2 0x10C2 JUMP JUMPDEST SWAP4 POP PUSH2 0x112B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x10D3 JUMP JUMPDEST PUSH2 0x1134 DUP2 PUSH2 0x9F6 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1154 DUP2 PUSH2 0x113F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x0 DUP7 ADD MSTORE PUSH2 0x1177 DUP3 DUP3 PUSH2 0xFEA JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x1191 DUP3 DUP3 PUSH2 0x1059 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x11AB DUP3 DUP3 PUSH2 0x1106 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x11C0 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x114B JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x11E0 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0xF2B JUMP JUMPDEST PUSH2 0x11ED PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0xD74 JUMP JUMPDEST PUSH2 0x11FA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xD74 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x120C DUP2 DUP5 PUSH2 0x115A JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1226 DUP2 PUSH2 0xBCE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1242 JUMPI PUSH2 0x1241 PUSH2 0x9E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1250 DUP5 DUP3 DUP6 ADD PUSH2 0x1217 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1262 DUP2 PUSH2 0x113F JUMP JUMPDEST DUP2 EQ PUSH2 0x126D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x127F DUP2 PUSH2 0x1259 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x129B JUMPI PUSH2 0x129A PUSH2 0x9E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x12A9 DUP5 DUP3 DUP6 ADD PUSH2 0x1270 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x131F PUSH1 0x2A DUP4 PUSH2 0x12B2 JUMP JUMPDEST SWAP2 POP PUSH2 0x132A DUP3 PUSH2 0x12C3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x134E DUP2 PUSH2 0x1312 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x136A PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xD74 JUMP JUMPDEST PUSH2 0x1377 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xD74 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13B8 DUP3 PUSH2 0xBC4 JUMP JUMPDEST SWAP2 POP PUSH2 0x13C3 DUP4 PUSH2 0xBC4 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x13F8 JUMPI PUSH2 0x13F7 PUSH2 0x137E JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1418 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xD74 JUMP JUMPDEST PUSH2 0x1425 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDCD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1488 PUSH1 0x26 DUP4 PUSH2 0x12B2 JUMP JUMPDEST SWAP2 POP PUSH2 0x1493 DUP3 PUSH2 0x142C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14B7 DUP2 PUSH2 0x147B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14F4 PUSH1 0x1D DUP4 PUSH2 0x12B2 JUMP JUMPDEST SWAP2 POP PUSH2 0x14FF DUP3 PUSH2 0x14BE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1523 DUP2 PUSH2 0x14E7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1540 DUP3 PUSH2 0x10B7 JUMP JUMPDEST PUSH2 0x154A DUP2 DUP6 PUSH2 0x152A JUMP JUMPDEST SWAP4 POP PUSH2 0x155A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x10D3 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1572 DUP3 DUP5 PUSH2 0x1535 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1593 DUP3 PUSH2 0x157D JUMP JUMPDEST PUSH2 0x159D DUP2 DUP6 PUSH2 0x12B2 JUMP JUMPDEST SWAP4 POP PUSH2 0x15AD DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x10D3 JUMP JUMPDEST PUSH2 0x15B6 DUP2 PUSH2 0x9F6 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x15DB DUP2 DUP5 PUSH2 0x1588 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD XOR SWAP8 SWAP8 0xD4 0xB7 JUMP 0xD9 0xDA SWAP10 DUP12 COINBASE 0xEE 0xAD 0x22 PUSH32 0x9F43A87AF3EDC622510E453B2A100CBD64736F6C634300080D00330000000000 ",
							"sourceMap": "289:3006:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;982:93;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;379:33;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1083:479;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;982:93;;;:::o;379:33::-;;;:::o;1083:479::-;1174:28;1231:7;:19;;;1251:7;:25;;;1231:46;;;;;;;;:::i;:::-;;;;;;;;1174:105;;1290:62;1318:10;1338:4;1345:6;1290:10;:27;;;;:62;;;;;;:::i;:::-;1363:86;1373:7;:19;;;1394:6;1402:7;:25;;;1429:7;:19;;;1363:9;:86::i;:::-;1486:68;1504:7;:15;;;1521:7;:13;;;1536:7;:17;;;1486;:68::i;:::-;1163:399;1083:479;;:::o;967:252:4:-;1116:96;1136:5;1166:27;;;1195:4;1201:2;1205:5;1143:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1116:19;:96::i;:::-;967:252;;;;:::o;2372:918:7:-;2496:14;2513:1;2496:18;;2607:26;2650:11;:18;2636:33;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2607:62;;2704:5;2680:9;2690:10;2680:21;;;;;;;;:::i;:::-;;;;;;;:29;;;;;2722:20;2745:1;2722:24;;2798:21;2833:8;2843:9;2854:12;2822:45;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2798:69;;2880:41;;:::i;:::-;2949:11;2932:7;:14;;:28;;;;2994:9;2971:7;:20;;:32;;;;3033:8;3014:7;:16;;:27;;;;3082:5;3052:7;:27;;:35;;;;;;;;;;;3100:90;3174:8;3184:5;3126:11;3138:10;3126:23;;;;;;;;:::i;:::-;;;;;;;;3100:73;;;;:90;;;;;:::i;:::-;3212:8;3201:29;;;3231:11;3252:4;3267;3274:7;3201:81;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2485:805;;;;;2372:918;;;;:::o;1570:407::-;1688:27;1705:5;1712:2;1688:16;:27::i;:::-;1783:5;1776:24;;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1844:24;1889:5;1844:51;;1906:63;1926:9;1937:6;:16;;;1962:4;1937:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1906:6;:19;;;;:63;;;;;:::i;:::-;1652:325;1570:407;;;:::o;3306:717:4:-;3736:23;3762:69;3790:4;3762:69;;;;;;;;;;;;;;;;;3770:5;3762:27;;;;:69;;;;;:::i;:::-;3736:95;;3865:1;3845:10;:17;:21;3841:176;;;3940:10;3929:30;;;;;;;;;;;;:::i;:::-;3921:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;3841:176;3387:636;3306:717;;:::o;2099:321::-;2236:20;2301:5;2259;:15;;;2283:4;2290:7;2259:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:47;;;;:::i;:::-;2236:70;;2316:97;2336:5;2366:22;;;2390:7;2399:12;2343:69;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2316:19;:97::i;:::-;2226:194;2099:321;;;:::o;1985:287:7:-;2063:23;2107:5;2063:50;;2179:1;2128:5;:15;;;2152:4;2159:7;2128:39;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;2124:141;;2198:55;2226:7;2235:17;2198:5;:27;;;;:55;;;;;:::i;:::-;2124:141;2052:220;1985:287;;:::o;745:216:4:-;868:86;888:5;918:23;;;943:2;947:5;895:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;868:19;:86::i;:::-;745:216;;;:::o;3872:223:5:-;4005:12;4036:52;4058:6;4066:4;4072:1;4075:12;4036:21;:52::i;:::-;4029:59;;3872:223;;;;;:::o;4959:499::-;5124:12;5181:5;5156:21;:30;;5148:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5247:18;5258:6;5247:10;:18::i;:::-;5239:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;5311:12;5325:23;5352:6;:11;;5371:5;5378:4;5352:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5310:73;;;;5400:51;5417:7;5426:10;5438:12;5400:16;:51::i;:::-;5393:58;;;;4959:499;;;;;;:::o;1186:320::-;1246:4;1498:1;1476:7;:19;;;:23;1469:30;;1186:320;;;:::o;6622:692::-;6768:12;6796:7;6792:516;;;6826:10;6819:17;;;;6792:516;6957:1;6937:10;:17;:21;6933:365;;;7131:10;7125:17;7191:15;7178:10;7174:2;7170:19;7163:44;6933:365;7270:12;7263:20;;;;;;;;;;;:::i;:::-;;;;;;;;6622:692;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:14:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:102;498:6;549:2;545:7;540:2;533:5;529:14;525:28;515:38;;457:102;;;:::o;565:180::-;613:77;610:1;603:88;710:4;707:1;700:15;734:4;731:1;724:15;751:281;834:27;856:4;834:27;:::i;:::-;826:6;822:40;964:6;952:10;949:22;928:18;916:10;913:34;910:62;907:88;;;975:18;;:::i;:::-;907:88;1015:10;1011:2;1004:22;794:238;751:281;;:::o;1038:129::-;1072:6;1099:20;;:::i;:::-;1089:30;;1128:33;1156:4;1148:6;1128:33;:::i;:::-;1038:129;;;:::o;1173:117::-;1282:1;1279;1272:12;1296:117;1405:1;1402;1395:12;1419:326;1511:4;1601:18;1593:6;1590:30;1587:56;;;1623:18;;:::i;:::-;1587:56;1673:4;1665:6;1661:17;1653:25;;1733:4;1727;1723:15;1715:23;;1419:326;;;:::o;1751:117::-;1860:1;1857;1850:12;1874:126;1911:7;1951:42;1944:5;1940:54;1929:65;;1874:126;;;:::o;2006:96::-;2043:7;2072:24;2090:5;2072:24;:::i;:::-;2061:35;;2006:96;;;:::o;2108:111::-;2160:7;2189:24;2207:5;2189:24;:::i;:::-;2178:35;;2108:111;;;:::o;2225:152::-;2313:39;2346:5;2313:39;:::i;:::-;2306:5;2303:50;2293:78;;2367:1;2364;2357:12;2293:78;2225:152;:::o;2383:169::-;2444:5;2482:6;2469:20;2460:29;;2498:48;2540:5;2498:48;:::i;:::-;2383:169;;;;:::o;2583:755::-;2694:5;2719:96;2735:79;2807:6;2735:79;:::i;:::-;2719:96;:::i;:::-;2710:105;;2835:5;2864:6;2857:5;2850:21;2898:4;2891:5;2887:16;2880:23;;2951:4;2943:6;2939:17;2931:6;2927:30;2980:3;2972:6;2969:15;2966:122;;;2999:79;;:::i;:::-;2966:122;3114:6;3097:235;3131:6;3126:3;3123:15;3097:235;;;3206:3;3235:52;3283:3;3271:10;3235:52;:::i;:::-;3230:3;3223:65;3317:4;3312:3;3308:14;3301:21;;3173:159;3157:4;3152:3;3148:14;3141:21;;3097:235;;;3101:21;2700:638;;2583:755;;;;;:::o;3369:400::-;3455:5;3504:3;3497:4;3489:6;3485:17;3481:27;3471:122;;3512:79;;:::i;:::-;3471:122;3629:6;3616:20;3654:109;3759:3;3751:6;3744:4;3736:6;3732:17;3654:109;:::i;:::-;3645:118;;3461:308;3369:400;;;;:::o;3775:77::-;3812:7;3841:5;3830:16;;3775:77;;;:::o;3858:122::-;3931:24;3949:5;3931:24;:::i;:::-;3924:5;3921:35;3911:63;;3970:1;3967;3960:12;3911:63;3858:122;:::o;3986:139::-;4032:5;4070:6;4057:20;4048:29;;4086:33;4113:5;4086:33;:::i;:::-;3986:139;;;;:::o;4131:77::-;4168:7;4197:5;4186:16;;4131:77;;;:::o;4214:122::-;4287:24;4305:5;4287:24;:::i;:::-;4280:5;4277:35;4267:63;;4326:1;4323;4316:12;4267:63;4214:122;:::o;4342:139::-;4388:5;4426:6;4413:20;4404:29;;4442:33;4469:5;4442:33;:::i;:::-;4342:139;;;;:::o;4487:122::-;4560:24;4578:5;4560:24;:::i;:::-;4553:5;4550:35;4540:63;;4599:1;4596;4589:12;4540:63;4487:122;:::o;4615:139::-;4661:5;4699:6;4686:20;4677:29;;4715:33;4742:5;4715:33;:::i;:::-;4615:139;;;;:::o;4803:1462::-;4883:5;4927:4;4915:9;4910:3;4906:19;4902:30;4899:117;;;4935:79;;:::i;:::-;4899:117;5034:21;5050:4;5034:21;:::i;:::-;5025:30;;5149:1;5138:9;5134:17;5121:31;5179:18;5171:6;5168:30;5165:117;;;5201:79;;:::i;:::-;5165:117;5321:89;5406:3;5397:6;5386:9;5382:22;5321:89;:::i;:::-;5314:4;5307:5;5303:16;5296:115;5065:357;5494:2;5535:49;5580:3;5571:6;5560:9;5556:22;5535:49;:::i;:::-;5528:4;5521:5;5517:16;5510:75;5432:164;5662:2;5703:49;5748:3;5739:6;5728:9;5724:22;5703:49;:::i;:::-;5696:4;5689:5;5685:16;5678:75;5606:158;5826:2;5867:49;5912:3;5903:6;5892:9;5888:22;5867:49;:::i;:::-;5860:4;5853:5;5849:16;5842:75;5774:154;5988:3;6030:49;6075:3;6066:6;6055:9;6051:22;6030:49;:::i;:::-;6023:4;6016:5;6012:16;6005:75;5938:153;6155:3;6197:49;6242:3;6233:6;6222:9;6218:22;6197:49;:::i;:::-;6190:4;6183:5;6179:16;6172:75;6101:157;4803:1462;;;;:::o;6271:696::-;6370:6;6378;6427:2;6415:9;6406:7;6402:23;6398:32;6395:119;;;6433:79;;:::i;:::-;6395:119;6581:1;6570:9;6566:17;6553:31;6611:18;6603:6;6600:30;6597:117;;;6633:79;;:::i;:::-;6597:117;6738:84;6814:7;6805:6;6794:9;6790:22;6738:84;:::i;:::-;6728:94;;6524:308;6871:2;6897:53;6942:7;6933:6;6922:9;6918:22;6897:53;:::i;:::-;6887:63;;6842:118;6271:696;;;;;:::o;6973:118::-;7060:24;7078:5;7060:24;:::i;:::-;7055:3;7048:37;6973:118;;:::o;7097:222::-;7190:4;7228:2;7217:9;7213:18;7205:26;;7241:71;7309:1;7298:9;7294:17;7285:6;7241:71;:::i;:::-;7097:222;;;;:::o;7325:180::-;7373:77;7370:1;7363:88;7470:4;7467:1;7460:15;7494:4;7491:1;7484:15;7511:118;7598:24;7616:5;7598:24;:::i;:::-;7593:3;7586:37;7511:118;;:::o;7635:442::-;7784:4;7822:2;7811:9;7807:18;7799:26;;7835:71;7903:1;7892:9;7888:17;7879:6;7835:71;:::i;:::-;7916:72;7984:2;7973:9;7969:18;7960:6;7916:72;:::i;:::-;7998;8066:2;8055:9;8051:18;8042:6;7998:72;:::i;:::-;7635:442;;;;;;:::o;8083:86::-;8118:7;8158:4;8151:5;8147:16;8136:27;;8083:86;;;:::o;8175:112::-;8258:22;8274:5;8258:22;:::i;:::-;8253:3;8246:35;8175:112;;:::o;8293:114::-;8360:6;8394:5;8388:12;8378:22;;8293:114;;;:::o;8413:184::-;8512:11;8546:6;8541:3;8534:19;8586:4;8581:3;8577:14;8562:29;;8413:184;;;;:::o;8603:132::-;8670:4;8693:3;8685:11;;8723:4;8718:3;8714:14;8706:22;;8603:132;;;:::o;8741:108::-;8818:24;8836:5;8818:24;:::i;:::-;8813:3;8806:37;8741:108;;:::o;8855:179::-;8924:10;8945:46;8987:3;8979:6;8945:46;:::i;:::-;9023:4;9018:3;9014:14;9000:28;;8855:179;;;;:::o;9040:113::-;9110:4;9142;9137:3;9133:14;9125:22;;9040:113;;;:::o;9189:732::-;9308:3;9337:54;9385:5;9337:54;:::i;:::-;9407:86;9486:6;9481:3;9407:86;:::i;:::-;9400:93;;9517:56;9567:5;9517:56;:::i;:::-;9596:7;9627:1;9612:284;9637:6;9634:1;9631:13;9612:284;;;9713:6;9707:13;9740:63;9799:3;9784:13;9740:63;:::i;:::-;9733:70;;9826:60;9879:6;9826:60;:::i;:::-;9816:70;;9672:224;9659:1;9656;9652:9;9647:14;;9612:284;;;9616:14;9912:3;9905:10;;9313:608;;;9189:732;;;;:::o;9927:585::-;10122:4;10160:2;10149:9;10145:18;10137:26;;10173:67;10237:1;10226:9;10222:17;10213:6;10173:67;:::i;:::-;10287:9;10281:4;10277:20;10272:2;10261:9;10257:18;10250:48;10315:108;10418:4;10409:6;10315:108;:::i;:::-;10307:116;;10433:72;10501:2;10490:9;10486:18;10477:6;10433:72;:::i;:::-;9927:585;;;;;;:::o;10518:118::-;10605:24;10623:5;10605:24;:::i;:::-;10600:3;10593:37;10518:118;;:::o;10642:129::-;10724:6;10758:5;10752:12;10742:22;;10642:129;;;:::o;10777:174::-;10866:11;10900:6;10895:3;10888:19;10940:4;10935:3;10931:14;10916:29;;10777:174;;;;:::o;10957:147::-;11039:4;11062:3;11054:11;;11092:4;11087:3;11083:14;11075:22;;10957:147;;;:::o;11110:60::-;11138:3;11159:5;11152:12;;11110:60;;;:::o;11176:142::-;11226:9;11259:53;11277:34;11286:24;11304:5;11286:24;:::i;:::-;11277:34;:::i;:::-;11259:53;:::i;:::-;11246:66;;11176:142;;;:::o;11324:126::-;11374:9;11407:37;11438:5;11407:37;:::i;:::-;11394:50;;11324:126;;;:::o;11456:141::-;11521:9;11554:37;11585:5;11554:37;:::i;:::-;11541:50;;11456:141;;;:::o;11603:151::-;11695:52;11741:5;11695:52;:::i;:::-;11690:3;11683:65;11603:151;;:::o;11760:209::-;11844:10;11865:61;11922:3;11914:6;11865:61;:::i;:::-;11958:4;11953:3;11949:14;11935:28;;11760:209;;;;:::o;11975:128::-;12060:4;12092;12087:3;12083:14;12075:22;;11975:128;;;:::o;12147:787::-;12271:3;12300:69;12363:5;12300:69;:::i;:::-;12385:76;12454:6;12449:3;12385:76;:::i;:::-;12378:83;;12485:71;12550:5;12485:71;:::i;:::-;12579:7;12610:1;12595:314;12620:6;12617:1;12614:13;12595:314;;;12696:6;12690:13;12723:78;12797:3;12782:13;12723:78;:::i;:::-;12716:85;;12824:75;12892:6;12824:75;:::i;:::-;12814:85;;12655:254;12642:1;12639;12635:9;12630:14;;12595:314;;;12599:14;12925:3;12918:10;;12276:658;;;12147:787;;;;:::o;12940:174::-;13029:11;13063:6;13058:3;13051:19;13103:4;13098:3;13094:14;13079:29;;12940:174;;;;:::o;13150:712::-;13259:3;13288:54;13336:5;13288:54;:::i;:::-;13358:76;13427:6;13422:3;13358:76;:::i;:::-;13351:83;;13458:56;13508:5;13458:56;:::i;:::-;13537:7;13568:1;13553:284;13578:6;13575:1;13572:13;13553:284;;;13654:6;13648:13;13681:63;13740:3;13725:13;13681:63;:::i;:::-;13674:70;;13767:60;13820:6;13767:60;:::i;:::-;13757:70;;13613:224;13600:1;13597;13593:9;13588:14;;13553:284;;;13557:14;13853:3;13846:10;;13264:598;;;13150:712;;;;:::o;13868:98::-;13919:6;13953:5;13947:12;13937:22;;13868:98;;;:::o;13972:158::-;14045:11;14079:6;14074:3;14067:19;14119:4;14114:3;14110:14;14095:29;;13972:158;;;;:::o;14136:307::-;14204:1;14214:113;14228:6;14225:1;14222:13;14214:113;;;14313:1;14308:3;14304:11;14298:18;14294:1;14289:3;14285:11;14278:39;14250:2;14247:1;14243:10;14238:15;;14214:113;;;14345:6;14342:1;14339:13;14336:101;;;14425:1;14416:6;14411:3;14407:16;14400:27;14336:101;14185:258;14136:307;;;:::o;14449:340::-;14525:3;14553:38;14585:5;14553:38;:::i;:::-;14607:60;14660:6;14655:3;14607:60;:::i;:::-;14600:67;;14676:52;14721:6;14716:3;14709:4;14702:5;14698:16;14676:52;:::i;:::-;14753:29;14775:6;14753:29;:::i;:::-;14748:3;14744:39;14737:46;;14529:260;14449:340;;;;:::o;14795:90::-;14829:7;14872:5;14865:13;14858:21;14847:32;;14795:90;;;:::o;14891:99::-;14962:21;14977:5;14962:21;:::i;:::-;14957:3;14950:34;14891:99;;:::o;15074:1208::-;15209:3;15245:4;15240:3;15236:14;15334:4;15327:5;15323:16;15317:23;15387:3;15381:4;15377:14;15370:4;15365:3;15361:14;15354:38;15413:118;15526:4;15512:12;15413:118;:::i;:::-;15405:126;;15260:282;15632:4;15625:5;15621:16;15615:23;15685:3;15679:4;15675:14;15668:4;15663:3;15659:14;15652:38;15711:103;15809:4;15795:12;15711:103;:::i;:::-;15703:111;;15552:273;15911:4;15904:5;15900:16;15894:23;15964:3;15958:4;15954:14;15947:4;15942:3;15938:14;15931:38;15990:71;16056:4;16042:12;15990:71;:::i;:::-;15982:79;;15835:237;16169:4;16162:5;16158:16;16152:23;16188:57;16239:4;16234:3;16230:14;16216:12;16188:57;:::i;:::-;16082:173;16272:4;16265:11;;15214:1068;15074:1208;;;;:::o;16288:736::-;16531:4;16569:3;16558:9;16554:19;16546:27;;16583:71;16651:1;16640:9;16636:17;16627:6;16583:71;:::i;:::-;16664:72;16732:2;16721:9;16717:18;16708:6;16664:72;:::i;:::-;16746;16814:2;16803:9;16799:18;16790:6;16746:72;:::i;:::-;16865:9;16859:4;16855:20;16850:2;16839:9;16835:18;16828:48;16893:124;17012:4;17003:6;16893:124;:::i;:::-;16885:132;;16288:736;;;;;;;:::o;17030:143::-;17087:5;17118:6;17112:13;17103:22;;17134:33;17161:5;17134:33;:::i;:::-;17030:143;;;;:::o;17179:351::-;17249:6;17298:2;17286:9;17277:7;17273:23;17269:32;17266:119;;;17304:79;;:::i;:::-;17266:119;17424:1;17449:64;17505:7;17496:6;17485:9;17481:22;17449:64;:::i;:::-;17439:74;;17395:128;17179:351;;;;:::o;17536:116::-;17606:21;17621:5;17606:21;:::i;:::-;17599:5;17596:32;17586:60;;17642:1;17639;17632:12;17586:60;17536:116;:::o;17658:137::-;17712:5;17743:6;17737:13;17728:22;;17759:30;17783:5;17759:30;:::i;:::-;17658:137;;;;:::o;17801:345::-;17868:6;17917:2;17905:9;17896:7;17892:23;17888:32;17885:119;;;17923:79;;:::i;:::-;17885:119;18043:1;18068:61;18121:7;18112:6;18101:9;18097:22;18068:61;:::i;:::-;18058:71;;18014:125;17801:345;;;;:::o;18152:169::-;18236:11;18270:6;18265:3;18258:19;18310:4;18305:3;18301:14;18286:29;;18152:169;;;;:::o;18327:229::-;18467:34;18463:1;18455:6;18451:14;18444:58;18536:12;18531:2;18523:6;18519:15;18512:37;18327:229;:::o;18562:366::-;18704:3;18725:67;18789:2;18784:3;18725:67;:::i;:::-;18718:74;;18801:93;18890:3;18801:93;:::i;:::-;18919:2;18914:3;18910:12;18903:19;;18562:366;;;:::o;18934:419::-;19100:4;19138:2;19127:9;19123:18;19115:26;;19187:9;19181:4;19177:20;19173:1;19162:9;19158:17;19151:47;19215:131;19341:4;19215:131;:::i;:::-;19207:139;;18934:419;;;:::o;19359:332::-;19480:4;19518:2;19507:9;19503:18;19495:26;;19531:71;19599:1;19588:9;19584:17;19575:6;19531:71;:::i;:::-;19612:72;19680:2;19669:9;19665:18;19656:6;19612:72;:::i;:::-;19359:332;;;;;:::o;19697:180::-;19745:77;19742:1;19735:88;19842:4;19839:1;19832:15;19866:4;19863:1;19856:15;19883:305;19923:3;19942:20;19960:1;19942:20;:::i;:::-;19937:25;;19976:20;19994:1;19976:20;:::i;:::-;19971:25;;20130:1;20062:66;20058:74;20055:1;20052:81;20049:107;;;20136:18;;:::i;:::-;20049:107;20180:1;20177;20173:9;20166:16;;19883:305;;;;:::o;20194:332::-;20315:4;20353:2;20342:9;20338:18;20330:26;;20366:71;20434:1;20423:9;20419:17;20410:6;20366:71;:::i;:::-;20447:72;20515:2;20504:9;20500:18;20491:6;20447:72;:::i;:::-;20194:332;;;;;:::o;20532:225::-;20672:34;20668:1;20660:6;20656:14;20649:58;20741:8;20736:2;20728:6;20724:15;20717:33;20532:225;:::o;20763:366::-;20905:3;20926:67;20990:2;20985:3;20926:67;:::i;:::-;20919:74;;21002:93;21091:3;21002:93;:::i;:::-;21120:2;21115:3;21111:12;21104:19;;20763:366;;;:::o;21135:419::-;21301:4;21339:2;21328:9;21324:18;21316:26;;21388:9;21382:4;21378:20;21374:1;21363:9;21359:17;21352:47;21416:131;21542:4;21416:131;:::i;:::-;21408:139;;21135:419;;;:::o;21560:179::-;21700:31;21696:1;21688:6;21684:14;21677:55;21560:179;:::o;21745:366::-;21887:3;21908:67;21972:2;21967:3;21908:67;:::i;:::-;21901:74;;21984:93;22073:3;21984:93;:::i;:::-;22102:2;22097:3;22093:12;22086:19;;21745:366;;;:::o;22117:419::-;22283:4;22321:2;22310:9;22306:18;22298:26;;22370:9;22364:4;22360:20;22356:1;22345:9;22341:17;22334:47;22398:131;22524:4;22398:131;:::i;:::-;22390:139;;22117:419;;;:::o;22542:147::-;22643:11;22680:3;22665:18;;22542:147;;;;:::o;22695:373::-;22799:3;22827:38;22859:5;22827:38;:::i;:::-;22881:88;22962:6;22957:3;22881:88;:::i;:::-;22874:95;;22978:52;23023:6;23018:3;23011:4;23004:5;23000:16;22978:52;:::i;:::-;23055:6;23050:3;23046:16;23039:23;;22803:265;22695:373;;;;:::o;23074:271::-;23204:3;23226:93;23315:3;23306:6;23226:93;:::i;:::-;23219:100;;23336:3;23329:10;;23074:271;;;;:::o;23351:99::-;23403:6;23437:5;23431:12;23421:22;;23351:99;;;:::o;23456:364::-;23544:3;23572:39;23605:5;23572:39;:::i;:::-;23627:71;23691:6;23686:3;23627:71;:::i;:::-;23620:78;;23707:52;23752:6;23747:3;23740:4;23733:5;23729:16;23707:52;:::i;:::-;23784:29;23806:6;23784:29;:::i;:::-;23779:3;23775:39;23768:46;;23548:272;23456:364;;;;:::o;23826:313::-;23939:4;23977:2;23966:9;23962:18;23954:26;;24026:9;24020:4;24016:20;24012:1;24001:9;23997:17;23990:47;24054:78;24127:4;24118:6;24054:78;:::i;:::-;24046:86;;23826:313;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1131400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"balVault()": "infinite",
								"routeDeposit((address[],uint256,bytes32,address,address,address),uint256)": "infinite",
								"singleSideDeposit((address[],uint256,bytes32,address,address,address),uint256)": "infinite"
							},
							"internal": {
								"_approveIfNeeded(address,address)": "infinite",
								"_depositLPToVault(address,address,address)": "infinite",
								"_joinPool(contract IAsset[] memory,uint256,uint256,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 289,
									"end": 3295,
									"name": "PUSH",
									"source": 7,
									"value": "A0"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 904,
									"end": 974,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 904,
									"end": 974,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 904,
									"end": 974,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 904,
									"end": 974,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "PUSHSIZE",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "CODESIZE",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "PUSHSIZE",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 904,
									"end": 974,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 904,
									"end": 974,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 904,
									"end": 974,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 904,
									"end": 974,
									"name": "tag",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 904,
									"end": 974,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 957,
									"end": 966,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 946,
									"end": 966,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 946,
									"end": 966,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 946,
									"end": 966,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 946,
									"end": 966,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 946,
									"end": 966,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 946,
									"end": 966,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 946,
									"end": 966,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 946,
									"end": 966,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 946,
									"end": 966,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 946,
									"end": 966,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 904,
									"end": 974,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "6"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 14,
									"value": "8"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 14,
									"value": "10"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 14,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 14,
									"value": "11"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "10"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 14,
									"value": "12"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "11"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "23"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 14,
									"value": "23"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 14,
									"value": "13"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "25"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "12"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 14,
									"value": "25"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "tag",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 915,
									"end": 921,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 964,
									"end": 966,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 952,
									"end": 961,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 943,
									"end": 950,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 939,
									"end": 962,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 935,
									"end": 967,
									"name": "SLT",
									"source": 14
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "27"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "28"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "8"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "tag",
									"source": 14,
									"value": "28"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "tag",
									"source": 14,
									"value": "27"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1090,
									"end": 1091,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "29"
								},
								{
									"begin": 1171,
									"end": 1178,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 1162,
									"end": 1168,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1151,
									"end": 1160,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 1147,
									"end": 1169,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "13"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "tag",
									"source": 14,
									"value": "29"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1061,
									"end": 1189,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "tag",
									"source": 7,
									"value": "6"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "ASSIGNIMMUTABLE",
									"source": 7,
									"value": "1376"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 289,
									"end": 3295,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122006189797d4b756d9da998b41eead227f9f43a87af3edc622510e453b2a100cbd64736f6c634300080d0033",
									".code": [
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH",
											"source": 7,
											"value": "11FFBF3C"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH",
											"source": 7,
											"value": "77ABA213"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH",
											"source": 7,
											"value": "81144563"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 289,
											"end": 3295,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "tag",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "tag",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "tag",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "tag",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 982,
											"end": 1075,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "tag",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1376"
										},
										{
											"begin": 379,
											"end": 412,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 379,
											"end": 412,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "tag",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1174,
											"end": 1202,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1231,
											"end": 1238,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1250,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1231,
											"end": 1250,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1250,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1258,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1276,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1251,
											"end": 1276,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1251,
											"end": 1276,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "tag",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "tag",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1277,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1174,
											"end": 1279,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1174,
											"end": 1279,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1290,
											"end": 1352,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 1318,
											"end": 1328,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1338,
											"end": 1342,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 1345,
											"end": 1351,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1290,
											"end": 1300,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1290,
											"end": 1317,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1290,
											"end": 1317,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1290,
											"end": 1317,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 1290,
											"end": 1317,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1290,
											"end": 1352,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1290,
											"end": 1352,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1290,
											"end": 1352,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1290,
											"end": 1352,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1290,
											"end": 1352,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1290,
											"end": 1352,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1290,
											"end": 1352,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1290,
											"end": 1352,
											"name": "tag",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 1290,
											"end": 1352,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1363,
											"end": 1449,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1373,
											"end": 1380,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1392,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1373,
											"end": 1392,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1373,
											"end": 1392,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1394,
											"end": 1400,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1402,
											"end": 1409,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1402,
											"end": 1427,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1402,
											"end": 1427,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1402,
											"end": 1427,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1429,
											"end": 1436,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1429,
											"end": 1448,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1429,
											"end": 1448,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1429,
											"end": 1448,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1363,
											"end": 1372,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 1363,
											"end": 1449,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1363,
											"end": 1449,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1363,
											"end": 1449,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1486,
											"end": 1554,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 1504,
											"end": 1511,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1504,
											"end": 1519,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1504,
											"end": 1519,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1504,
											"end": 1519,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1521,
											"end": 1528,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1521,
											"end": 1534,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1521,
											"end": 1534,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1521,
											"end": 1534,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1536,
											"end": 1543,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1536,
											"end": 1553,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 1536,
											"end": 1553,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1536,
											"end": 1553,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1486,
											"end": 1503,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 1486,
											"end": 1554,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1486,
											"end": 1554,
											"name": "tag",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 1486,
											"end": 1554,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1163,
											"end": 1562,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1562,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "tag",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1116,
											"end": 1212,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 1136,
											"end": 1141,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1166,
											"end": 1193,
											"name": "PUSH",
											"source": 4,
											"value": "23B872DD"
										},
										{
											"begin": 1166,
											"end": 1193,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 1166,
											"end": 1193,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 1195,
											"end": 1199,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1201,
											"end": 1203,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1205,
											"end": 1210,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "tag",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1116,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 1116,
											"end": 1212,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1116,
											"end": 1212,
											"name": "tag",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 1116,
											"end": 1212,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2372,
											"end": 3290,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 2372,
											"end": 3290,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2496,
											"end": 2510,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2513,
											"end": 2514,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2496,
											"end": 2514,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2496,
											"end": 2514,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2607,
											"end": 2633,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2650,
											"end": 2661,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2650,
											"end": 2668,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "tag",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "tag",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "CALLDATACOPY",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "tag",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2636,
											"end": 2669,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2607,
											"end": 2669,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2607,
											"end": 2669,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2704,
											"end": 2709,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2689,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2690,
											"end": 2700,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "tag",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2701,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2709,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2709,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2709,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2709,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2709,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2722,
											"end": 2742,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2745,
											"end": 2746,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2722,
											"end": 2746,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2722,
											"end": 2746,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2798,
											"end": 2819,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2833,
											"end": 2841,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2843,
											"end": 2852,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2854,
											"end": 2866,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "tag",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2822,
											"end": 2867,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2798,
											"end": 2867,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2798,
											"end": 2867,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2880,
											"end": 2921,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 2880,
											"end": 2921,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 2880,
											"end": 2921,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2880,
											"end": 2921,
											"name": "tag",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 2880,
											"end": 2921,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2949,
											"end": 2960,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 2932,
											"end": 2939,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2932,
											"end": 2946,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2932,
											"end": 2946,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2932,
											"end": 2960,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2932,
											"end": 2960,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2932,
											"end": 2960,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2932,
											"end": 2960,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2994,
											"end": 3003,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2971,
											"end": 2978,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2971,
											"end": 2991,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2971,
											"end": 2991,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2971,
											"end": 3003,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2971,
											"end": 3003,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2971,
											"end": 3003,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2971,
											"end": 3003,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3033,
											"end": 3041,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3014,
											"end": 3021,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3014,
											"end": 3030,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3014,
											"end": 3030,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3014,
											"end": 3041,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3014,
											"end": 3041,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3014,
											"end": 3041,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3014,
											"end": 3041,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3082,
											"end": 3087,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3052,
											"end": 3059,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3052,
											"end": 3079,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 3052,
											"end": 3079,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3052,
											"end": 3087,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3052,
											"end": 3087,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3052,
											"end": 3087,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3052,
											"end": 3087,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3052,
											"end": 3087,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3052,
											"end": 3087,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3052,
											"end": 3087,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3052,
											"end": 3087,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3052,
											"end": 3087,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3052,
											"end": 3087,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3052,
											"end": 3087,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3100,
											"end": 3190,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3174,
											"end": 3182,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1376"
										},
										{
											"begin": 3184,
											"end": 3189,
											"name": "DUP10",
											"source": 7
										},
										{
											"begin": 3126,
											"end": 3137,
											"name": "DUP12",
											"source": 7
										},
										{
											"begin": 3138,
											"end": 3148,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "tag",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "tag",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3126,
											"end": 3149,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3100,
											"end": 3173,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3100,
											"end": 3173,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3100,
											"end": 3173,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 3100,
											"end": 3173,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3100,
											"end": 3190,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3100,
											"end": 3190,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3100,
											"end": 3190,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3100,
											"end": 3190,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3100,
											"end": 3190,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3100,
											"end": 3190,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3100,
											"end": 3190,
											"name": "tag",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3100,
											"end": 3190,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3212,
											"end": 3220,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1376"
										},
										{
											"begin": 3201,
											"end": 3230,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3201,
											"end": 3230,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3230,
											"name": "PUSH",
											"source": 7,
											"value": "B95CAC28"
										},
										{
											"begin": 3231,
											"end": 3242,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 3252,
											"end": 3256,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 3267,
											"end": 3271,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 3274,
											"end": 3281,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "tag",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "EXTCODESIZE",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "tag",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "tag",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3201,
											"end": 3282,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2485,
											"end": 3290,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2485,
											"end": 3290,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2485,
											"end": 3290,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2485,
											"end": 3290,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2485,
											"end": 3290,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2372,
											"end": 3290,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2372,
											"end": 3290,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2372,
											"end": 3290,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2372,
											"end": 3290,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2372,
											"end": 3290,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1570,
											"end": 1977,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 1570,
											"end": 1977,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1688,
											"end": 1715,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 1705,
											"end": 1710,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1712,
											"end": 1714,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1688,
											"end": 1704,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 1688,
											"end": 1715,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1688,
											"end": 1715,
											"name": "tag",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 1688,
											"end": 1715,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1783,
											"end": 1788,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1800,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1776,
											"end": 1800,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1800,
											"name": "PUSH",
											"source": 7,
											"value": "DE5F6268"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "EXTCODESIZE",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "tag",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "tag",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1802,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1844,
											"end": 1868,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1889,
											"end": 1894,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1844,
											"end": 1895,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1844,
											"end": 1895,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1906,
											"end": 1969,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 1926,
											"end": 1935,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1943,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1953,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1937,
											"end": 1953,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1953,
											"name": "PUSH",
											"source": 7,
											"value": "70A08231"
										},
										{
											"begin": 1962,
											"end": 1966,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "tag",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "STATICCALL",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "tag",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "tag",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 1937,
											"end": 1968,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1906,
											"end": 1912,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1906,
											"end": 1925,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1906,
											"end": 1925,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1906,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 1906,
											"end": 1925,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1906,
											"end": 1969,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1906,
											"end": 1969,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1906,
											"end": 1969,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1906,
											"end": 1969,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1906,
											"end": 1969,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1906,
											"end": 1969,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1906,
											"end": 1969,
											"name": "tag",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 1906,
											"end": 1969,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1652,
											"end": 1977,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1570,
											"end": 1977,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1570,
											"end": 1977,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1570,
											"end": 1977,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1570,
											"end": 1977,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3306,
											"end": 4023,
											"name": "tag",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 3306,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3736,
											"end": 3759,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 3790,
											"end": 3794,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 4,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3770,
											"end": 3775,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3789,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3762,
											"end": 3789,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3789,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 3762,
											"end": 3789,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "tag",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3736,
											"end": 3831,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3736,
											"end": 3831,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3865,
											"end": 3866,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3845,
											"end": 3855,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3862,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3866,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 3841,
											"end": 4017,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3841,
											"end": 4017,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 3841,
											"end": 4017,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3940,
											"end": 3950,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "70"
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "tag",
											"source": 4,
											"value": "70"
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "72"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "tag",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "tag",
											"source": 4,
											"value": "72"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3841,
											"end": 4017,
											"name": "tag",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 3841,
											"end": 4017,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3387,
											"end": 4023,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3306,
											"end": 4023,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3306,
											"end": 4023,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3306,
											"end": 4023,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2099,
											"end": 2420,
											"name": "tag",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 2099,
											"end": 2420,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2236,
											"end": 2256,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2301,
											"end": 2306,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2264,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2274,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2259,
											"end": 2274,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2274,
											"name": "PUSH",
											"source": 4,
											"value": "DD62ED3E"
										},
										{
											"begin": 2283,
											"end": 2287,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 2290,
											"end": 2297,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "76"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "77"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "tag",
											"source": 4,
											"value": "76"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "STATICCALL",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "tag",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "tag",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 2259,
											"end": 2298,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 2259,
											"end": 2306,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2306,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2259,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 2259,
											"end": 2306,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2259,
											"end": 2306,
											"name": "tag",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 2259,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2236,
											"end": 2306,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2236,
											"end": 2306,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2316,
											"end": 2413,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "83"
										},
										{
											"begin": 2336,
											"end": 2341,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2366,
											"end": 2388,
											"name": "PUSH",
											"source": 4,
											"value": "95EA7B3"
										},
										{
											"begin": 2366,
											"end": 2388,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 2366,
											"end": 2388,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 2390,
											"end": 2397,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 2399,
											"end": 2411,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "85"
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "tag",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2343,
											"end": 2412,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2316,
											"end": 2335,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 2316,
											"end": 2413,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2316,
											"end": 2413,
											"name": "tag",
											"source": 4,
											"value": "83"
										},
										{
											"begin": 2316,
											"end": 2413,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2226,
											"end": 2420,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2099,
											"end": 2420,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2099,
											"end": 2420,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2099,
											"end": 2420,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2099,
											"end": 2420,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1985,
											"end": 2272,
											"name": "tag",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 1985,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2063,
											"end": 2086,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2107,
											"end": 2112,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2063,
											"end": 2113,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2063,
											"end": 2113,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2179,
											"end": 2180,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2128,
											"end": 2133,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2143,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2128,
											"end": 2143,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2143,
											"name": "PUSH",
											"source": 7,
											"value": "DD62ED3E"
										},
										{
											"begin": 2152,
											"end": 2156,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 2159,
											"end": 2166,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "tag",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "STATICCALL",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "tag",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "tag",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 2128,
											"end": 2167,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2128,
											"end": 2181,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2124,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 2124,
											"end": 2265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2198,
											"end": 2253,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 2226,
											"end": 2233,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2235,
											"end": 2252,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2198,
											"end": 2203,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2198,
											"end": 2225,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2198,
											"end": 2225,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2198,
											"end": 2225,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 2198,
											"end": 2225,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2198,
											"end": 2253,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2198,
											"end": 2253,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2198,
											"end": 2253,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2198,
											"end": 2253,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2198,
											"end": 2253,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2198,
											"end": 2253,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2198,
											"end": 2253,
											"name": "tag",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 2198,
											"end": 2253,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2124,
											"end": 2265,
											"name": "tag",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 2124,
											"end": 2265,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2052,
											"end": 2272,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1985,
											"end": 2272,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1985,
											"end": 2272,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1985,
											"end": 2272,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 745,
											"end": 961,
											"name": "tag",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 745,
											"end": 961,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 868,
											"end": 954,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 888,
											"end": 893,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 918,
											"end": 941,
											"name": "PUSH",
											"source": 4,
											"value": "A9059CBB"
										},
										{
											"begin": 918,
											"end": 941,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 918,
											"end": 941,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 943,
											"end": 945,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 947,
											"end": 952,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "85"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "tag",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 895,
											"end": 953,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 868,
											"end": 887,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 868,
											"end": 954,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 868,
											"end": 954,
											"name": "tag",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 868,
											"end": 954,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 745,
											"end": 961,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 745,
											"end": 961,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 745,
											"end": 961,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 745,
											"end": 961,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 3872,
											"end": 4095,
											"name": "tag",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 3872,
											"end": 4095,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4005,
											"end": 4017,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 4036,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 4058,
											"end": 4064,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4066,
											"end": 4070,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4072,
											"end": 4073,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4075,
											"end": 4087,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4036,
											"end": 4057,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 4036,
											"end": 4088,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 4036,
											"end": 4088,
											"name": "tag",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 4036,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4029,
											"end": 4088,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4029,
											"end": 4088,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3872,
											"end": 4095,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 3872,
											"end": 4095,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3872,
											"end": 4095,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3872,
											"end": 4095,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3872,
											"end": 4095,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3872,
											"end": 4095,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 4959,
											"end": 5458,
											"name": "tag",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 4959,
											"end": 5458,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5124,
											"end": 5136,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 5181,
											"end": 5186,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5156,
											"end": 5177,
											"name": "SELFBALANCE",
											"source": 5
										},
										{
											"begin": 5156,
											"end": 5186,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 5156,
											"end": 5186,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "tag",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "tag",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 5148,
											"end": 5229,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5247,
											"end": 5265,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 5258,
											"end": 5264,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5247,
											"end": 5257,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 5247,
											"end": 5265,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5247,
											"end": 5265,
											"name": "tag",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 5247,
											"end": 5265,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "105"
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "tag",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "tag",
											"source": 5,
											"value": "105"
										},
										{
											"begin": 5239,
											"end": 5299,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5311,
											"end": 5323,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5325,
											"end": 5348,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5358,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5363,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5352,
											"end": 5363,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5371,
											"end": 5376,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5378,
											"end": 5382,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "108"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "109"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "tag",
											"source": 5,
											"value": "108"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "112"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH",
											"source": 5,
											"value": "3F"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "111"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "tag",
											"source": 5,
											"value": "112"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "tag",
											"source": 5,
											"value": "111"
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5352,
											"end": 5383,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5310,
											"end": 5383,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5310,
											"end": 5383,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5310,
											"end": 5383,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5310,
											"end": 5383,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5400,
											"end": 5451,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "113"
										},
										{
											"begin": 5417,
											"end": 5424,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5426,
											"end": 5436,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5438,
											"end": 5450,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 5400,
											"end": 5416,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 5400,
											"end": 5451,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5400,
											"end": 5451,
											"name": "tag",
											"source": 5,
											"value": "113"
										},
										{
											"begin": 5400,
											"end": 5451,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5393,
											"end": 5451,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5393,
											"end": 5451,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5393,
											"end": 5451,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5393,
											"end": 5451,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4959,
											"end": 5458,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 4959,
											"end": 5458,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 4959,
											"end": 5458,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4959,
											"end": 5458,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4959,
											"end": 5458,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4959,
											"end": 5458,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4959,
											"end": 5458,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "tag",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1246,
											"end": 1250,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1498,
											"end": 1499,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1476,
											"end": 1483,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1469,
											"end": 1499,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1469,
											"end": 1499,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1186,
											"end": 1506,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 6622,
											"end": 7314,
											"name": "tag",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 6622,
											"end": 7314,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6768,
											"end": 6780,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 6796,
											"end": 6803,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6792,
											"end": 7308,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 6792,
											"end": 7308,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 6792,
											"end": 7308,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 6826,
											"end": 6836,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 6819,
											"end": 6836,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6792,
											"end": 7308,
											"name": "tag",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 6792,
											"end": 7308,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6957,
											"end": 6958,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6937,
											"end": 6947,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6937,
											"end": 6954,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6937,
											"end": 6958,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 6933,
											"end": 7298,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 6933,
											"end": 7298,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 6933,
											"end": 7298,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7131,
											"end": 7141,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7125,
											"end": 7142,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7191,
											"end": 7206,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7178,
											"end": 7188,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 7174,
											"end": 7176,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7170,
											"end": 7189,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7163,
											"end": 7207,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 6933,
											"end": 7298,
											"name": "tag",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 6933,
											"end": 7298,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7270,
											"end": 7282,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "122"
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "tag",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7263,
											"end": 7283,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 6622,
											"end": 7314,
											"name": "tag",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 6622,
											"end": 7314,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6622,
											"end": 7314,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 6622,
											"end": 7314,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 6622,
											"end": 7314,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6622,
											"end": 7314,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6622,
											"end": 7314,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6622,
											"end": 7314,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "43"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 82,
											"name": "tag",
											"source": 14,
											"value": "123"
										},
										{
											"begin": 7,
											"end": 82,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 40,
											"end": 46,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 75,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 67,
											"end": 76,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 57,
											"end": 76,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 57,
											"end": 76,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7,
											"end": 82,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7,
											"end": 82,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 14,
											"value": "124"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 211,
											"end": 328,
											"name": "tag",
											"source": 14,
											"value": "125"
										},
										{
											"begin": 211,
											"end": 328,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 334,
											"end": 451,
											"name": "tag",
											"source": 14,
											"value": "126"
										},
										{
											"begin": 334,
											"end": 451,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 443,
											"end": 444,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 440,
											"end": 441,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 433,
											"end": 445,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 457,
											"end": 559,
											"name": "tag",
											"source": 14,
											"value": "127"
										},
										{
											"begin": 457,
											"end": 559,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 498,
											"end": 504,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 549,
											"end": 551,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 545,
											"end": 552,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 540,
											"end": 542,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 533,
											"end": 538,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 529,
											"end": 543,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 525,
											"end": 553,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 515,
											"end": 553,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 515,
											"end": 553,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 457,
											"end": 559,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 457,
											"end": 559,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 457,
											"end": 559,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 457,
											"end": 559,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 565,
											"end": 745,
											"name": "tag",
											"source": 14,
											"value": "36"
										},
										{
											"begin": 565,
											"end": 745,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 613,
											"end": 690,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 610,
											"end": 611,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 603,
											"end": 691,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 710,
											"end": 714,
											"name": "PUSH",
											"source": 14,
											"value": "41"
										},
										{
											"begin": 707,
											"end": 708,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 700,
											"end": 715,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 734,
											"end": 738,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 731,
											"end": 732,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 724,
											"end": 739,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 751,
											"end": 1032,
											"name": "tag",
											"source": 14,
											"value": "128"
										},
										{
											"begin": 751,
											"end": 1032,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 834,
											"end": 861,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "205"
										},
										{
											"begin": 856,
											"end": 860,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 834,
											"end": 861,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "127"
										},
										{
											"begin": 834,
											"end": 861,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 834,
											"end": 861,
											"name": "tag",
											"source": 14,
											"value": "205"
										},
										{
											"begin": 834,
											"end": 861,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 826,
											"end": 832,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 822,
											"end": 862,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 964,
											"end": 970,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 949,
											"end": 971,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 928,
											"end": 946,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 916,
											"end": 926,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 913,
											"end": 947,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 910,
											"end": 972,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 907,
											"end": 995,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 907,
											"end": 995,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "206"
										},
										{
											"begin": 907,
											"end": 995,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 975,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "207"
										},
										{
											"begin": 975,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "36"
										},
										{
											"begin": 975,
											"end": 993,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 975,
											"end": 993,
											"name": "tag",
											"source": 14,
											"value": "207"
										},
										{
											"begin": 975,
											"end": 993,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 907,
											"end": 995,
											"name": "tag",
											"source": 14,
											"value": "206"
										},
										{
											"begin": 907,
											"end": 995,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1015,
											"end": 1025,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1011,
											"end": 1013,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 794,
											"end": 1032,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 751,
											"end": 1032,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 751,
											"end": 1032,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 751,
											"end": 1032,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1038,
											"end": 1167,
											"name": "tag",
											"source": 14,
											"value": "129"
										},
										{
											"begin": 1038,
											"end": 1167,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1072,
											"end": 1078,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1099,
											"end": 1119,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "209"
										},
										{
											"begin": 1099,
											"end": 1119,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "123"
										},
										{
											"begin": 1099,
											"end": 1119,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1099,
											"end": 1119,
											"name": "tag",
											"source": 14,
											"value": "209"
										},
										{
											"begin": 1099,
											"end": 1119,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1089,
											"end": 1119,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1089,
											"end": 1119,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1128,
											"end": 1161,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "210"
										},
										{
											"begin": 1156,
											"end": 1160,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1148,
											"end": 1154,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1128,
											"end": 1161,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "128"
										},
										{
											"begin": 1128,
											"end": 1161,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1128,
											"end": 1161,
											"name": "tag",
											"source": 14,
											"value": "210"
										},
										{
											"begin": 1128,
											"end": 1161,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1038,
											"end": 1167,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1038,
											"end": 1167,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1038,
											"end": 1167,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1038,
											"end": 1167,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1173,
											"end": 1290,
											"name": "tag",
											"source": 14,
											"value": "130"
										},
										{
											"begin": 1173,
											"end": 1290,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1282,
											"end": 1283,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1279,
											"end": 1280,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1272,
											"end": 1284,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1296,
											"end": 1413,
											"name": "tag",
											"source": 14,
											"value": "131"
										},
										{
											"begin": 1296,
											"end": 1413,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1405,
											"end": 1406,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1402,
											"end": 1403,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1395,
											"end": 1407,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1419,
											"end": 1745,
											"name": "tag",
											"source": 14,
											"value": "132"
										},
										{
											"begin": 1419,
											"end": 1745,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1511,
											"end": 1515,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1601,
											"end": 1619,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1593,
											"end": 1599,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1590,
											"end": 1620,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 1587,
											"end": 1643,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1587,
											"end": 1643,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "214"
										},
										{
											"begin": 1587,
											"end": 1643,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "215"
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "36"
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "tag",
											"source": 14,
											"value": "215"
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1587,
											"end": 1643,
											"name": "tag",
											"source": 14,
											"value": "214"
										},
										{
											"begin": 1587,
											"end": 1643,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1673,
											"end": 1677,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1665,
											"end": 1671,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1661,
											"end": 1678,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 1653,
											"end": 1678,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1653,
											"end": 1678,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1733,
											"end": 1737,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1727,
											"end": 1731,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1723,
											"end": 1738,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1715,
											"end": 1738,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1715,
											"end": 1738,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1419,
											"end": 1745,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1419,
											"end": 1745,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1419,
											"end": 1745,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1419,
											"end": 1745,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1751,
											"end": 1868,
											"name": "tag",
											"source": 14,
											"value": "133"
										},
										{
											"begin": 1751,
											"end": 1868,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1860,
											"end": 1861,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1857,
											"end": 1858,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1850,
											"end": 1862,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1874,
											"end": 2000,
											"name": "tag",
											"source": 14,
											"value": "134"
										},
										{
											"begin": 1874,
											"end": 2000,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1911,
											"end": 1918,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1951,
											"end": 1993,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1944,
											"end": 1949,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1940,
											"end": 1994,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1929,
											"end": 1994,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1929,
											"end": 1994,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1874,
											"end": 2000,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1874,
											"end": 2000,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1874,
											"end": 2000,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1874,
											"end": 2000,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2006,
											"end": 2102,
											"name": "tag",
											"source": 14,
											"value": "135"
										},
										{
											"begin": 2006,
											"end": 2102,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2043,
											"end": 2050,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2072,
											"end": 2096,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "219"
										},
										{
											"begin": 2090,
											"end": 2095,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2072,
											"end": 2096,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "134"
										},
										{
											"begin": 2072,
											"end": 2096,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2072,
											"end": 2096,
											"name": "tag",
											"source": 14,
											"value": "219"
										},
										{
											"begin": 2072,
											"end": 2096,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2061,
											"end": 2096,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2061,
											"end": 2096,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2006,
											"end": 2102,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2006,
											"end": 2102,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2006,
											"end": 2102,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2006,
											"end": 2102,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2108,
											"end": 2219,
											"name": "tag",
											"source": 14,
											"value": "136"
										},
										{
											"begin": 2108,
											"end": 2219,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2160,
											"end": 2167,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "221"
										},
										{
											"begin": 2207,
											"end": 2212,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "135"
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "tag",
											"source": 14,
											"value": "221"
										},
										{
											"begin": 2189,
											"end": 2213,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2178,
											"end": 2213,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2178,
											"end": 2213,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2108,
											"end": 2219,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2108,
											"end": 2219,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2108,
											"end": 2219,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2108,
											"end": 2219,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2225,
											"end": 2377,
											"name": "tag",
											"source": 14,
											"value": "137"
										},
										{
											"begin": 2225,
											"end": 2377,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2313,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "223"
										},
										{
											"begin": 2346,
											"end": 2351,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2313,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "136"
										},
										{
											"begin": 2313,
											"end": 2352,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2313,
											"end": 2352,
											"name": "tag",
											"source": 14,
											"value": "223"
										},
										{
											"begin": 2313,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2306,
											"end": 2311,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2303,
											"end": 2353,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 2293,
											"end": 2371,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "224"
										},
										{
											"begin": 2293,
											"end": 2371,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2367,
											"end": 2368,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2364,
											"end": 2365,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2357,
											"end": 2369,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2293,
											"end": 2371,
											"name": "tag",
											"source": 14,
											"value": "224"
										},
										{
											"begin": 2293,
											"end": 2371,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2225,
											"end": 2377,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2225,
											"end": 2377,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2383,
											"end": 2552,
											"name": "tag",
											"source": 14,
											"value": "138"
										},
										{
											"begin": 2383,
											"end": 2552,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2444,
											"end": 2449,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2482,
											"end": 2488,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2460,
											"end": 2489,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2460,
											"end": 2489,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2498,
											"end": 2546,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "226"
										},
										{
											"begin": 2540,
											"end": 2545,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2498,
											"end": 2546,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "137"
										},
										{
											"begin": 2498,
											"end": 2546,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2498,
											"end": 2546,
											"name": "tag",
											"source": 14,
											"value": "226"
										},
										{
											"begin": 2498,
											"end": 2546,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2383,
											"end": 2552,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2383,
											"end": 2552,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2383,
											"end": 2552,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2383,
											"end": 2552,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2383,
											"end": 2552,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2583,
											"end": 3338,
											"name": "tag",
											"source": 14,
											"value": "139"
										},
										{
											"begin": 2583,
											"end": 3338,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2694,
											"end": 2699,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2719,
											"end": 2815,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "228"
										},
										{
											"begin": 2735,
											"end": 2814,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "229"
										},
										{
											"begin": 2807,
											"end": 2813,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2735,
											"end": 2814,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "132"
										},
										{
											"begin": 2735,
											"end": 2814,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2735,
											"end": 2814,
											"name": "tag",
											"source": 14,
											"value": "229"
										},
										{
											"begin": 2735,
											"end": 2814,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2719,
											"end": 2815,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "129"
										},
										{
											"begin": 2719,
											"end": 2815,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2719,
											"end": 2815,
											"name": "tag",
											"source": 14,
											"value": "228"
										},
										{
											"begin": 2719,
											"end": 2815,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2710,
											"end": 2815,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2710,
											"end": 2815,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2835,
											"end": 2840,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2864,
											"end": 2870,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2857,
											"end": 2862,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2850,
											"end": 2871,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2898,
											"end": 2902,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2891,
											"end": 2896,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2887,
											"end": 2903,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2880,
											"end": 2903,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2880,
											"end": 2903,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2951,
											"end": 2955,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2943,
											"end": 2949,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2939,
											"end": 2956,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 2931,
											"end": 2937,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2927,
											"end": 2957,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2980,
											"end": 2983,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2972,
											"end": 2978,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2969,
											"end": 2984,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 2966,
											"end": 3088,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2966,
											"end": 3088,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "230"
										},
										{
											"begin": 2966,
											"end": 3088,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2999,
											"end": 3078,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "231"
										},
										{
											"begin": 2999,
											"end": 3078,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "133"
										},
										{
											"begin": 2999,
											"end": 3078,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2999,
											"end": 3078,
											"name": "tag",
											"source": 14,
											"value": "231"
										},
										{
											"begin": 2999,
											"end": 3078,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2966,
											"end": 3088,
											"name": "tag",
											"source": 14,
											"value": "230"
										},
										{
											"begin": 2966,
											"end": 3088,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3114,
											"end": 3120,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3097,
											"end": 3332,
											"name": "tag",
											"source": 14,
											"value": "232"
										},
										{
											"begin": 3097,
											"end": 3332,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3131,
											"end": 3137,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3126,
											"end": 3129,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3123,
											"end": 3138,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 3097,
											"end": 3332,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3097,
											"end": 3332,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "234"
										},
										{
											"begin": 3097,
											"end": 3332,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3206,
											"end": 3209,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3235,
											"end": 3287,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "235"
										},
										{
											"begin": 3283,
											"end": 3286,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 3271,
											"end": 3281,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3235,
											"end": 3287,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "138"
										},
										{
											"begin": 3235,
											"end": 3287,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3235,
											"end": 3287,
											"name": "tag",
											"source": 14,
											"value": "235"
										},
										{
											"begin": 3235,
											"end": 3287,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3230,
											"end": 3233,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 3223,
											"end": 3288,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3317,
											"end": 3321,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3312,
											"end": 3315,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 3308,
											"end": 3322,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3301,
											"end": 3322,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 3301,
											"end": 3322,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3173,
											"end": 3332,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3157,
											"end": 3161,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3152,
											"end": 3155,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3148,
											"end": 3162,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3141,
											"end": 3162,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3141,
											"end": 3162,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3097,
											"end": 3332,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "232"
										},
										{
											"begin": 3097,
											"end": 3332,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3097,
											"end": 3332,
											"name": "tag",
											"source": 14,
											"value": "234"
										},
										{
											"begin": 3097,
											"end": 3332,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3101,
											"end": 3122,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2700,
											"end": 3338,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2700,
											"end": 3338,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2583,
											"end": 3338,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 2583,
											"end": 3338,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2583,
											"end": 3338,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2583,
											"end": 3338,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2583,
											"end": 3338,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2583,
											"end": 3338,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3369,
											"end": 3769,
											"name": "tag",
											"source": 14,
											"value": "140"
										},
										{
											"begin": 3369,
											"end": 3769,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3455,
											"end": 3460,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3504,
											"end": 3507,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3497,
											"end": 3501,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 3489,
											"end": 3495,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3485,
											"end": 3502,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3481,
											"end": 3508,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 3471,
											"end": 3593,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "237"
										},
										{
											"begin": 3471,
											"end": 3593,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3512,
											"end": 3591,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "238"
										},
										{
											"begin": 3512,
											"end": 3591,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "131"
										},
										{
											"begin": 3512,
											"end": 3591,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3512,
											"end": 3591,
											"name": "tag",
											"source": 14,
											"value": "238"
										},
										{
											"begin": 3512,
											"end": 3591,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3471,
											"end": 3593,
											"name": "tag",
											"source": 14,
											"value": "237"
										},
										{
											"begin": 3471,
											"end": 3593,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3629,
											"end": 3635,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3616,
											"end": 3636,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3654,
											"end": 3763,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "239"
										},
										{
											"begin": 3759,
											"end": 3762,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 3751,
											"end": 3757,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3744,
											"end": 3748,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3736,
											"end": 3742,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3732,
											"end": 3749,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3654,
											"end": 3763,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "139"
										},
										{
											"begin": 3654,
											"end": 3763,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3654,
											"end": 3763,
											"name": "tag",
											"source": 14,
											"value": "239"
										},
										{
											"begin": 3654,
											"end": 3763,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3645,
											"end": 3763,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3645,
											"end": 3763,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3461,
											"end": 3769,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3369,
											"end": 3769,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3369,
											"end": 3769,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3369,
											"end": 3769,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3369,
											"end": 3769,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3369,
											"end": 3769,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3775,
											"end": 3852,
											"name": "tag",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 3775,
											"end": 3852,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3812,
											"end": 3819,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3841,
											"end": 3846,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3830,
											"end": 3846,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3830,
											"end": 3846,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3775,
											"end": 3852,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3775,
											"end": 3852,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3775,
											"end": 3852,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3775,
											"end": 3852,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3858,
											"end": 3980,
											"name": "tag",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 3858,
											"end": 3980,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3931,
											"end": 3955,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "242"
										},
										{
											"begin": 3949,
											"end": 3954,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3931,
											"end": 3955,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 3931,
											"end": 3955,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3931,
											"end": 3955,
											"name": "tag",
											"source": 14,
											"value": "242"
										},
										{
											"begin": 3931,
											"end": 3955,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3924,
											"end": 3929,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3921,
											"end": 3956,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 3911,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "243"
										},
										{
											"begin": 3911,
											"end": 3974,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3970,
											"end": 3971,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3967,
											"end": 3968,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3960,
											"end": 3972,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3911,
											"end": 3974,
											"name": "tag",
											"source": 14,
											"value": "243"
										},
										{
											"begin": 3911,
											"end": 3974,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3858,
											"end": 3980,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3858,
											"end": 3980,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3986,
											"end": 4125,
											"name": "tag",
											"source": 14,
											"value": "143"
										},
										{
											"begin": 3986,
											"end": 4125,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4032,
											"end": 4037,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4070,
											"end": 4076,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4057,
											"end": 4077,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 4048,
											"end": 4077,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4048,
											"end": 4077,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4086,
											"end": 4119,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "245"
										},
										{
											"begin": 4113,
											"end": 4118,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4086,
											"end": 4119,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 4086,
											"end": 4119,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4086,
											"end": 4119,
											"name": "tag",
											"source": 14,
											"value": "245"
										},
										{
											"begin": 4086,
											"end": 4119,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3986,
											"end": 4125,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3986,
											"end": 4125,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3986,
											"end": 4125,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3986,
											"end": 4125,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3986,
											"end": 4125,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4131,
											"end": 4208,
											"name": "tag",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 4131,
											"end": 4208,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4168,
											"end": 4175,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4197,
											"end": 4202,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4186,
											"end": 4202,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4186,
											"end": 4202,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4131,
											"end": 4208,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4131,
											"end": 4208,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4131,
											"end": 4208,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4131,
											"end": 4208,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4214,
											"end": 4336,
											"name": "tag",
											"source": 14,
											"value": "145"
										},
										{
											"begin": 4214,
											"end": 4336,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4287,
											"end": 4311,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "248"
										},
										{
											"begin": 4305,
											"end": 4310,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4287,
											"end": 4311,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 4287,
											"end": 4311,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4287,
											"end": 4311,
											"name": "tag",
											"source": 14,
											"value": "248"
										},
										{
											"begin": 4287,
											"end": 4311,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4280,
											"end": 4285,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4277,
											"end": 4312,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 4267,
											"end": 4330,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "249"
										},
										{
											"begin": 4267,
											"end": 4330,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4326,
											"end": 4327,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4323,
											"end": 4324,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4316,
											"end": 4328,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4267,
											"end": 4330,
											"name": "tag",
											"source": 14,
											"value": "249"
										},
										{
											"begin": 4267,
											"end": 4330,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4214,
											"end": 4336,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4214,
											"end": 4336,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4342,
											"end": 4481,
											"name": "tag",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 4342,
											"end": 4481,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4388,
											"end": 4393,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4426,
											"end": 4432,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4413,
											"end": 4433,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 4404,
											"end": 4433,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4404,
											"end": 4433,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4442,
											"end": 4475,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "251"
										},
										{
											"begin": 4469,
											"end": 4474,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4442,
											"end": 4475,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "145"
										},
										{
											"begin": 4442,
											"end": 4475,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4442,
											"end": 4475,
											"name": "tag",
											"source": 14,
											"value": "251"
										},
										{
											"begin": 4442,
											"end": 4475,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4342,
											"end": 4481,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4342,
											"end": 4481,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4342,
											"end": 4481,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4342,
											"end": 4481,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4342,
											"end": 4481,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4487,
											"end": 4609,
											"name": "tag",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 4487,
											"end": 4609,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4560,
											"end": 4584,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "253"
										},
										{
											"begin": 4578,
											"end": 4583,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4560,
											"end": 4584,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "135"
										},
										{
											"begin": 4560,
											"end": 4584,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4560,
											"end": 4584,
											"name": "tag",
											"source": 14,
											"value": "253"
										},
										{
											"begin": 4560,
											"end": 4584,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4553,
											"end": 4558,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4550,
											"end": 4585,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 4540,
											"end": 4603,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "254"
										},
										{
											"begin": 4540,
											"end": 4603,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4599,
											"end": 4600,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4596,
											"end": 4597,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4589,
											"end": 4601,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4540,
											"end": 4603,
											"name": "tag",
											"source": 14,
											"value": "254"
										},
										{
											"begin": 4540,
											"end": 4603,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4487,
											"end": 4609,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4487,
											"end": 4609,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4615,
											"end": 4754,
											"name": "tag",
											"source": 14,
											"value": "148"
										},
										{
											"begin": 4615,
											"end": 4754,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4661,
											"end": 4666,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4699,
											"end": 4705,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4686,
											"end": 4706,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 4677,
											"end": 4706,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4677,
											"end": 4706,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4715,
											"end": 4748,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "256"
										},
										{
											"begin": 4742,
											"end": 4747,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4715,
											"end": 4748,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 4715,
											"end": 4748,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4715,
											"end": 4748,
											"name": "tag",
											"source": 14,
											"value": "256"
										},
										{
											"begin": 4715,
											"end": 4748,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4615,
											"end": 4754,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4615,
											"end": 4754,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4615,
											"end": 4754,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4615,
											"end": 4754,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4615,
											"end": 4754,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4803,
											"end": 6265,
											"name": "tag",
											"source": 14,
											"value": "149"
										},
										{
											"begin": 4803,
											"end": 6265,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4883,
											"end": 4888,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4927,
											"end": 4931,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 4915,
											"end": 4924,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4910,
											"end": 4913,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4906,
											"end": 4925,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4902,
											"end": 4932,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 4899,
											"end": 5016,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4899,
											"end": 5016,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "258"
										},
										{
											"begin": 4899,
											"end": 5016,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4935,
											"end": 5014,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "259"
										},
										{
											"begin": 4935,
											"end": 5014,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "126"
										},
										{
											"begin": 4935,
											"end": 5014,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4935,
											"end": 5014,
											"name": "tag",
											"source": 14,
											"value": "259"
										},
										{
											"begin": 4935,
											"end": 5014,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4899,
											"end": 5016,
											"name": "tag",
											"source": 14,
											"value": "258"
										},
										{
											"begin": 4899,
											"end": 5016,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5034,
											"end": 5055,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "260"
										},
										{
											"begin": 5050,
											"end": 5054,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 5034,
											"end": 5055,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "129"
										},
										{
											"begin": 5034,
											"end": 5055,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5034,
											"end": 5055,
											"name": "tag",
											"source": 14,
											"value": "260"
										},
										{
											"begin": 5034,
											"end": 5055,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5025,
											"end": 5055,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5025,
											"end": 5055,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5149,
											"end": 5150,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5138,
											"end": 5147,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5134,
											"end": 5151,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5121,
											"end": 5152,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 5179,
											"end": 5197,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5171,
											"end": 5177,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5168,
											"end": 5198,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 5165,
											"end": 5282,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5165,
											"end": 5282,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "261"
										},
										{
											"begin": 5165,
											"end": 5282,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5201,
											"end": 5280,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "262"
										},
										{
											"begin": 5201,
											"end": 5280,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "130"
										},
										{
											"begin": 5201,
											"end": 5280,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5201,
											"end": 5280,
											"name": "tag",
											"source": 14,
											"value": "262"
										},
										{
											"begin": 5201,
											"end": 5280,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5165,
											"end": 5282,
											"name": "tag",
											"source": 14,
											"value": "261"
										},
										{
											"begin": 5165,
											"end": 5282,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5321,
											"end": 5410,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "263"
										},
										{
											"begin": 5406,
											"end": 5409,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5397,
											"end": 5403,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5386,
											"end": 5395,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5382,
											"end": 5404,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5321,
											"end": 5410,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "140"
										},
										{
											"begin": 5321,
											"end": 5410,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5321,
											"end": 5410,
											"name": "tag",
											"source": 14,
											"value": "263"
										},
										{
											"begin": 5321,
											"end": 5410,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5314,
											"end": 5318,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5307,
											"end": 5312,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5303,
											"end": 5319,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5296,
											"end": 5411,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5065,
											"end": 5422,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5494,
											"end": 5496,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5535,
											"end": 5584,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "264"
										},
										{
											"begin": 5580,
											"end": 5583,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5571,
											"end": 5577,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5560,
											"end": 5569,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5556,
											"end": 5578,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5535,
											"end": 5584,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "143"
										},
										{
											"begin": 5535,
											"end": 5584,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5535,
											"end": 5584,
											"name": "tag",
											"source": 14,
											"value": "264"
										},
										{
											"begin": 5535,
											"end": 5584,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5528,
											"end": 5532,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5521,
											"end": 5526,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5517,
											"end": 5533,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5510,
											"end": 5585,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5432,
											"end": 5596,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5662,
											"end": 5664,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5703,
											"end": 5752,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "265"
										},
										{
											"begin": 5748,
											"end": 5751,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5739,
											"end": 5745,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5728,
											"end": 5737,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5724,
											"end": 5746,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5703,
											"end": 5752,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 5703,
											"end": 5752,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5703,
											"end": 5752,
											"name": "tag",
											"source": 14,
											"value": "265"
										},
										{
											"begin": 5703,
											"end": 5752,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5696,
											"end": 5700,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5689,
											"end": 5694,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5685,
											"end": 5701,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5678,
											"end": 5753,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5606,
											"end": 5764,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5826,
											"end": 5828,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 5867,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "266"
										},
										{
											"begin": 5912,
											"end": 5915,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5903,
											"end": 5909,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5892,
											"end": 5901,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 5888,
											"end": 5910,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5867,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "148"
										},
										{
											"begin": 5867,
											"end": 5916,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5867,
											"end": 5916,
											"name": "tag",
											"source": 14,
											"value": "266"
										},
										{
											"begin": 5867,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5860,
											"end": 5864,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 5853,
											"end": 5858,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5849,
											"end": 5865,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5842,
											"end": 5917,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5774,
											"end": 5928,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5988,
											"end": 5991,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 6030,
											"end": 6079,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "267"
										},
										{
											"begin": 6075,
											"end": 6078,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6066,
											"end": 6072,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6055,
											"end": 6064,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6051,
											"end": 6073,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6030,
											"end": 6079,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "148"
										},
										{
											"begin": 6030,
											"end": 6079,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6030,
											"end": 6079,
											"name": "tag",
											"source": 14,
											"value": "267"
										},
										{
											"begin": 6030,
											"end": 6079,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6023,
											"end": 6027,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 6016,
											"end": 6021,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6012,
											"end": 6028,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6005,
											"end": 6080,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5938,
											"end": 6091,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6155,
											"end": 6158,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 6197,
											"end": 6246,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "268"
										},
										{
											"begin": 6242,
											"end": 6245,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6233,
											"end": 6239,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6222,
											"end": 6231,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6218,
											"end": 6240,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6197,
											"end": 6246,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "148"
										},
										{
											"begin": 6197,
											"end": 6246,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6197,
											"end": 6246,
											"name": "tag",
											"source": 14,
											"value": "268"
										},
										{
											"begin": 6197,
											"end": 6246,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6190,
											"end": 6194,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 6183,
											"end": 6188,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6179,
											"end": 6195,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6172,
											"end": 6247,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6101,
											"end": 6258,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4803,
											"end": 6265,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4803,
											"end": 6265,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4803,
											"end": 6265,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4803,
											"end": 6265,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4803,
											"end": 6265,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 6271,
											"end": 6967,
											"name": "tag",
											"source": 14,
											"value": "8"
										},
										{
											"begin": 6271,
											"end": 6967,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6370,
											"end": 6376,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6378,
											"end": 6384,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6427,
											"end": 6429,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6415,
											"end": 6424,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6406,
											"end": 6413,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6402,
											"end": 6425,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 6398,
											"end": 6430,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 6395,
											"end": 6514,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6395,
											"end": 6514,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "270"
										},
										{
											"begin": 6395,
											"end": 6514,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6433,
											"end": 6512,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "271"
										},
										{
											"begin": 6433,
											"end": 6512,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "124"
										},
										{
											"begin": 6433,
											"end": 6512,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6433,
											"end": 6512,
											"name": "tag",
											"source": 14,
											"value": "271"
										},
										{
											"begin": 6433,
											"end": 6512,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6395,
											"end": 6514,
											"name": "tag",
											"source": 14,
											"value": "270"
										},
										{
											"begin": 6395,
											"end": 6514,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6581,
											"end": 6582,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6579,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6566,
											"end": 6583,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6553,
											"end": 6584,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 6611,
											"end": 6629,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6603,
											"end": 6609,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6600,
											"end": 6630,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 6597,
											"end": 6714,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6597,
											"end": 6714,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "272"
										},
										{
											"begin": 6597,
											"end": 6714,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6633,
											"end": 6712,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "273"
										},
										{
											"begin": 6633,
											"end": 6712,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "125"
										},
										{
											"begin": 6633,
											"end": 6712,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6633,
											"end": 6712,
											"name": "tag",
											"source": 14,
											"value": "273"
										},
										{
											"begin": 6633,
											"end": 6712,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6597,
											"end": 6714,
											"name": "tag",
											"source": 14,
											"value": "272"
										},
										{
											"begin": 6597,
											"end": 6714,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6738,
											"end": 6822,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "274"
										},
										{
											"begin": 6814,
											"end": 6821,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6805,
											"end": 6811,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6794,
											"end": 6803,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 6790,
											"end": 6812,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6738,
											"end": 6822,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "149"
										},
										{
											"begin": 6738,
											"end": 6822,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6738,
											"end": 6822,
											"name": "tag",
											"source": 14,
											"value": "274"
										},
										{
											"begin": 6738,
											"end": 6822,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6728,
											"end": 6822,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6728,
											"end": 6822,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6524,
											"end": 6832,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6871,
											"end": 6873,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6897,
											"end": 6950,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "275"
										},
										{
											"begin": 6942,
											"end": 6949,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6933,
											"end": 6939,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6922,
											"end": 6931,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 6918,
											"end": 6940,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6897,
											"end": 6950,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "143"
										},
										{
											"begin": 6897,
											"end": 6950,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 6897,
											"end": 6950,
											"name": "tag",
											"source": 14,
											"value": "275"
										},
										{
											"begin": 6897,
											"end": 6950,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6887,
											"end": 6950,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 6887,
											"end": 6950,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6842,
											"end": 6960,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6271,
											"end": 6967,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6271,
											"end": 6967,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6271,
											"end": 6967,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6271,
											"end": 6967,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6271,
											"end": 6967,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6271,
											"end": 6967,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 6973,
											"end": 7091,
											"name": "tag",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 6973,
											"end": 7091,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7060,
											"end": 7084,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "277"
										},
										{
											"begin": 7078,
											"end": 7083,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7060,
											"end": 7084,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "135"
										},
										{
											"begin": 7060,
											"end": 7084,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7060,
											"end": 7084,
											"name": "tag",
											"source": 14,
											"value": "277"
										},
										{
											"begin": 7060,
											"end": 7084,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7055,
											"end": 7058,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7048,
											"end": 7085,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6973,
											"end": 7091,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6973,
											"end": 7091,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6973,
											"end": 7091,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 7097,
											"end": 7319,
											"name": "tag",
											"source": 14,
											"value": "13"
										},
										{
											"begin": 7097,
											"end": 7319,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7190,
											"end": 7194,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7228,
											"end": 7230,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7217,
											"end": 7226,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7213,
											"end": 7231,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7205,
											"end": 7231,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7205,
											"end": 7231,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7312,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "279"
										},
										{
											"begin": 7309,
											"end": 7310,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7298,
											"end": 7307,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 7294,
											"end": 7311,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7285,
											"end": 7291,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 7241,
											"end": 7312,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 7241,
											"end": 7312,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7241,
											"end": 7312,
											"name": "tag",
											"source": 14,
											"value": "279"
										},
										{
											"begin": 7241,
											"end": 7312,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7097,
											"end": 7319,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 7097,
											"end": 7319,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 7097,
											"end": 7319,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7097,
											"end": 7319,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7097,
											"end": 7319,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 7325,
											"end": 7505,
											"name": "tag",
											"source": 14,
											"value": "21"
										},
										{
											"begin": 7325,
											"end": 7505,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7373,
											"end": 7450,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7370,
											"end": 7371,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7363,
											"end": 7451,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7470,
											"end": 7474,
											"name": "PUSH",
											"source": 14,
											"value": "32"
										},
										{
											"begin": 7467,
											"end": 7468,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 7460,
											"end": 7475,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7494,
											"end": 7498,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 7491,
											"end": 7492,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7484,
											"end": 7499,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 7511,
											"end": 7629,
											"name": "tag",
											"source": 14,
											"value": "151"
										},
										{
											"begin": 7511,
											"end": 7629,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7598,
											"end": 7622,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "282"
										},
										{
											"begin": 7616,
											"end": 7621,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7598,
											"end": 7622,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 7598,
											"end": 7622,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7598,
											"end": 7622,
											"name": "tag",
											"source": 14,
											"value": "282"
										},
										{
											"begin": 7598,
											"end": 7622,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7593,
											"end": 7596,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7586,
											"end": 7623,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7511,
											"end": 7629,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7511,
											"end": 7629,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7511,
											"end": 7629,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 7635,
											"end": 8077,
											"name": "tag",
											"source": 14,
											"value": "31"
										},
										{
											"begin": 7635,
											"end": 8077,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7784,
											"end": 7788,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7822,
											"end": 7824,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 7811,
											"end": 7820,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7807,
											"end": 7825,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7799,
											"end": 7825,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7799,
											"end": 7825,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7835,
											"end": 7906,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "284"
										},
										{
											"begin": 7903,
											"end": 7904,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7892,
											"end": 7901,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 7888,
											"end": 7905,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7879,
											"end": 7885,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 7835,
											"end": 7906,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 7835,
											"end": 7906,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7835,
											"end": 7906,
											"name": "tag",
											"source": 14,
											"value": "284"
										},
										{
											"begin": 7835,
											"end": 7906,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7916,
											"end": 7988,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "285"
										},
										{
											"begin": 7984,
											"end": 7986,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7973,
											"end": 7982,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 7969,
											"end": 7987,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7960,
											"end": 7966,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 7916,
											"end": 7988,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 7916,
											"end": 7988,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7916,
											"end": 7988,
											"name": "tag",
											"source": 14,
											"value": "285"
										},
										{
											"begin": 7916,
											"end": 7988,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7998,
											"end": 8070,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "286"
										},
										{
											"begin": 8066,
											"end": 8068,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 8055,
											"end": 8064,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8051,
											"end": 8069,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8042,
											"end": 8048,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 7998,
											"end": 8070,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "151"
										},
										{
											"begin": 7998,
											"end": 8070,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 7998,
											"end": 8070,
											"name": "tag",
											"source": 14,
											"value": "286"
										},
										{
											"begin": 7998,
											"end": 8070,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7635,
											"end": 8077,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 7635,
											"end": 8077,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 7635,
											"end": 8077,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7635,
											"end": 8077,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7635,
											"end": 8077,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7635,
											"end": 8077,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7635,
											"end": 8077,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8083,
											"end": 8169,
											"name": "tag",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 8083,
											"end": 8169,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8118,
											"end": 8125,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8158,
											"end": 8162,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 8151,
											"end": 8156,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8147,
											"end": 8163,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 8136,
											"end": 8163,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8136,
											"end": 8163,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8083,
											"end": 8169,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8083,
											"end": 8169,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8083,
											"end": 8169,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8083,
											"end": 8169,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8175,
											"end": 8287,
											"name": "tag",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 8175,
											"end": 8287,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8258,
											"end": 8280,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "289"
										},
										{
											"begin": 8274,
											"end": 8279,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8258,
											"end": 8280,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 8258,
											"end": 8280,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 8258,
											"end": 8280,
											"name": "tag",
											"source": 14,
											"value": "289"
										},
										{
											"begin": 8258,
											"end": 8280,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8253,
											"end": 8256,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8246,
											"end": 8281,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8175,
											"end": 8287,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8175,
											"end": 8287,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8175,
											"end": 8287,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8293,
											"end": 8407,
											"name": "tag",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 8293,
											"end": 8407,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8360,
											"end": 8366,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8394,
											"end": 8399,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8388,
											"end": 8400,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 8378,
											"end": 8400,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8378,
											"end": 8400,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8293,
											"end": 8407,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8293,
											"end": 8407,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8293,
											"end": 8407,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8293,
											"end": 8407,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8413,
											"end": 8597,
											"name": "tag",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 8413,
											"end": 8597,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8512,
											"end": 8523,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8546,
											"end": 8552,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8541,
											"end": 8544,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8534,
											"end": 8553,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8586,
											"end": 8590,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8581,
											"end": 8584,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8577,
											"end": 8591,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8562,
											"end": 8591,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8562,
											"end": 8591,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8413,
											"end": 8597,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 8413,
											"end": 8597,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8413,
											"end": 8597,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8413,
											"end": 8597,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8413,
											"end": 8597,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8603,
											"end": 8735,
											"name": "tag",
											"source": 14,
											"value": "156"
										},
										{
											"begin": 8603,
											"end": 8735,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8670,
											"end": 8674,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8693,
											"end": 8696,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8685,
											"end": 8696,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8685,
											"end": 8696,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8723,
											"end": 8727,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8718,
											"end": 8721,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8714,
											"end": 8728,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8706,
											"end": 8728,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8706,
											"end": 8728,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8603,
											"end": 8735,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8603,
											"end": 8735,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8603,
											"end": 8735,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8603,
											"end": 8735,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8741,
											"end": 8849,
											"name": "tag",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 8741,
											"end": 8849,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8818,
											"end": 8842,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "294"
										},
										{
											"begin": 8836,
											"end": 8841,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8818,
											"end": 8842,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 8818,
											"end": 8842,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 8818,
											"end": 8842,
											"name": "tag",
											"source": 14,
											"value": "294"
										},
										{
											"begin": 8818,
											"end": 8842,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8813,
											"end": 8816,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8806,
											"end": 8843,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8741,
											"end": 8849,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8741,
											"end": 8849,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8741,
											"end": 8849,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 8855,
											"end": 9034,
											"name": "tag",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 8855,
											"end": 9034,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8924,
											"end": 8934,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 8945,
											"end": 8991,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "296"
										},
										{
											"begin": 8987,
											"end": 8990,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8979,
											"end": 8985,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8945,
											"end": 8991,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 8945,
											"end": 8991,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 8945,
											"end": 8991,
											"name": "tag",
											"source": 14,
											"value": "296"
										},
										{
											"begin": 8945,
											"end": 8991,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9023,
											"end": 9027,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9018,
											"end": 9021,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9014,
											"end": 9028,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9000,
											"end": 9028,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9000,
											"end": 9028,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8855,
											"end": 9034,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 8855,
											"end": 9034,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8855,
											"end": 9034,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8855,
											"end": 9034,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 8855,
											"end": 9034,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9040,
											"end": 9153,
											"name": "tag",
											"source": 14,
											"value": "159"
										},
										{
											"begin": 9040,
											"end": 9153,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9110,
											"end": 9114,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9142,
											"end": 9146,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9137,
											"end": 9140,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9133,
											"end": 9147,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9125,
											"end": 9147,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9125,
											"end": 9147,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9040,
											"end": 9153,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9040,
											"end": 9153,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9040,
											"end": 9153,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9040,
											"end": 9153,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9189,
											"end": 9921,
											"name": "tag",
											"source": 14,
											"value": "160"
										},
										{
											"begin": 9189,
											"end": 9921,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9308,
											"end": 9311,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9337,
											"end": 9391,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "299"
										},
										{
											"begin": 9385,
											"end": 9390,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9337,
											"end": 9391,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 9337,
											"end": 9391,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9337,
											"end": 9391,
											"name": "tag",
											"source": 14,
											"value": "299"
										},
										{
											"begin": 9337,
											"end": 9391,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9407,
											"end": 9493,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "300"
										},
										{
											"begin": 9486,
											"end": 9492,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9481,
											"end": 9484,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 9407,
											"end": 9493,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 9407,
											"end": 9493,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9407,
											"end": 9493,
											"name": "tag",
											"source": 14,
											"value": "300"
										},
										{
											"begin": 9407,
											"end": 9493,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9400,
											"end": 9493,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 9400,
											"end": 9493,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9517,
											"end": 9573,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "301"
										},
										{
											"begin": 9567,
											"end": 9572,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9517,
											"end": 9573,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "156"
										},
										{
											"begin": 9517,
											"end": 9573,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9517,
											"end": 9573,
											"name": "tag",
											"source": 14,
											"value": "301"
										},
										{
											"begin": 9517,
											"end": 9573,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9596,
											"end": 9603,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9627,
											"end": 9628,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 9612,
											"end": 9896,
											"name": "tag",
											"source": 14,
											"value": "302"
										},
										{
											"begin": 9612,
											"end": 9896,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9637,
											"end": 9643,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9634,
											"end": 9635,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9631,
											"end": 9644,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 9612,
											"end": 9896,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 9612,
											"end": 9896,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "304"
										},
										{
											"begin": 9612,
											"end": 9896,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 9713,
											"end": 9719,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9707,
											"end": 9720,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 9740,
											"end": 9803,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "305"
										},
										{
											"begin": 9799,
											"end": 9802,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 9784,
											"end": 9797,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9740,
											"end": 9803,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 9740,
											"end": 9803,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9740,
											"end": 9803,
											"name": "tag",
											"source": 14,
											"value": "305"
										},
										{
											"begin": 9740,
											"end": 9803,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9733,
											"end": 9803,
											"name": "SWAP8",
											"source": 14
										},
										{
											"begin": 9733,
											"end": 9803,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9826,
											"end": 9886,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "306"
										},
										{
											"begin": 9879,
											"end": 9885,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 9826,
											"end": 9886,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "159"
										},
										{
											"begin": 9826,
											"end": 9886,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 9826,
											"end": 9886,
											"name": "tag",
											"source": 14,
											"value": "306"
										},
										{
											"begin": 9826,
											"end": 9886,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9816,
											"end": 9886,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 9816,
											"end": 9886,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9672,
											"end": 9896,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9659,
											"end": 9660,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 9656,
											"end": 9657,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 9652,
											"end": 9661,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9647,
											"end": 9661,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9647,
											"end": 9661,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9612,
											"end": 9896,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "302"
										},
										{
											"begin": 9612,
											"end": 9896,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 9612,
											"end": 9896,
											"name": "tag",
											"source": 14,
											"value": "304"
										},
										{
											"begin": 9612,
											"end": 9896,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9616,
											"end": 9630,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9912,
											"end": 9915,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 9905,
											"end": 9915,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 9905,
											"end": 9915,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9313,
											"end": 9921,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9313,
											"end": 9921,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9313,
											"end": 9921,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9189,
											"end": 9921,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 9189,
											"end": 9921,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 9189,
											"end": 9921,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9189,
											"end": 9921,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9189,
											"end": 9921,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9927,
											"end": 10512,
											"name": "tag",
											"source": 14,
											"value": "41"
										},
										{
											"begin": 9927,
											"end": 10512,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10122,
											"end": 10126,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10160,
											"end": 10162,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 10149,
											"end": 10158,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10145,
											"end": 10163,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10137,
											"end": 10163,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10137,
											"end": 10163,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10173,
											"end": 10240,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "308"
										},
										{
											"begin": 10237,
											"end": 10238,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10226,
											"end": 10235,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10222,
											"end": 10239,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10213,
											"end": 10219,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 10173,
											"end": 10240,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 10173,
											"end": 10240,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 10173,
											"end": 10240,
											"name": "tag",
											"source": 14,
											"value": "308"
										},
										{
											"begin": 10173,
											"end": 10240,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10287,
											"end": 10296,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10281,
											"end": 10285,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10277,
											"end": 10297,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 10272,
											"end": 10274,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10261,
											"end": 10270,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10257,
											"end": 10275,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10250,
											"end": 10298,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10315,
											"end": 10423,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "309"
										},
										{
											"begin": 10418,
											"end": 10422,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10409,
											"end": 10415,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 10315,
											"end": 10423,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "160"
										},
										{
											"begin": 10315,
											"end": 10423,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 10315,
											"end": 10423,
											"name": "tag",
											"source": 14,
											"value": "309"
										},
										{
											"begin": 10315,
											"end": 10423,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10307,
											"end": 10423,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10307,
											"end": 10423,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10433,
											"end": 10505,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "310"
										},
										{
											"begin": 10501,
											"end": 10503,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 10490,
											"end": 10499,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10486,
											"end": 10504,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10477,
											"end": 10483,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 10433,
											"end": 10505,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "151"
										},
										{
											"begin": 10433,
											"end": 10505,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 10433,
											"end": 10505,
											"name": "tag",
											"source": 14,
											"value": "310"
										},
										{
											"begin": 10433,
											"end": 10505,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9927,
											"end": 10512,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 9927,
											"end": 10512,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 9927,
											"end": 10512,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9927,
											"end": 10512,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9927,
											"end": 10512,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9927,
											"end": 10512,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 9927,
											"end": 10512,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 10518,
											"end": 10636,
											"name": "tag",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 10518,
											"end": 10636,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10605,
											"end": 10629,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "312"
										},
										{
											"begin": 10623,
											"end": 10628,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10605,
											"end": 10629,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 10605,
											"end": 10629,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 10605,
											"end": 10629,
											"name": "tag",
											"source": 14,
											"value": "312"
										},
										{
											"begin": 10605,
											"end": 10629,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10600,
											"end": 10603,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10593,
											"end": 10630,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10518,
											"end": 10636,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10518,
											"end": 10636,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10518,
											"end": 10636,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 10642,
											"end": 10771,
											"name": "tag",
											"source": 14,
											"value": "162"
										},
										{
											"begin": 10642,
											"end": 10771,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10724,
											"end": 10730,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10758,
											"end": 10763,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10752,
											"end": 10764,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 10742,
											"end": 10764,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10742,
											"end": 10764,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10642,
											"end": 10771,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10642,
											"end": 10771,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10642,
											"end": 10771,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10642,
											"end": 10771,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 10777,
											"end": 10951,
											"name": "tag",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 10777,
											"end": 10951,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10866,
											"end": 10877,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 10900,
											"end": 10906,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10895,
											"end": 10898,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10888,
											"end": 10907,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10940,
											"end": 10944,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10935,
											"end": 10938,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10931,
											"end": 10945,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10916,
											"end": 10945,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10916,
											"end": 10945,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10777,
											"end": 10951,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 10777,
											"end": 10951,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10777,
											"end": 10951,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10777,
											"end": 10951,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10777,
											"end": 10951,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 10957,
											"end": 11104,
											"name": "tag",
											"source": 14,
											"value": "164"
										},
										{
											"begin": 10957,
											"end": 11104,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11039,
											"end": 11043,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11062,
											"end": 11065,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11054,
											"end": 11065,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11054,
											"end": 11065,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11092,
											"end": 11096,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11087,
											"end": 11090,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11083,
											"end": 11097,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11075,
											"end": 11097,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11075,
											"end": 11097,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10957,
											"end": 11104,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10957,
											"end": 11104,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10957,
											"end": 11104,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 10957,
											"end": 11104,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11110,
											"end": 11170,
											"name": "tag",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 11110,
											"end": 11170,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11138,
											"end": 11141,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11159,
											"end": 11164,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11152,
											"end": 11164,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11152,
											"end": 11164,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11110,
											"end": 11170,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11110,
											"end": 11170,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11110,
											"end": 11170,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11110,
											"end": 11170,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11176,
											"end": 11318,
											"name": "tag",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 11176,
											"end": 11318,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11226,
											"end": 11235,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11259,
											"end": 11312,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "318"
										},
										{
											"begin": 11277,
											"end": 11311,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "319"
										},
										{
											"begin": 11286,
											"end": 11310,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "320"
										},
										{
											"begin": 11304,
											"end": 11309,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 11286,
											"end": 11310,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "134"
										},
										{
											"begin": 11286,
											"end": 11310,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11286,
											"end": 11310,
											"name": "tag",
											"source": 14,
											"value": "320"
										},
										{
											"begin": 11286,
											"end": 11310,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11277,
											"end": 11311,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 11277,
											"end": 11311,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11277,
											"end": 11311,
											"name": "tag",
											"source": 14,
											"value": "319"
										},
										{
											"begin": 11277,
											"end": 11311,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11259,
											"end": 11312,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "134"
										},
										{
											"begin": 11259,
											"end": 11312,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11259,
											"end": 11312,
											"name": "tag",
											"source": 14,
											"value": "318"
										},
										{
											"begin": 11259,
											"end": 11312,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11246,
											"end": 11312,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11246,
											"end": 11312,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11176,
											"end": 11318,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11176,
											"end": 11318,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11176,
											"end": 11318,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11176,
											"end": 11318,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11324,
											"end": 11450,
											"name": "tag",
											"source": 14,
											"value": "167"
										},
										{
											"begin": 11324,
											"end": 11450,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11374,
											"end": 11383,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11407,
											"end": 11444,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "322"
										},
										{
											"begin": 11438,
											"end": 11443,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11407,
											"end": 11444,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 11407,
											"end": 11444,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11407,
											"end": 11444,
											"name": "tag",
											"source": 14,
											"value": "322"
										},
										{
											"begin": 11407,
											"end": 11444,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11394,
											"end": 11444,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11394,
											"end": 11444,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11324,
											"end": 11450,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11324,
											"end": 11450,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11324,
											"end": 11450,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11324,
											"end": 11450,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11456,
											"end": 11597,
											"name": "tag",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 11456,
											"end": 11597,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11521,
											"end": 11530,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11554,
											"end": 11591,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "324"
										},
										{
											"begin": 11585,
											"end": 11590,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11554,
											"end": 11591,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "167"
										},
										{
											"begin": 11554,
											"end": 11591,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11554,
											"end": 11591,
											"name": "tag",
											"source": 14,
											"value": "324"
										},
										{
											"begin": 11554,
											"end": 11591,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11541,
											"end": 11591,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11541,
											"end": 11591,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11456,
											"end": 11597,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11456,
											"end": 11597,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11456,
											"end": 11597,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11456,
											"end": 11597,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11603,
											"end": 11754,
											"name": "tag",
											"source": 14,
											"value": "169"
										},
										{
											"begin": 11603,
											"end": 11754,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11695,
											"end": 11747,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "326"
										},
										{
											"begin": 11741,
											"end": 11746,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11695,
											"end": 11747,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 11695,
											"end": 11747,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11695,
											"end": 11747,
											"name": "tag",
											"source": 14,
											"value": "326"
										},
										{
											"begin": 11695,
											"end": 11747,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11690,
											"end": 11693,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11683,
											"end": 11748,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11603,
											"end": 11754,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11603,
											"end": 11754,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11603,
											"end": 11754,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11760,
											"end": 11969,
											"name": "tag",
											"source": 14,
											"value": "170"
										},
										{
											"begin": 11760,
											"end": 11969,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11844,
											"end": 11854,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11865,
											"end": 11926,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "328"
										},
										{
											"begin": 11922,
											"end": 11925,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11914,
											"end": 11920,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11865,
											"end": 11926,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "169"
										},
										{
											"begin": 11865,
											"end": 11926,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11865,
											"end": 11926,
											"name": "tag",
											"source": 14,
											"value": "328"
										},
										{
											"begin": 11865,
											"end": 11926,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11958,
											"end": 11962,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11953,
											"end": 11956,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 11949,
											"end": 11963,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11935,
											"end": 11963,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11935,
											"end": 11963,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11760,
											"end": 11969,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 11760,
											"end": 11969,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11760,
											"end": 11969,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11760,
											"end": 11969,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11760,
											"end": 11969,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11975,
											"end": 12103,
											"name": "tag",
											"source": 14,
											"value": "171"
										},
										{
											"begin": 11975,
											"end": 12103,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12060,
											"end": 12064,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12092,
											"end": 12096,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 12087,
											"end": 12090,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12083,
											"end": 12097,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12075,
											"end": 12097,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12075,
											"end": 12097,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11975,
											"end": 12103,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11975,
											"end": 12103,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11975,
											"end": 12103,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11975,
											"end": 12103,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12147,
											"end": 12934,
											"name": "tag",
											"source": 14,
											"value": "172"
										},
										{
											"begin": 12147,
											"end": 12934,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12271,
											"end": 12274,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12300,
											"end": 12369,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "331"
										},
										{
											"begin": 12363,
											"end": 12368,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12300,
											"end": 12369,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "162"
										},
										{
											"begin": 12300,
											"end": 12369,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 12300,
											"end": 12369,
											"name": "tag",
											"source": 14,
											"value": "331"
										},
										{
											"begin": 12300,
											"end": 12369,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12385,
											"end": 12461,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "332"
										},
										{
											"begin": 12454,
											"end": 12460,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12449,
											"end": 12452,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 12385,
											"end": 12461,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 12385,
											"end": 12461,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 12385,
											"end": 12461,
											"name": "tag",
											"source": 14,
											"value": "332"
										},
										{
											"begin": 12385,
											"end": 12461,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12378,
											"end": 12461,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 12378,
											"end": 12461,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12485,
											"end": 12556,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 12550,
											"end": 12555,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12485,
											"end": 12556,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "164"
										},
										{
											"begin": 12485,
											"end": 12556,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 12485,
											"end": 12556,
											"name": "tag",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 12485,
											"end": 12556,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12579,
											"end": 12586,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 12610,
											"end": 12611,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12595,
											"end": 12909,
											"name": "tag",
											"source": 14,
											"value": "334"
										},
										{
											"begin": 12595,
											"end": 12909,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12620,
											"end": 12626,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12617,
											"end": 12618,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12614,
											"end": 12627,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 12595,
											"end": 12909,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 12595,
											"end": 12909,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "336"
										},
										{
											"begin": 12595,
											"end": 12909,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12696,
											"end": 12702,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12690,
											"end": 12703,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12723,
											"end": 12801,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "337"
										},
										{
											"begin": 12797,
											"end": 12800,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 12782,
											"end": 12795,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12723,
											"end": 12801,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "170"
										},
										{
											"begin": 12723,
											"end": 12801,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 12723,
											"end": 12801,
											"name": "tag",
											"source": 14,
											"value": "337"
										},
										{
											"begin": 12723,
											"end": 12801,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12716,
											"end": 12801,
											"name": "SWAP8",
											"source": 14
										},
										{
											"begin": 12716,
											"end": 12801,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12824,
											"end": 12899,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "338"
										},
										{
											"begin": 12892,
											"end": 12898,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12824,
											"end": 12899,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "171"
										},
										{
											"begin": 12824,
											"end": 12899,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 12824,
											"end": 12899,
											"name": "tag",
											"source": 14,
											"value": "338"
										},
										{
											"begin": 12824,
											"end": 12899,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12814,
											"end": 12899,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12814,
											"end": 12899,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12655,
											"end": 12909,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12642,
											"end": 12643,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 12639,
											"end": 12640,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 12635,
											"end": 12644,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12630,
											"end": 12644,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12630,
											"end": 12644,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12595,
											"end": 12909,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "334"
										},
										{
											"begin": 12595,
											"end": 12909,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12595,
											"end": 12909,
											"name": "tag",
											"source": 14,
											"value": "336"
										},
										{
											"begin": 12595,
											"end": 12909,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12599,
											"end": 12613,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12925,
											"end": 12928,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 12918,
											"end": 12928,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 12918,
											"end": 12928,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12276,
											"end": 12934,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12276,
											"end": 12934,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12276,
											"end": 12934,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12147,
											"end": 12934,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12147,
											"end": 12934,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12147,
											"end": 12934,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12147,
											"end": 12934,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12147,
											"end": 12934,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12940,
											"end": 13114,
											"name": "tag",
											"source": 14,
											"value": "173"
										},
										{
											"begin": 12940,
											"end": 13114,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13029,
											"end": 13040,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13063,
											"end": 13069,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13058,
											"end": 13061,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13051,
											"end": 13070,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13103,
											"end": 13107,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 13098,
											"end": 13101,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13094,
											"end": 13108,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13079,
											"end": 13108,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13079,
											"end": 13108,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12940,
											"end": 13114,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12940,
											"end": 13114,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12940,
											"end": 13114,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12940,
											"end": 13114,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 12940,
											"end": 13114,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13150,
											"end": 13862,
											"name": "tag",
											"source": 14,
											"value": "174"
										},
										{
											"begin": 13150,
											"end": 13862,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13259,
											"end": 13262,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13288,
											"end": 13342,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "341"
										},
										{
											"begin": 13336,
											"end": 13341,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13288,
											"end": 13342,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 13288,
											"end": 13342,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 13288,
											"end": 13342,
											"name": "tag",
											"source": 14,
											"value": "341"
										},
										{
											"begin": 13288,
											"end": 13342,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13358,
											"end": 13434,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "342"
										},
										{
											"begin": 13427,
											"end": 13433,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13422,
											"end": 13425,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 13358,
											"end": 13434,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "173"
										},
										{
											"begin": 13358,
											"end": 13434,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 13358,
											"end": 13434,
											"name": "tag",
											"source": 14,
											"value": "342"
										},
										{
											"begin": 13358,
											"end": 13434,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13351,
											"end": 13434,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 13351,
											"end": 13434,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13458,
											"end": 13514,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "343"
										},
										{
											"begin": 13508,
											"end": 13513,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13458,
											"end": 13514,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "156"
										},
										{
											"begin": 13458,
											"end": 13514,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 13458,
											"end": 13514,
											"name": "tag",
											"source": 14,
											"value": "343"
										},
										{
											"begin": 13458,
											"end": 13514,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13537,
											"end": 13544,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13568,
											"end": 13569,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13553,
											"end": 13837,
											"name": "tag",
											"source": 14,
											"value": "344"
										},
										{
											"begin": 13553,
											"end": 13837,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13578,
											"end": 13584,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13575,
											"end": 13576,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13572,
											"end": 13585,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 13553,
											"end": 13837,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 13553,
											"end": 13837,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "346"
										},
										{
											"begin": 13553,
											"end": 13837,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 13654,
											"end": 13660,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13648,
											"end": 13661,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 13681,
											"end": 13744,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "347"
										},
										{
											"begin": 13740,
											"end": 13743,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 13725,
											"end": 13738,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13681,
											"end": 13744,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 13681,
											"end": 13744,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 13681,
											"end": 13744,
											"name": "tag",
											"source": 14,
											"value": "347"
										},
										{
											"begin": 13681,
											"end": 13744,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13674,
											"end": 13744,
											"name": "SWAP8",
											"source": 14
										},
										{
											"begin": 13674,
											"end": 13744,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13767,
											"end": 13827,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "348"
										},
										{
											"begin": 13820,
											"end": 13826,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13767,
											"end": 13827,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "159"
										},
										{
											"begin": 13767,
											"end": 13827,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 13767,
											"end": 13827,
											"name": "tag",
											"source": 14,
											"value": "348"
										},
										{
											"begin": 13767,
											"end": 13827,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13757,
											"end": 13827,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13757,
											"end": 13827,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13613,
											"end": 13837,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13600,
											"end": 13601,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 13597,
											"end": 13598,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13593,
											"end": 13602,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13588,
											"end": 13602,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13588,
											"end": 13602,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13553,
											"end": 13837,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "344"
										},
										{
											"begin": 13553,
											"end": 13837,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 13553,
											"end": 13837,
											"name": "tag",
											"source": 14,
											"value": "346"
										},
										{
											"begin": 13553,
											"end": 13837,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13557,
											"end": 13571,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13853,
											"end": 13856,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 13846,
											"end": 13856,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 13846,
											"end": 13856,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13264,
											"end": 13862,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13264,
											"end": 13862,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13264,
											"end": 13862,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13150,
											"end": 13862,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13150,
											"end": 13862,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13150,
											"end": 13862,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13150,
											"end": 13862,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13150,
											"end": 13862,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13868,
											"end": 13966,
											"name": "tag",
											"source": 14,
											"value": "175"
										},
										{
											"begin": 13868,
											"end": 13966,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13919,
											"end": 13925,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13953,
											"end": 13958,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13947,
											"end": 13959,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 13937,
											"end": 13959,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13937,
											"end": 13959,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13868,
											"end": 13966,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13868,
											"end": 13966,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13868,
											"end": 13966,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13868,
											"end": 13966,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13972,
											"end": 14130,
											"name": "tag",
											"source": 14,
											"value": "176"
										},
										{
											"begin": 13972,
											"end": 14130,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14045,
											"end": 14056,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14079,
											"end": 14085,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14074,
											"end": 14077,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14067,
											"end": 14086,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14119,
											"end": 14123,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 14114,
											"end": 14117,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14110,
											"end": 14124,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14095,
											"end": 14124,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14095,
											"end": 14124,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13972,
											"end": 14130,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13972,
											"end": 14130,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13972,
											"end": 14130,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13972,
											"end": 14130,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 13972,
											"end": 14130,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 14136,
											"end": 14443,
											"name": "tag",
											"source": 14,
											"value": "177"
										},
										{
											"begin": 14136,
											"end": 14443,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14204,
											"end": 14205,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14214,
											"end": 14327,
											"name": "tag",
											"source": 14,
											"value": "352"
										},
										{
											"begin": 14214,
											"end": 14327,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14228,
											"end": 14234,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 14225,
											"end": 14226,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14222,
											"end": 14235,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 14214,
											"end": 14327,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 14214,
											"end": 14327,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "354"
										},
										{
											"begin": 14214,
											"end": 14327,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 14313,
											"end": 14314,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 14308,
											"end": 14311,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14304,
											"end": 14315,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14298,
											"end": 14316,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 14294,
											"end": 14295,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14289,
											"end": 14292,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 14285,
											"end": 14296,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14278,
											"end": 14317,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14250,
											"end": 14252,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 14247,
											"end": 14248,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14243,
											"end": 14253,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14238,
											"end": 14253,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14238,
											"end": 14253,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14214,
											"end": 14327,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "352"
										},
										{
											"begin": 14214,
											"end": 14327,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 14214,
											"end": 14327,
											"name": "tag",
											"source": 14,
											"value": "354"
										},
										{
											"begin": 14214,
											"end": 14327,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14345,
											"end": 14351,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 14342,
											"end": 14343,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14339,
											"end": 14352,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 14336,
											"end": 14437,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 14336,
											"end": 14437,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "355"
										},
										{
											"begin": 14336,
											"end": 14437,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 14425,
											"end": 14426,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14416,
											"end": 14422,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 14411,
											"end": 14414,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 14407,
											"end": 14423,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14400,
											"end": 14427,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14336,
											"end": 14437,
											"name": "tag",
											"source": 14,
											"value": "355"
										},
										{
											"begin": 14336,
											"end": 14437,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14185,
											"end": 14443,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14136,
											"end": 14443,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14136,
											"end": 14443,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14136,
											"end": 14443,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14136,
											"end": 14443,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 14449,
											"end": 14789,
											"name": "tag",
											"source": 14,
											"value": "178"
										},
										{
											"begin": 14449,
											"end": 14789,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14525,
											"end": 14528,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14553,
											"end": 14591,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "357"
										},
										{
											"begin": 14585,
											"end": 14590,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14553,
											"end": 14591,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "175"
										},
										{
											"begin": 14553,
											"end": 14591,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 14553,
											"end": 14591,
											"name": "tag",
											"source": 14,
											"value": "357"
										},
										{
											"begin": 14553,
											"end": 14591,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14607,
											"end": 14667,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "358"
										},
										{
											"begin": 14660,
											"end": 14666,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14655,
											"end": 14658,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 14607,
											"end": 14667,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "176"
										},
										{
											"begin": 14607,
											"end": 14667,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 14607,
											"end": 14667,
											"name": "tag",
											"source": 14,
											"value": "358"
										},
										{
											"begin": 14607,
											"end": 14667,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14600,
											"end": 14667,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 14600,
											"end": 14667,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14676,
											"end": 14728,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "359"
										},
										{
											"begin": 14721,
											"end": 14727,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14716,
											"end": 14719,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 14709,
											"end": 14713,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 14702,
											"end": 14707,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 14698,
											"end": 14714,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14676,
											"end": 14728,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "177"
										},
										{
											"begin": 14676,
											"end": 14728,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 14676,
											"end": 14728,
											"name": "tag",
											"source": 14,
											"value": "359"
										},
										{
											"begin": 14676,
											"end": 14728,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14753,
											"end": 14782,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "360"
										},
										{
											"begin": 14775,
											"end": 14781,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14753,
											"end": 14782,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "127"
										},
										{
											"begin": 14753,
											"end": 14782,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 14753,
											"end": 14782,
											"name": "tag",
											"source": 14,
											"value": "360"
										},
										{
											"begin": 14753,
											"end": 14782,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14748,
											"end": 14751,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 14744,
											"end": 14783,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14737,
											"end": 14783,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 14737,
											"end": 14783,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14529,
											"end": 14789,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14449,
											"end": 14789,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 14449,
											"end": 14789,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 14449,
											"end": 14789,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14449,
											"end": 14789,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14449,
											"end": 14789,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 14795,
											"end": 14885,
											"name": "tag",
											"source": 14,
											"value": "179"
										},
										{
											"begin": 14795,
											"end": 14885,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14829,
											"end": 14836,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14872,
											"end": 14877,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14865,
											"end": 14878,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 14858,
											"end": 14879,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 14847,
											"end": 14879,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14847,
											"end": 14879,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14795,
											"end": 14885,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 14795,
											"end": 14885,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 14795,
											"end": 14885,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14795,
											"end": 14885,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 14891,
											"end": 14990,
											"name": "tag",
											"source": 14,
											"value": "180"
										},
										{
											"begin": 14891,
											"end": 14990,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14962,
											"end": 14983,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "363"
										},
										{
											"begin": 14977,
											"end": 14982,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 14962,
											"end": 14983,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "179"
										},
										{
											"begin": 14962,
											"end": 14983,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 14962,
											"end": 14983,
											"name": "tag",
											"source": 14,
											"value": "363"
										},
										{
											"begin": 14962,
											"end": 14983,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 14957,
											"end": 14960,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14950,
											"end": 14984,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14891,
											"end": 14990,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14891,
											"end": 14990,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 14891,
											"end": 14990,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 15074,
											"end": 16282,
											"name": "tag",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 15074,
											"end": 16282,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 15209,
											"end": 15212,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 15245,
											"end": 15249,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 15240,
											"end": 15243,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 15236,
											"end": 15250,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15334,
											"end": 15338,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 15327,
											"end": 15332,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 15323,
											"end": 15339,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15317,
											"end": 15340,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 15387,
											"end": 15390,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 15381,
											"end": 15385,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15377,
											"end": 15391,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 15370,
											"end": 15374,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 15365,
											"end": 15368,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 15361,
											"end": 15375,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15354,
											"end": 15392,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 15413,
											"end": 15531,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "365"
										},
										{
											"begin": 15526,
											"end": 15530,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15512,
											"end": 15524,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15413,
											"end": 15531,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "172"
										},
										{
											"begin": 15413,
											"end": 15531,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 15413,
											"end": 15531,
											"name": "tag",
											"source": 14,
											"value": "365"
										},
										{
											"begin": 15413,
											"end": 15531,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 15405,
											"end": 15531,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 15405,
											"end": 15531,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 15260,
											"end": 15542,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 15632,
											"end": 15636,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 15625,
											"end": 15630,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 15621,
											"end": 15637,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15615,
											"end": 15638,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 15685,
											"end": 15688,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 15679,
											"end": 15683,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15675,
											"end": 15689,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 15668,
											"end": 15672,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 15663,
											"end": 15666,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 15659,
											"end": 15673,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15652,
											"end": 15690,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 15711,
											"end": 15814,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "366"
										},
										{
											"begin": 15809,
											"end": 15813,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15795,
											"end": 15807,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15711,
											"end": 15814,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "174"
										},
										{
											"begin": 15711,
											"end": 15814,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 15711,
											"end": 15814,
											"name": "tag",
											"source": 14,
											"value": "366"
										},
										{
											"begin": 15711,
											"end": 15814,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 15703,
											"end": 15814,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 15703,
											"end": 15814,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 15552,
											"end": 15825,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 15911,
											"end": 15915,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 15904,
											"end": 15909,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 15900,
											"end": 15916,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15894,
											"end": 15917,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 15964,
											"end": 15967,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 15958,
											"end": 15962,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15954,
											"end": 15968,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 15947,
											"end": 15951,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 15942,
											"end": 15945,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 15938,
											"end": 15952,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15931,
											"end": 15969,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 15990,
											"end": 16061,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "367"
										},
										{
											"begin": 16056,
											"end": 16060,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 16042,
											"end": 16054,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15990,
											"end": 16061,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "178"
										},
										{
											"begin": 15990,
											"end": 16061,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 15990,
											"end": 16061,
											"name": "tag",
											"source": 14,
											"value": "367"
										},
										{
											"begin": 15990,
											"end": 16061,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 15982,
											"end": 16061,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 15982,
											"end": 16061,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 15835,
											"end": 16072,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 16169,
											"end": 16173,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 16162,
											"end": 16167,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 16158,
											"end": 16174,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 16152,
											"end": 16175,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 16188,
											"end": 16245,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "368"
										},
										{
											"begin": 16239,
											"end": 16243,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 16234,
											"end": 16237,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 16230,
											"end": 16244,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 16216,
											"end": 16228,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 16188,
											"end": 16245,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "180"
										},
										{
											"begin": 16188,
											"end": 16245,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 16188,
											"end": 16245,
											"name": "tag",
											"source": 14,
											"value": "368"
										},
										{
											"begin": 16188,
											"end": 16245,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 16082,
											"end": 16255,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 16272,
											"end": 16276,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 16265,
											"end": 16276,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 16265,
											"end": 16276,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 15214,
											"end": 16282,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 15074,
											"end": 16282,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 15074,
											"end": 16282,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 15074,
											"end": 16282,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 15074,
											"end": 16282,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 15074,
											"end": 16282,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 16288,
											"end": 17024,
											"name": "tag",
											"source": 14,
											"value": "49"
										},
										{
											"begin": 16288,
											"end": 17024,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 16531,
											"end": 16535,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 16569,
											"end": 16572,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 16558,
											"end": 16567,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 16554,
											"end": 16573,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 16546,
											"end": 16573,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 16546,
											"end": 16573,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 16583,
											"end": 16654,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "370"
										},
										{
											"begin": 16651,
											"end": 16652,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 16640,
											"end": 16649,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 16636,
											"end": 16653,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 16627,
											"end": 16633,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 16583,
											"end": 16654,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 16583,
											"end": 16654,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 16583,
											"end": 16654,
											"name": "tag",
											"source": 14,
											"value": "370"
										},
										{
											"begin": 16583,
											"end": 16654,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 16664,
											"end": 16736,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "371"
										},
										{
											"begin": 16732,
											"end": 16734,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 16721,
											"end": 16730,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 16717,
											"end": 16735,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 16708,
											"end": 16714,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 16664,
											"end": 16736,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 16664,
											"end": 16736,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 16664,
											"end": 16736,
											"name": "tag",
											"source": 14,
											"value": "371"
										},
										{
											"begin": 16664,
											"end": 16736,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 16746,
											"end": 16818,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "372"
										},
										{
											"begin": 16814,
											"end": 16816,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 16803,
											"end": 16812,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 16799,
											"end": 16817,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 16790,
											"end": 16796,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 16746,
											"end": 16818,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 16746,
											"end": 16818,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 16746,
											"end": 16818,
											"name": "tag",
											"source": 14,
											"value": "372"
										},
										{
											"begin": 16746,
											"end": 16818,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 16865,
											"end": 16874,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 16859,
											"end": 16863,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 16855,
											"end": 16875,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 16850,
											"end": 16852,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 16839,
											"end": 16848,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 16835,
											"end": 16853,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 16828,
											"end": 16876,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 16893,
											"end": 17017,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "373"
										},
										{
											"begin": 17012,
											"end": 17016,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 17003,
											"end": 17009,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 16893,
											"end": 17017,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 16893,
											"end": 17017,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 16893,
											"end": 17017,
											"name": "tag",
											"source": 14,
											"value": "373"
										},
										{
											"begin": 16893,
											"end": 17017,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 16885,
											"end": 17017,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 16885,
											"end": 17017,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 16288,
											"end": 17024,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 16288,
											"end": 17024,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 16288,
											"end": 17024,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 16288,
											"end": 17024,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 16288,
											"end": 17024,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 16288,
											"end": 17024,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 16288,
											"end": 17024,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 16288,
											"end": 17024,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 17030,
											"end": 17173,
											"name": "tag",
											"source": 14,
											"value": "182"
										},
										{
											"begin": 17030,
											"end": 17173,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17087,
											"end": 17092,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 17118,
											"end": 17124,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 17112,
											"end": 17125,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 17103,
											"end": 17125,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 17103,
											"end": 17125,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17134,
											"end": 17167,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "375"
										},
										{
											"begin": 17161,
											"end": 17166,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 17134,
											"end": 17167,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 17134,
											"end": 17167,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 17134,
											"end": 17167,
											"name": "tag",
											"source": 14,
											"value": "375"
										},
										{
											"begin": 17134,
											"end": 17167,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17030,
											"end": 17173,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 17030,
											"end": 17173,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 17030,
											"end": 17173,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17030,
											"end": 17173,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17030,
											"end": 17173,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 17179,
											"end": 17530,
											"name": "tag",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 17179,
											"end": 17530,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17249,
											"end": 17255,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 17298,
											"end": 17300,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 17286,
											"end": 17295,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 17277,
											"end": 17284,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 17273,
											"end": 17296,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 17269,
											"end": 17301,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 17266,
											"end": 17385,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 17266,
											"end": 17385,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "377"
										},
										{
											"begin": 17266,
											"end": 17385,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 17304,
											"end": 17383,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "378"
										},
										{
											"begin": 17304,
											"end": 17383,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "124"
										},
										{
											"begin": 17304,
											"end": 17383,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 17304,
											"end": 17383,
											"name": "tag",
											"source": 14,
											"value": "378"
										},
										{
											"begin": 17304,
											"end": 17383,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17266,
											"end": 17385,
											"name": "tag",
											"source": 14,
											"value": "377"
										},
										{
											"begin": 17266,
											"end": 17385,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17424,
											"end": 17425,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 17449,
											"end": 17513,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "379"
										},
										{
											"begin": 17505,
											"end": 17512,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 17496,
											"end": 17502,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 17485,
											"end": 17494,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 17481,
											"end": 17503,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 17449,
											"end": 17513,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "182"
										},
										{
											"begin": 17449,
											"end": 17513,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 17449,
											"end": 17513,
											"name": "tag",
											"source": 14,
											"value": "379"
										},
										{
											"begin": 17449,
											"end": 17513,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17439,
											"end": 17513,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 17439,
											"end": 17513,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17395,
											"end": 17523,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17179,
											"end": 17530,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 17179,
											"end": 17530,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 17179,
											"end": 17530,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17179,
											"end": 17530,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17179,
											"end": 17530,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 17536,
											"end": 17652,
											"name": "tag",
											"source": 14,
											"value": "183"
										},
										{
											"begin": 17536,
											"end": 17652,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17606,
											"end": 17627,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "381"
										},
										{
											"begin": 17621,
											"end": 17626,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 17606,
											"end": 17627,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "179"
										},
										{
											"begin": 17606,
											"end": 17627,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 17606,
											"end": 17627,
											"name": "tag",
											"source": 14,
											"value": "381"
										},
										{
											"begin": 17606,
											"end": 17627,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17599,
											"end": 17604,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 17596,
											"end": 17628,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 17586,
											"end": 17646,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "382"
										},
										{
											"begin": 17586,
											"end": 17646,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 17642,
											"end": 17643,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 17639,
											"end": 17640,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 17632,
											"end": 17644,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 17586,
											"end": 17646,
											"name": "tag",
											"source": 14,
											"value": "382"
										},
										{
											"begin": 17586,
											"end": 17646,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17536,
											"end": 17652,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17536,
											"end": 17652,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 17658,
											"end": 17795,
											"name": "tag",
											"source": 14,
											"value": "184"
										},
										{
											"begin": 17658,
											"end": 17795,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17712,
											"end": 17717,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 17743,
											"end": 17749,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 17737,
											"end": 17750,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 17728,
											"end": 17750,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 17728,
											"end": 17750,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17759,
											"end": 17789,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "384"
										},
										{
											"begin": 17783,
											"end": 17788,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 17759,
											"end": 17789,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "183"
										},
										{
											"begin": 17759,
											"end": 17789,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 17759,
											"end": 17789,
											"name": "tag",
											"source": 14,
											"value": "384"
										},
										{
											"begin": 17759,
											"end": 17789,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17658,
											"end": 17795,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 17658,
											"end": 17795,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 17658,
											"end": 17795,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17658,
											"end": 17795,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17658,
											"end": 17795,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 17801,
											"end": 18146,
											"name": "tag",
											"source": 14,
											"value": "71"
										},
										{
											"begin": 17801,
											"end": 18146,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17868,
											"end": 17874,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 17917,
											"end": 17919,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 17905,
											"end": 17914,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 17896,
											"end": 17903,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 17892,
											"end": 17915,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 17888,
											"end": 17920,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 17885,
											"end": 18004,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 17885,
											"end": 18004,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "386"
										},
										{
											"begin": 17885,
											"end": 18004,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 17923,
											"end": 18002,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "387"
										},
										{
											"begin": 17923,
											"end": 18002,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "124"
										},
										{
											"begin": 17923,
											"end": 18002,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 17923,
											"end": 18002,
											"name": "tag",
											"source": 14,
											"value": "387"
										},
										{
											"begin": 17923,
											"end": 18002,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 17885,
											"end": 18004,
											"name": "tag",
											"source": 14,
											"value": "386"
										},
										{
											"begin": 17885,
											"end": 18004,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 18043,
											"end": 18044,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 18068,
											"end": 18129,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "388"
										},
										{
											"begin": 18121,
											"end": 18128,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 18112,
											"end": 18118,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 18101,
											"end": 18110,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 18097,
											"end": 18119,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 18068,
											"end": 18129,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "184"
										},
										{
											"begin": 18068,
											"end": 18129,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 18068,
											"end": 18129,
											"name": "tag",
											"source": 14,
											"value": "388"
										},
										{
											"begin": 18068,
											"end": 18129,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 18058,
											"end": 18129,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 18058,
											"end": 18129,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 18014,
											"end": 18139,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17801,
											"end": 18146,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 17801,
											"end": 18146,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 17801,
											"end": 18146,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17801,
											"end": 18146,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 17801,
											"end": 18146,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 18152,
											"end": 18321,
											"name": "tag",
											"source": 14,
											"value": "185"
										},
										{
											"begin": 18152,
											"end": 18321,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 18236,
											"end": 18247,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 18270,
											"end": 18276,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 18265,
											"end": 18268,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 18258,
											"end": 18277,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 18310,
											"end": 18314,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 18305,
											"end": 18308,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 18301,
											"end": 18315,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 18286,
											"end": 18315,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 18286,
											"end": 18315,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 18152,
											"end": 18321,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 18152,
											"end": 18321,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 18152,
											"end": 18321,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 18152,
											"end": 18321,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 18152,
											"end": 18321,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 18327,
											"end": 18556,
											"name": "tag",
											"source": 14,
											"value": "186"
										},
										{
											"begin": 18327,
											"end": 18556,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 18467,
											"end": 18501,
											"name": "PUSH",
											"source": 14,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 18463,
											"end": 18464,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 18455,
											"end": 18461,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 18451,
											"end": 18465,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 18444,
											"end": 18502,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 18536,
											"end": 18548,
											"name": "PUSH",
											"source": 14,
											"value": "6F74207375636365656400000000000000000000000000000000000000000000"
										},
										{
											"begin": 18531,
											"end": 18533,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 18523,
											"end": 18529,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 18519,
											"end": 18534,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 18512,
											"end": 18549,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 18327,
											"end": 18556,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 18327,
											"end": 18556,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 18562,
											"end": 18928,
											"name": "tag",
											"source": 14,
											"value": "187"
										},
										{
											"begin": 18562,
											"end": 18928,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 18704,
											"end": 18707,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 18725,
											"end": 18792,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "392"
										},
										{
											"begin": 18789,
											"end": 18791,
											"name": "PUSH",
											"source": 14,
											"value": "2A"
										},
										{
											"begin": 18784,
											"end": 18787,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 18725,
											"end": 18792,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "185"
										},
										{
											"begin": 18725,
											"end": 18792,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 18725,
											"end": 18792,
											"name": "tag",
											"source": 14,
											"value": "392"
										},
										{
											"begin": 18725,
											"end": 18792,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 18718,
											"end": 18792,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 18718,
											"end": 18792,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 18801,
											"end": 18894,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "393"
										},
										{
											"begin": 18890,
											"end": 18893,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 18801,
											"end": 18894,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "186"
										},
										{
											"begin": 18801,
											"end": 18894,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 18801,
											"end": 18894,
											"name": "tag",
											"source": 14,
											"value": "393"
										},
										{
											"begin": 18801,
											"end": 18894,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 18919,
											"end": 18921,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 18914,
											"end": 18917,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 18910,
											"end": 18922,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 18903,
											"end": 18922,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 18903,
											"end": 18922,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 18562,
											"end": 18928,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 18562,
											"end": 18928,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 18562,
											"end": 18928,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 18562,
											"end": 18928,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 18934,
											"end": 19353,
											"name": "tag",
											"source": 14,
											"value": "74"
										},
										{
											"begin": 18934,
											"end": 19353,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 19100,
											"end": 19104,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 19138,
											"end": 19140,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 19127,
											"end": 19136,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 19123,
											"end": 19141,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 19115,
											"end": 19141,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 19115,
											"end": 19141,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 19187,
											"end": 19196,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 19181,
											"end": 19185,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 19177,
											"end": 19197,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 19173,
											"end": 19174,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 19162,
											"end": 19171,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 19158,
											"end": 19175,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 19151,
											"end": 19198,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 19215,
											"end": 19346,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "395"
										},
										{
											"begin": 19341,
											"end": 19345,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 19215,
											"end": 19346,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "187"
										},
										{
											"begin": 19215,
											"end": 19346,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 19215,
											"end": 19346,
											"name": "tag",
											"source": 14,
											"value": "395"
										},
										{
											"begin": 19215,
											"end": 19346,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 19207,
											"end": 19346,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 19207,
											"end": 19346,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 18934,
											"end": 19353,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 18934,
											"end": 19353,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 18934,
											"end": 19353,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 18934,
											"end": 19353,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 19359,
											"end": 19691,
											"name": "tag",
											"source": 14,
											"value": "77"
										},
										{
											"begin": 19359,
											"end": 19691,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 19480,
											"end": 19484,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 19518,
											"end": 19520,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 19507,
											"end": 19516,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 19503,
											"end": 19521,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 19495,
											"end": 19521,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 19495,
											"end": 19521,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 19531,
											"end": 19602,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "397"
										},
										{
											"begin": 19599,
											"end": 19600,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 19588,
											"end": 19597,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 19584,
											"end": 19601,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 19575,
											"end": 19581,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 19531,
											"end": 19602,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 19531,
											"end": 19602,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 19531,
											"end": 19602,
											"name": "tag",
											"source": 14,
											"value": "397"
										},
										{
											"begin": 19531,
											"end": 19602,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 19612,
											"end": 19684,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "398"
										},
										{
											"begin": 19680,
											"end": 19682,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 19669,
											"end": 19678,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 19665,
											"end": 19683,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 19656,
											"end": 19662,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 19612,
											"end": 19684,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 19612,
											"end": 19684,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 19612,
											"end": 19684,
											"name": "tag",
											"source": 14,
											"value": "398"
										},
										{
											"begin": 19612,
											"end": 19684,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 19359,
											"end": 19691,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 19359,
											"end": 19691,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 19359,
											"end": 19691,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 19359,
											"end": 19691,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 19359,
											"end": 19691,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 19359,
											"end": 19691,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 19697,
											"end": 19877,
											"name": "tag",
											"source": 14,
											"value": "188"
										},
										{
											"begin": 19697,
											"end": 19877,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 19745,
											"end": 19822,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 19742,
											"end": 19743,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 19735,
											"end": 19823,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 19842,
											"end": 19846,
											"name": "PUSH",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 19839,
											"end": 19840,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 19832,
											"end": 19847,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 19866,
											"end": 19870,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 19863,
											"end": 19864,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 19856,
											"end": 19871,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 19883,
											"end": 20188,
											"name": "tag",
											"source": 14,
											"value": "82"
										},
										{
											"begin": 19883,
											"end": 20188,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 19923,
											"end": 19926,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 19942,
											"end": 19962,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "401"
										},
										{
											"begin": 19960,
											"end": 19961,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 19942,
											"end": 19962,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 19942,
											"end": 19962,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 19942,
											"end": 19962,
											"name": "tag",
											"source": 14,
											"value": "401"
										},
										{
											"begin": 19942,
											"end": 19962,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 19937,
											"end": 19962,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 19937,
											"end": 19962,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 19976,
											"end": 19996,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "402"
										},
										{
											"begin": 19994,
											"end": 19995,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 19976,
											"end": 19996,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 19976,
											"end": 19996,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 19976,
											"end": 19996,
											"name": "tag",
											"source": 14,
											"value": "402"
										},
										{
											"begin": 19976,
											"end": 19996,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 19971,
											"end": 19996,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 19971,
											"end": 19996,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 20130,
											"end": 20131,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 20062,
											"end": 20128,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 20058,
											"end": 20132,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 20055,
											"end": 20056,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 20052,
											"end": 20133,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 20049,
											"end": 20156,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 20049,
											"end": 20156,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "403"
										},
										{
											"begin": 20049,
											"end": 20156,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 20136,
											"end": 20154,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "404"
										},
										{
											"begin": 20136,
											"end": 20154,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "188"
										},
										{
											"begin": 20136,
											"end": 20154,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 20136,
											"end": 20154,
											"name": "tag",
											"source": 14,
											"value": "404"
										},
										{
											"begin": 20136,
											"end": 20154,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 20049,
											"end": 20156,
											"name": "tag",
											"source": 14,
											"value": "403"
										},
										{
											"begin": 20049,
											"end": 20156,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 20180,
											"end": 20181,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 20177,
											"end": 20178,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 20173,
											"end": 20182,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 20166,
											"end": 20182,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 20166,
											"end": 20182,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 19883,
											"end": 20188,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 19883,
											"end": 20188,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 19883,
											"end": 20188,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 19883,
											"end": 20188,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 19883,
											"end": 20188,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 20194,
											"end": 20526,
											"name": "tag",
											"source": 14,
											"value": "85"
										},
										{
											"begin": 20194,
											"end": 20526,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 20315,
											"end": 20319,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 20353,
											"end": 20355,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 20342,
											"end": 20351,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 20338,
											"end": 20356,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 20330,
											"end": 20356,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 20330,
											"end": 20356,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 20366,
											"end": 20437,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "406"
										},
										{
											"begin": 20434,
											"end": 20435,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 20423,
											"end": 20432,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 20419,
											"end": 20436,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 20410,
											"end": 20416,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 20366,
											"end": 20437,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 20366,
											"end": 20437,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 20366,
											"end": 20437,
											"name": "tag",
											"source": 14,
											"value": "406"
										},
										{
											"begin": 20366,
											"end": 20437,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 20447,
											"end": 20519,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "407"
										},
										{
											"begin": 20515,
											"end": 20517,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 20504,
											"end": 20513,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 20500,
											"end": 20518,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 20491,
											"end": 20497,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 20447,
											"end": 20519,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "151"
										},
										{
											"begin": 20447,
											"end": 20519,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 20447,
											"end": 20519,
											"name": "tag",
											"source": 14,
											"value": "407"
										},
										{
											"begin": 20447,
											"end": 20519,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 20194,
											"end": 20526,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 20194,
											"end": 20526,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 20194,
											"end": 20526,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 20194,
											"end": 20526,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 20194,
											"end": 20526,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 20194,
											"end": 20526,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 20532,
											"end": 20757,
											"name": "tag",
											"source": 14,
											"value": "189"
										},
										{
											"begin": 20532,
											"end": 20757,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 20672,
											"end": 20706,
											"name": "PUSH",
											"source": 14,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 20668,
											"end": 20669,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 20660,
											"end": 20666,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 20656,
											"end": 20670,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 20649,
											"end": 20707,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 20741,
											"end": 20749,
											"name": "PUSH",
											"source": 14,
											"value": "722063616C6C0000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 20736,
											"end": 20738,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 20728,
											"end": 20734,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 20724,
											"end": 20739,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 20717,
											"end": 20750,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 20532,
											"end": 20757,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 20532,
											"end": 20757,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 20763,
											"end": 21129,
											"name": "tag",
											"source": 14,
											"value": "190"
										},
										{
											"begin": 20763,
											"end": 21129,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 20905,
											"end": 20908,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 20926,
											"end": 20993,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "410"
										},
										{
											"begin": 20990,
											"end": 20992,
											"name": "PUSH",
											"source": 14,
											"value": "26"
										},
										{
											"begin": 20985,
											"end": 20988,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 20926,
											"end": 20993,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "185"
										},
										{
											"begin": 20926,
											"end": 20993,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 20926,
											"end": 20993,
											"name": "tag",
											"source": 14,
											"value": "410"
										},
										{
											"begin": 20926,
											"end": 20993,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 20919,
											"end": 20993,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 20919,
											"end": 20993,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 21002,
											"end": 21095,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "411"
										},
										{
											"begin": 21091,
											"end": 21094,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 21002,
											"end": 21095,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "189"
										},
										{
											"begin": 21002,
											"end": 21095,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 21002,
											"end": 21095,
											"name": "tag",
											"source": 14,
											"value": "411"
										},
										{
											"begin": 21002,
											"end": 21095,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 21120,
											"end": 21122,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 21115,
											"end": 21118,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 21111,
											"end": 21123,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 21104,
											"end": 21123,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 21104,
											"end": 21123,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 20763,
											"end": 21129,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 20763,
											"end": 21129,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 20763,
											"end": 21129,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 20763,
											"end": 21129,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 21135,
											"end": 21554,
											"name": "tag",
											"source": 14,
											"value": "102"
										},
										{
											"begin": 21135,
											"end": 21554,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 21301,
											"end": 21305,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 21339,
											"end": 21341,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 21328,
											"end": 21337,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 21324,
											"end": 21342,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 21316,
											"end": 21342,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 21316,
											"end": 21342,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 21388,
											"end": 21397,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 21382,
											"end": 21386,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 21378,
											"end": 21398,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 21374,
											"end": 21375,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 21363,
											"end": 21372,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 21359,
											"end": 21376,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 21352,
											"end": 21399,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 21416,
											"end": 21547,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "413"
										},
										{
											"begin": 21542,
											"end": 21546,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 21416,
											"end": 21547,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "190"
										},
										{
											"begin": 21416,
											"end": 21547,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 21416,
											"end": 21547,
											"name": "tag",
											"source": 14,
											"value": "413"
										},
										{
											"begin": 21416,
											"end": 21547,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 21408,
											"end": 21547,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 21408,
											"end": 21547,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 21135,
											"end": 21554,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 21135,
											"end": 21554,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 21135,
											"end": 21554,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 21135,
											"end": 21554,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 21560,
											"end": 21739,
											"name": "tag",
											"source": 14,
											"value": "191"
										},
										{
											"begin": 21560,
											"end": 21739,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 21700,
											"end": 21731,
											"name": "PUSH",
											"source": 14,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 21696,
											"end": 21697,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 21688,
											"end": 21694,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 21684,
											"end": 21698,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 21677,
											"end": 21732,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 21560,
											"end": 21739,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 21560,
											"end": 21739,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 21745,
											"end": 22111,
											"name": "tag",
											"source": 14,
											"value": "192"
										},
										{
											"begin": 21745,
											"end": 22111,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 21887,
											"end": 21890,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 21908,
											"end": 21975,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "416"
										},
										{
											"begin": 21972,
											"end": 21974,
											"name": "PUSH",
											"source": 14,
											"value": "1D"
										},
										{
											"begin": 21967,
											"end": 21970,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 21908,
											"end": 21975,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "185"
										},
										{
											"begin": 21908,
											"end": 21975,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 21908,
											"end": 21975,
											"name": "tag",
											"source": 14,
											"value": "416"
										},
										{
											"begin": 21908,
											"end": 21975,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 21901,
											"end": 21975,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 21901,
											"end": 21975,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 21984,
											"end": 22077,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "417"
										},
										{
											"begin": 22073,
											"end": 22076,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 21984,
											"end": 22077,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "191"
										},
										{
											"begin": 21984,
											"end": 22077,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 21984,
											"end": 22077,
											"name": "tag",
											"source": 14,
											"value": "417"
										},
										{
											"begin": 21984,
											"end": 22077,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 22102,
											"end": 22104,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 22097,
											"end": 22100,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 22093,
											"end": 22105,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 22086,
											"end": 22105,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 22086,
											"end": 22105,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 21745,
											"end": 22111,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 21745,
											"end": 22111,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 21745,
											"end": 22111,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 21745,
											"end": 22111,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 22117,
											"end": 22536,
											"name": "tag",
											"source": 14,
											"value": "107"
										},
										{
											"begin": 22117,
											"end": 22536,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 22283,
											"end": 22287,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 22321,
											"end": 22323,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 22310,
											"end": 22319,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 22306,
											"end": 22324,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 22298,
											"end": 22324,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 22298,
											"end": 22324,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 22370,
											"end": 22379,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 22364,
											"end": 22368,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 22360,
											"end": 22380,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 22356,
											"end": 22357,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 22345,
											"end": 22354,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 22341,
											"end": 22358,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 22334,
											"end": 22381,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 22398,
											"end": 22529,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "419"
										},
										{
											"begin": 22524,
											"end": 22528,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 22398,
											"end": 22529,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "192"
										},
										{
											"begin": 22398,
											"end": 22529,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 22398,
											"end": 22529,
											"name": "tag",
											"source": 14,
											"value": "419"
										},
										{
											"begin": 22398,
											"end": 22529,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 22390,
											"end": 22529,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 22390,
											"end": 22529,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 22117,
											"end": 22536,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 22117,
											"end": 22536,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 22117,
											"end": 22536,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 22117,
											"end": 22536,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 22542,
											"end": 22689,
											"name": "tag",
											"source": 14,
											"value": "193"
										},
										{
											"begin": 22542,
											"end": 22689,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 22643,
											"end": 22654,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 22680,
											"end": 22683,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 22665,
											"end": 22683,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 22665,
											"end": 22683,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 22542,
											"end": 22689,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 22542,
											"end": 22689,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 22542,
											"end": 22689,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 22542,
											"end": 22689,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 22542,
											"end": 22689,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 22695,
											"end": 23068,
											"name": "tag",
											"source": 14,
											"value": "194"
										},
										{
											"begin": 22695,
											"end": 23068,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 22799,
											"end": 22802,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 22827,
											"end": 22865,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "422"
										},
										{
											"begin": 22859,
											"end": 22864,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 22827,
											"end": 22865,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "175"
										},
										{
											"begin": 22827,
											"end": 22865,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 22827,
											"end": 22865,
											"name": "tag",
											"source": 14,
											"value": "422"
										},
										{
											"begin": 22827,
											"end": 22865,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 22881,
											"end": 22969,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "423"
										},
										{
											"begin": 22962,
											"end": 22968,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 22957,
											"end": 22960,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 22881,
											"end": 22969,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "193"
										},
										{
											"begin": 22881,
											"end": 22969,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 22881,
											"end": 22969,
											"name": "tag",
											"source": 14,
											"value": "423"
										},
										{
											"begin": 22881,
											"end": 22969,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 22874,
											"end": 22969,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 22874,
											"end": 22969,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 22978,
											"end": 23030,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "424"
										},
										{
											"begin": 23023,
											"end": 23029,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 23018,
											"end": 23021,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 23011,
											"end": 23015,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 23004,
											"end": 23009,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 23000,
											"end": 23016,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 22978,
											"end": 23030,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "177"
										},
										{
											"begin": 22978,
											"end": 23030,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 22978,
											"end": 23030,
											"name": "tag",
											"source": 14,
											"value": "424"
										},
										{
											"begin": 22978,
											"end": 23030,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 23055,
											"end": 23061,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 23050,
											"end": 23053,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 23046,
											"end": 23062,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 23039,
											"end": 23062,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 23039,
											"end": 23062,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 22803,
											"end": 23068,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 22695,
											"end": 23068,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 22695,
											"end": 23068,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 22695,
											"end": 23068,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 22695,
											"end": 23068,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 22695,
											"end": 23068,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 23074,
											"end": 23345,
											"name": "tag",
											"source": 14,
											"value": "109"
										},
										{
											"begin": 23074,
											"end": 23345,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 23204,
											"end": 23207,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 23226,
											"end": 23319,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "426"
										},
										{
											"begin": 23315,
											"end": 23318,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 23306,
											"end": 23312,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 23226,
											"end": 23319,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "194"
										},
										{
											"begin": 23226,
											"end": 23319,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 23226,
											"end": 23319,
											"name": "tag",
											"source": 14,
											"value": "426"
										},
										{
											"begin": 23226,
											"end": 23319,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 23219,
											"end": 23319,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 23219,
											"end": 23319,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23336,
											"end": 23339,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 23329,
											"end": 23339,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 23329,
											"end": 23339,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23074,
											"end": 23345,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 23074,
											"end": 23345,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 23074,
											"end": 23345,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23074,
											"end": 23345,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23074,
											"end": 23345,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 23351,
											"end": 23450,
											"name": "tag",
											"source": 14,
											"value": "195"
										},
										{
											"begin": 23351,
											"end": 23450,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 23403,
											"end": 23409,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 23437,
											"end": 23442,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 23431,
											"end": 23443,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 23421,
											"end": 23443,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 23421,
											"end": 23443,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23351,
											"end": 23450,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 23351,
											"end": 23450,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 23351,
											"end": 23450,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23351,
											"end": 23450,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 23456,
											"end": 23820,
											"name": "tag",
											"source": 14,
											"value": "196"
										},
										{
											"begin": 23456,
											"end": 23820,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 23544,
											"end": 23547,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 23572,
											"end": 23611,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "429"
										},
										{
											"begin": 23605,
											"end": 23610,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 23572,
											"end": 23611,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "195"
										},
										{
											"begin": 23572,
											"end": 23611,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 23572,
											"end": 23611,
											"name": "tag",
											"source": 14,
											"value": "429"
										},
										{
											"begin": 23572,
											"end": 23611,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 23627,
											"end": 23698,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "430"
										},
										{
											"begin": 23691,
											"end": 23697,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 23686,
											"end": 23689,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 23627,
											"end": 23698,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "185"
										},
										{
											"begin": 23627,
											"end": 23698,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 23627,
											"end": 23698,
											"name": "tag",
											"source": 14,
											"value": "430"
										},
										{
											"begin": 23627,
											"end": 23698,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 23620,
											"end": 23698,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 23620,
											"end": 23698,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23707,
											"end": 23759,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "431"
										},
										{
											"begin": 23752,
											"end": 23758,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 23747,
											"end": 23750,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 23740,
											"end": 23744,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 23733,
											"end": 23738,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 23729,
											"end": 23745,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 23707,
											"end": 23759,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "177"
										},
										{
											"begin": 23707,
											"end": 23759,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 23707,
											"end": 23759,
											"name": "tag",
											"source": 14,
											"value": "431"
										},
										{
											"begin": 23707,
											"end": 23759,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 23784,
											"end": 23813,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "432"
										},
										{
											"begin": 23806,
											"end": 23812,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 23784,
											"end": 23813,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "127"
										},
										{
											"begin": 23784,
											"end": 23813,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 23784,
											"end": 23813,
											"name": "tag",
											"source": 14,
											"value": "432"
										},
										{
											"begin": 23784,
											"end": 23813,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 23779,
											"end": 23782,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 23775,
											"end": 23814,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 23768,
											"end": 23814,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 23768,
											"end": 23814,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23548,
											"end": 23820,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23456,
											"end": 23820,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 23456,
											"end": 23820,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 23456,
											"end": 23820,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23456,
											"end": 23820,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23456,
											"end": 23820,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 23826,
											"end": 24139,
											"name": "tag",
											"source": 14,
											"value": "122"
										},
										{
											"begin": 23826,
											"end": 24139,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 23939,
											"end": 23943,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 23977,
											"end": 23979,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 23966,
											"end": 23975,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 23962,
											"end": 23980,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 23954,
											"end": 23980,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 23954,
											"end": 23980,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 24026,
											"end": 24035,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 24020,
											"end": 24024,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 24016,
											"end": 24036,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 24012,
											"end": 24013,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 24001,
											"end": 24010,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 23997,
											"end": 24014,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 23990,
											"end": 24037,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 24054,
											"end": 24132,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "434"
										},
										{
											"begin": 24127,
											"end": 24131,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 24118,
											"end": 24124,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 24054,
											"end": 24132,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "196"
										},
										{
											"begin": 24054,
											"end": 24132,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 24054,
											"end": 24132,
											"name": "tag",
											"source": 14,
											"value": "434"
										},
										{
											"begin": 24054,
											"end": 24132,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 24046,
											"end": 24132,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 24046,
											"end": 24132,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23826,
											"end": 24139,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 23826,
											"end": 24139,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 23826,
											"end": 24139,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23826,
											"end": 24139,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 23826,
											"end": 24139,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"balVault()": "77aba213",
							"routeDeposit((address[],uint256,bytes32,address,address,address),uint256)": "11ffbf3c",
							"singleSideDeposit((address[],uint256,bytes32,address,address,address),uint256)": "81144563"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"underlyings\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"depositTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"beetsPoolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct SuperDepositor.DepositParams\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"routeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"underlyings\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"depositTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"beetsPoolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct SuperDepositor.DepositParams\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"singleSideDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"andreas@nascent.xyz\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Greeter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SuperDepositor.sol\":\"SuperDepositor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcec0617473fa22a0866d7daf25bf4d664a62902e49c4a158aef54c1e4348e8a\",\"dweb:/ipfs/QmPQetTKnLJBAQQrLKUWGVZwfp3VGmBhnqqJvmJTycM1jR\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ca7bd5deecc4abd97f0218708c6e004953971cc62de68557fe0c6c8607f85a65\",\"dweb:/ipfs/QmRw3dGdS6ksHZiqcPRknYvWXfYP2hTj21PhkLjXyEVEf6\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"SuperDepositor.sol\":{\"keccak256\":\"0x7ecc0cdd83f8e0359464e1a629f420f1e822246bb8acb115e4b4dd59b3611ada\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://319989a8a225ca6dd048b4b83730bda1f87ffa5b1d10974a048bf01c1d3cf315\",\"dweb:/ipfs/QmXfs5BgbPnbrdG8iAnXzq6S6b2QPUgcxau9rSa6nURGV6\"]},\"interfaces/IAsset.sol\":{\"keccak256\":\"0xff48319da762af24416ccb39a5aca47b4d6ee06e9e1007d209560f55cb21f50a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://815c8e0c66866fc425f2ca676800a3a18d67b74bb4815811f1500a122ba4ded8\",\"dweb:/ipfs/QmVVCvxqEkAb9CFGq6ZqZxQgWTqkgX47Eg3M4VViTUHaX8\"]},\"interfaces/IAuthorizer.sol\":{\"keccak256\":\"0x517f3d9de85082dd40555d393ffbbee53a29335cfd33ae813c91165ef4d52ad2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df2f08d9b38124f41fd351c4cb6755219cd9ae0176488dd61a1b9280e032e41a\",\"dweb:/ipfs/QmUL5Fdsp4RviMYN6ZtfTfBMJKPh6suVpxfE9yDMv5aAmK\"]},\"interfaces/IBeetVault.sol\":{\"keccak256\":\"0x246b4ad8090c35fcd7b0ffbc966356795b28bb4b4a897c677a962bcfa729989d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1634823fa556e653cf83853fc7bcba57e4c719996e29d641f1d55a22d888d1a5\",\"dweb:/ipfs/QmVzs1cmnZpEMZDbP5SuxNoQNYrbQLpvELAGPGLHQYysgc\"]},\"interfaces/ISignaturesValidator.sol\":{\"keccak256\":\"0xbfab23cacf288d9575e136b16706e3289aed7898e9ac2d4fd854a1812bed4bb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://613443b184ac61b4dfbedc5402c90fa42b6aea838896890b345b4f5d6561b111\",\"dweb:/ipfs/QmRaVYaPPjp4La96XaRvXcmaTkkVQpYortNKyFGJicxGhF\"]},\"interfaces/ITemporarilyPausable.sol\":{\"keccak256\":\"0xa97c7c41e0bf075552f83e02f7552c3903014107919039548474982b0434cde9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://600a808c3d7791ca8a605e46cc8c4a1b2ae7097b6ffeddeab191d73db0acfc1a\",\"dweb:/ipfs/QmRfLLMHWF1roGdconfHYEzGkCQfs5Y5ZmF6cudMes4rsk\"]},\"interfaces/IVault.sol\":{\"keccak256\":\"0xa7320eea659b2ab118085b6102d25d72c538cf4b0ea9424bfdd6e521b5601d8c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f780a05094d7bf8035dd68590051e4383581427c23872c60ab32b0b837e873e4\",\"dweb:/ipfs/QmXU3LdQPLH7288ig8HDEX1LE3ZxxGYbWJ8sE6czAvBAWJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IAsset.sol": {
				"IAsset": {
					"abi": [],
					"devdoc": {
						"details": "This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like types. This concept is unrelated to a Pool's Asset Managers.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like types. This concept is unrelated to a Pool's Asset Managers.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IAsset.sol\":\"IAsset\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IAsset.sol\":{\"keccak256\":\"0xff48319da762af24416ccb39a5aca47b4d6ee06e9e1007d209560f55cb21f50a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://815c8e0c66866fc425f2ca676800a3a18d67b74bb4815811f1500a122ba4ded8\",\"dweb:/ipfs/QmVVCvxqEkAb9CFGq6ZqZxQgWTqkgX47Eg3M4VViTUHaX8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IAuthorizer.sol": {
				"IAuthorizer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "actionId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "where",
									"type": "address"
								}
							],
							"name": "canPerform",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"canPerform(bytes32,address,address)": {
								"details": "Returns true if `account` can perform the action described by `actionId` in the contract `where`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"canPerform(bytes32,address,address)": "9be2a884"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"}],\"name\":\"canPerform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"details\":\"Returns true if `account` can perform the action described by `actionId` in the contract `where`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IAuthorizer.sol\":\"IAuthorizer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IAuthorizer.sol\":{\"keccak256\":\"0x517f3d9de85082dd40555d393ffbbee53a29335cfd33ae813c91165ef4d52ad2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df2f08d9b38124f41fd351c4cb6755219cd9ae0176488dd61a1b9280e032e41a\",\"dweb:/ipfs/QmUL5Fdsp4RviMYN6ZtfTfBMJKPh6suVpxfE9yDMv5aAmK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IBeetVault.sol": {
				"IBeetVault": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IAuthorizer",
									"name": "newAuthorizer",
									"type": "address"
								}
							],
							"name": "AuthorizerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IERC20Upgradeable",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "ExternalBalanceTransfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IERC20Upgradeable",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "delta",
									"type": "int256"
								}
							],
							"name": "InternalBalanceChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bool",
									"name": "paused",
									"type": "bool"
								}
							],
							"name": "PausedStateChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "liquidityProvider",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "contract IERC20Upgradeable[]",
									"name": "tokens",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "int256[]",
									"name": "deltas",
									"type": "int256[]"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "protocolFeeAmounts",
									"type": "uint256[]"
								}
							],
							"name": "PoolBalanceChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "assetManager",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IERC20Upgradeable",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "cashDelta",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "managedDelta",
									"type": "int256"
								}
							],
							"name": "PoolBalanceManaged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "poolAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "enum IBeetVault.PoolSpecialization",
									"name": "specialization",
									"type": "uint8"
								}
							],
							"name": "PoolRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "relayer",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "RelayerApprovalChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "contract IERC20Upgradeable",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IERC20Upgradeable",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "contract IERC20Upgradeable[]",
									"name": "tokens",
									"type": "address[]"
								}
							],
							"name": "TokensDeregistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "contract IERC20Upgradeable[]",
									"name": "tokens",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "address[]",
									"name": "assetManagers",
									"type": "address[]"
								}
							],
							"name": "TokensRegistered",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "enum IBeetVault.SwapKind",
									"name": "kind",
									"type": "uint8"
								},
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "poolId",
											"type": "bytes32"
										},
										{
											"internalType": "uint256",
											"name": "assetInIndex",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "assetOutIndex",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										}
									],
									"internalType": "struct IBeetVault.BatchSwapStep[]",
									"name": "swaps",
									"type": "tuple[]"
								},
								{
									"internalType": "contract IAsset[]",
									"name": "assets",
									"type": "address[]"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "bool",
											"name": "fromInternalBalance",
											"type": "bool"
										},
										{
											"internalType": "address payable",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "bool",
											"name": "toInternalBalance",
											"type": "bool"
										}
									],
									"internalType": "struct IBeetVault.FundManagement",
									"name": "funds",
									"type": "tuple"
								},
								{
									"internalType": "int256[]",
									"name": "limits",
									"type": "int256[]"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "batchSwap",
							"outputs": [
								{
									"internalType": "int256[]",
									"name": "",
									"type": "int256[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"internalType": "contract IERC20Upgradeable[]",
									"name": "tokens",
									"type": "address[]"
								}
							],
							"name": "deregisterTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address payable",
									"name": "recipient",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "contract IAsset[]",
											"name": "assets",
											"type": "address[]"
										},
										{
											"internalType": "uint256[]",
											"name": "minAmountsOut",
											"type": "uint256[]"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										},
										{
											"internalType": "bool",
											"name": "toInternalBalance",
											"type": "bool"
										}
									],
									"internalType": "struct IBeetVault.ExitPoolRequest",
									"name": "request",
									"type": "tuple"
								}
							],
							"name": "exitPool",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAuthorizer",
							"outputs": [
								{
									"internalType": "contract IAuthorizer",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getDomainSeparator",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "contract IERC20Upgradeable[]",
									"name": "tokens",
									"type": "address[]"
								}
							],
							"name": "getInternalBalance",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getNextNonce",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPausedState",
							"outputs": [
								{
									"internalType": "bool",
									"name": "paused",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "pauseWindowEndTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "bufferPeriodEndTime",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "enum IBeetVault.PoolSpecialization",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"internalType": "contract IERC20Upgradeable",
									"name": "token",
									"type": "address"
								}
							],
							"name": "getPoolTokenInfo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "cash",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "managed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "lastChangeBlock",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "assetManager",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								}
							],
							"name": "getPoolTokens",
							"outputs": [
								{
									"internalType": "contract IERC20Upgradeable[]",
									"name": "tokens",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "balances",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "lastChangeBlock",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "relayer",
									"type": "address"
								}
							],
							"name": "hasApprovedRelayer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "contract IAsset[]",
											"name": "assets",
											"type": "address[]"
										},
										{
											"internalType": "uint256[]",
											"name": "maxAmountsIn",
											"type": "uint256[]"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										},
										{
											"internalType": "bool",
											"name": "fromInternalBalance",
											"type": "bool"
										}
									],
									"internalType": "struct IBeetVault.JoinPoolRequest",
									"name": "request",
									"type": "tuple"
								}
							],
							"name": "joinPool",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "enum IBeetVault.PoolBalanceOpKind",
											"name": "kind",
											"type": "uint8"
										},
										{
											"internalType": "bytes32",
											"name": "poolId",
											"type": "bytes32"
										},
										{
											"internalType": "contract IERC20Upgradeable",
											"name": "token",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										}
									],
									"internalType": "struct IBeetVault.PoolBalanceOp[]",
									"name": "ops",
									"type": "tuple[]"
								}
							],
							"name": "managePoolBalance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "enum IBeetVault.UserBalanceOpKind",
											"name": "kind",
											"type": "uint8"
										},
										{
											"internalType": "contract IAsset",
											"name": "asset",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "address payable",
											"name": "recipient",
											"type": "address"
										}
									],
									"internalType": "struct IBeetVault.UserBalanceOp[]",
									"name": "ops",
									"type": "tuple[]"
								}
							],
							"name": "manageUserBalance",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "enum IBeetVault.SwapKind",
									"name": "kind",
									"type": "uint8"
								},
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "poolId",
											"type": "bytes32"
										},
										{
											"internalType": "uint256",
											"name": "assetInIndex",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "assetOutIndex",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										}
									],
									"internalType": "struct IBeetVault.BatchSwapStep[]",
									"name": "swaps",
									"type": "tuple[]"
								},
								{
									"internalType": "contract IAsset[]",
									"name": "assets",
									"type": "address[]"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "bool",
											"name": "fromInternalBalance",
											"type": "bool"
										},
										{
											"internalType": "address payable",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "bool",
											"name": "toInternalBalance",
											"type": "bool"
										}
									],
									"internalType": "struct IBeetVault.FundManagement",
									"name": "funds",
									"type": "tuple"
								}
							],
							"name": "queryBatchSwap",
							"outputs": [
								{
									"internalType": "int256[]",
									"name": "assetDeltas",
									"type": "int256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "enum IBeetVault.PoolSpecialization",
									"name": "specialization",
									"type": "uint8"
								}
							],
							"name": "registerPool",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"internalType": "contract IERC20Upgradeable[]",
									"name": "tokens",
									"type": "address[]"
								},
								{
									"internalType": "address[]",
									"name": "assetManagers",
									"type": "address[]"
								}
							],
							"name": "registerTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IAuthorizer",
									"name": "newAuthorizer",
									"type": "address"
								}
							],
							"name": "setAuthorizer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "paused",
									"type": "bool"
								}
							],
							"name": "setPaused",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "relayer",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setRelayerApproval",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "poolId",
											"type": "bytes32"
										},
										{
											"internalType": "enum IBeetVault.SwapKind",
											"name": "kind",
											"type": "uint8"
										},
										{
											"internalType": "contract IAsset",
											"name": "assetIn",
											"type": "address"
										},
										{
											"internalType": "contract IAsset",
											"name": "assetOut",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										}
									],
									"internalType": "struct IBeetVault.SingleSwap",
									"name": "singleSwap",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "bool",
											"name": "fromInternalBalance",
											"type": "bool"
										},
										{
											"internalType": "address payable",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "bool",
											"name": "toInternalBalance",
											"type": "bool"
										}
									],
									"internalType": "struct IBeetVault.FundManagement",
									"name": "funds",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "limit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"AuthorizerChanged(address)": {
								"details": "Emitted when a new authorizer is set by `setAuthorizer`."
							},
							"ExternalBalanceTransfer(address,address,address,uint256)": {
								"details": "Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account."
							},
							"InternalBalanceChanged(address,address,int256)": {
								"details": "Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through interacting with Pools using Internal Balance. Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH address."
							},
							"PoolBalanceChanged(bytes32,address,address[],int256[],uint256[])": {
								"details": "Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively."
							},
							"PoolBalanceManaged(bytes32,address,address,int256,int256)": {
								"details": "Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`."
							},
							"PoolRegistered(bytes32,address,uint8)": {
								"details": "Emitted when a Pool is registered by calling `registerPool`."
							},
							"RelayerApprovalChanged(address,address,bool)": {
								"details": "Emitted every time a relayer is approved or disapproved by `setRelayerApproval`."
							},
							"Swap(bytes32,address,address,uint256,uint256)": {
								"details": "Emitted for each individual swap performed by `swap` or `batchSwap`."
							},
							"TokensDeregistered(bytes32,address[])": {
								"details": "Emitted when a Pool deregisters tokens by calling `deregisterTokens`."
							},
							"TokensRegistered(bytes32,address[],address[])": {
								"details": "Emitted when a Pool registers tokens by calling `registerTokens`."
							}
						},
						"kind": "dev",
						"methods": {
							"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": {
								"details": "Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events."
							},
							"deregisterTokens(bytes32,address[])": {
								"details": "Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event."
							},
							"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))": {
								"details": "Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event."
							},
							"getAuthorizer()": {
								"details": "Returns the Vault's Authorizer."
							},
							"getDomainSeparator()": {
								"details": "Returns the EIP712 domain separator."
							},
							"getInternalBalance(address,address[])": {
								"details": "Returns `user`'s Internal Balance for a set of tokens."
							},
							"getNextNonce(address)": {
								"details": "Returns the next nonce used by an address to sign messages."
							},
							"getPausedState()": {
								"details": "Returns the current paused state."
							},
							"getPool(bytes32)": {
								"details": "Returns a Pool's contract address and specialization setting."
							},
							"getPoolTokenInfo(bytes32,address)": {
								"details": "Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager."
							},
							"getPoolTokens(bytes32)": {
								"details": "Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead."
							},
							"hasApprovedRelayer(address,address)": {
								"details": "Returns true if `user` has approved `relayer` to act as a relayer for them."
							},
							"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))": {
								"details": "Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event."
							},
							"managePoolBalance((uint8,bytes32,address,uint256)[])": {
								"details": "Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."
							},
							"manageUserBalance((uint8,address,uint256,address,address)[])": {
								"details": "Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them."
							},
							"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))": {
								"details": "Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction."
							},
							"registerPool(uint8)": {
								"details": "Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event."
							},
							"registerTokens(bytes32,address[],address[])": {
								"details": "Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event."
							},
							"setAuthorizer(address)": {
								"details": "Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event."
							},
							"setPaused(bool)": {
								"details": "Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited."
							},
							"setRelayerApproval(address,address,bool)": {
								"details": "Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event."
							},
							"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": {
								"details": "Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": "945bcec9",
							"deregisterTokens(bytes32,address[])": "7d3aeb96",
							"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))": "8bdb3913",
							"getAuthorizer()": "aaabadc5",
							"getDomainSeparator()": "ed24911d",
							"getInternalBalance(address,address[])": "0f5a6efa",
							"getNextNonce(address)": "90193b7c",
							"getPausedState()": "1c0de051",
							"getPool(bytes32)": "f6c00927",
							"getPoolTokenInfo(bytes32,address)": "b05f8e48",
							"getPoolTokens(bytes32)": "f94d4668",
							"hasApprovedRelayer(address,address)": "fec90d72",
							"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))": "b95cac28",
							"managePoolBalance((uint8,bytes32,address,uint256)[])": "e6c46092",
							"manageUserBalance((uint8,address,uint256,address,address)[])": "0e8e3e84",
							"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))": "f84d066e",
							"registerPool(uint8)": "09b2760f",
							"registerTokens(bytes32,address[],address[])": "66a9c7d2",
							"setAuthorizer(address)": "058a628f",
							"setPaused(bool)": "16c38b3c",
							"setRelayerApproval(address,address,bool)": "fa6e671d",
							"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": "52bbbe29"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExternalBalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"InternalBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"protocolFeeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"PoolBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cashDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"managedDelta\",\"type\":\"int256\"}],\"name\":\"PoolBalanceManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IBeetVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"RelayerApprovalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TokensDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"TokensRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum IBeetVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IBeetVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBeetVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"int256[]\",\"name\":\"limits\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"batchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"deregisterTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBeetVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getInternalBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IBeetVault.PoolSpecialization\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"hasApprovedRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBeetVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IBeetVault.PoolBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBeetVault.PoolBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"managePoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IBeetVault.UserBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IBeetVault.UserBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"manageUserBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBeetVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IBeetVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBeetVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"}],\"name\":\"queryBatchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"assetDeltas\",\"type\":\"int256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IBeetVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"registerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setRelayerApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IBeetVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IBeetVault.SingleSwap\",\"name\":\"singleSwap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBeetVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AuthorizerChanged(address)\":{\"details\":\"Emitted when a new authorizer is set by `setAuthorizer`.\"},\"ExternalBalanceTransfer(address,address,address,uint256)\":{\"details\":\"Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\"},\"InternalBalanceChanged(address,address,int256)\":{\"details\":\"Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through interacting with Pools using Internal Balance. Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH address.\"},\"PoolBalanceChanged(bytes32,address,address[],int256[],uint256[])\":{\"details\":\"Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\"},\"PoolBalanceManaged(bytes32,address,address,int256,int256)\":{\"details\":\"Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\"},\"PoolRegistered(bytes32,address,uint8)\":{\"details\":\"Emitted when a Pool is registered by calling `registerPool`.\"},\"RelayerApprovalChanged(address,address,bool)\":{\"details\":\"Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\"},\"Swap(bytes32,address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual swap performed by `swap` or `batchSwap`.\"},\"TokensDeregistered(bytes32,address[])\":{\"details\":\"Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\"},\"TokensRegistered(bytes32,address[],address[])\":{\"details\":\"Emitted when a Pool registers tokens by calling `registerTokens`.\"}},\"kind\":\"dev\",\"methods\":{\"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)\":{\"details\":\"Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events.\"},\"deregisterTokens(bytes32,address[])\":{\"details\":\"Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event.\"},\"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event.\"},\"getAuthorizer()\":{\"details\":\"Returns the Vault's Authorizer.\"},\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getInternalBalance(address,address[])\":{\"details\":\"Returns `user`'s Internal Balance for a set of tokens.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"},\"getPausedState()\":{\"details\":\"Returns the current paused state.\"},\"getPool(bytes32)\":{\"details\":\"Returns a Pool's contract address and specialization setting.\"},\"getPoolTokenInfo(bytes32,address)\":{\"details\":\"Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager.\"},\"getPoolTokens(bytes32)\":{\"details\":\"Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead.\"},\"hasApprovedRelayer(address,address)\":{\"details\":\"Returns true if `user` has approved `relayer` to act as a relayer for them.\"},\"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event.\"},\"managePoolBalance((uint8,bytes32,address,uint256)[])\":{\"details\":\"Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\"},\"manageUserBalance((uint8,address,uint256,address,address)[])\":{\"details\":\"Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\"},\"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))\":{\"details\":\"Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction.\"},\"registerPool(uint8)\":{\"details\":\"Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event.\"},\"registerTokens(bytes32,address[],address[])\":{\"details\":\"Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event.\"},\"setAuthorizer(address)\":{\"details\":\"Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event.\"},\"setPaused(bool)\":{\"details\":\"Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited.\"},\"setRelayerApproval(address,address,bool)\":{\"details\":\"Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event.\"},\"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)\":{\"details\":\"Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IBeetVault.sol\":\"IBeetVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcec0617473fa22a0866d7daf25bf4d664a62902e49c4a158aef54c1e4348e8a\",\"dweb:/ipfs/QmPQetTKnLJBAQQrLKUWGVZwfp3VGmBhnqqJvmJTycM1jR\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"interfaces/IAsset.sol\":{\"keccak256\":\"0xff48319da762af24416ccb39a5aca47b4d6ee06e9e1007d209560f55cb21f50a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://815c8e0c66866fc425f2ca676800a3a18d67b74bb4815811f1500a122ba4ded8\",\"dweb:/ipfs/QmVVCvxqEkAb9CFGq6ZqZxQgWTqkgX47Eg3M4VViTUHaX8\"]},\"interfaces/IAuthorizer.sol\":{\"keccak256\":\"0x517f3d9de85082dd40555d393ffbbee53a29335cfd33ae813c91165ef4d52ad2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df2f08d9b38124f41fd351c4cb6755219cd9ae0176488dd61a1b9280e032e41a\",\"dweb:/ipfs/QmUL5Fdsp4RviMYN6ZtfTfBMJKPh6suVpxfE9yDMv5aAmK\"]},\"interfaces/IBeetVault.sol\":{\"keccak256\":\"0x246b4ad8090c35fcd7b0ffbc966356795b28bb4b4a897c677a962bcfa729989d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1634823fa556e653cf83853fc7bcba57e4c719996e29d641f1d55a22d888d1a5\",\"dweb:/ipfs/QmVzs1cmnZpEMZDbP5SuxNoQNYrbQLpvELAGPGLHQYysgc\"]},\"interfaces/ISignaturesValidator.sol\":{\"keccak256\":\"0xbfab23cacf288d9575e136b16706e3289aed7898e9ac2d4fd854a1812bed4bb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://613443b184ac61b4dfbedc5402c90fa42b6aea838896890b345b4f5d6561b111\",\"dweb:/ipfs/QmRaVYaPPjp4La96XaRvXcmaTkkVQpYortNKyFGJicxGhF\"]},\"interfaces/ITemporarilyPausable.sol\":{\"keccak256\":\"0xa97c7c41e0bf075552f83e02f7552c3903014107919039548474982b0434cde9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://600a808c3d7791ca8a605e46cc8c4a1b2ae7097b6ffeddeab191d73db0acfc1a\",\"dweb:/ipfs/QmRfLLMHWF1roGdconfHYEzGkCQfs5Y5ZmF6cudMes4rsk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/ISignaturesValidator.sol": {
				"ISignaturesValidator": {
					"abi": [
						{
							"inputs": [],
							"name": "getDomainSeparator",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getNextNonce",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the SignatureValidator helper, used to support meta-transactions.",
						"kind": "dev",
						"methods": {
							"getDomainSeparator()": {
								"details": "Returns the EIP712 domain separator."
							},
							"getNextNonce(address)": {
								"details": "Returns the next nonce used by an address to sign messages."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getDomainSeparator()": "ed24911d",
							"getNextNonce(address)": "90193b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the SignatureValidator helper, used to support meta-transactions.\",\"kind\":\"dev\",\"methods\":{\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/ISignaturesValidator.sol\":\"ISignaturesValidator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/ISignaturesValidator.sol\":{\"keccak256\":\"0xbfab23cacf288d9575e136b16706e3289aed7898e9ac2d4fd854a1812bed4bb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://613443b184ac61b4dfbedc5402c90fa42b6aea838896890b345b4f5d6561b111\",\"dweb:/ipfs/QmRaVYaPPjp4La96XaRvXcmaTkkVQpYortNKyFGJicxGhF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/ITemporarilyPausable.sol": {
				"ITemporarilyPausable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bool",
									"name": "paused",
									"type": "bool"
								}
							],
							"name": "PausedStateChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "getPausedState",
							"outputs": [
								{
									"internalType": "bool",
									"name": "paused",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "pauseWindowEndTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "bufferPeriodEndTime",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"PausedStateChanged(bool)": {
								"details": "Emitted every time the pause state changes by `_setPaused`."
							}
						},
						"kind": "dev",
						"methods": {
							"getPausedState()": {
								"details": "Returns the current paused state."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getPausedState()": "1c0de051"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"PausedStateChanged(bool)\":{\"details\":\"Emitted every time the pause state changes by `_setPaused`.\"}},\"kind\":\"dev\",\"methods\":{\"getPausedState()\":{\"details\":\"Returns the current paused state.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/ITemporarilyPausable.sol\":\"ITemporarilyPausable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/ITemporarilyPausable.sol\":{\"keccak256\":\"0xa97c7c41e0bf075552f83e02f7552c3903014107919039548474982b0434cde9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://600a808c3d7791ca8a605e46cc8c4a1b2ae7097b6ffeddeab191d73db0acfc1a\",\"dweb:/ipfs/QmRfLLMHWF1roGdconfHYEzGkCQfs5Y5ZmF6cudMes4rsk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IVault.sol": {
				"IVault": {
					"abi": [
						{
							"inputs": [],
							"name": "depositAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPricePerFullShare",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"depositAll()": "de5f6268",
							"getPricePerFullShare()": "77c7b8fc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IVault.sol\":\"IVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IVault.sol\":{\"keccak256\":\"0xa7320eea659b2ab118085b6102d25d72c538cf4b0ea9424bfdd6e521b5601d8c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f780a05094d7bf8035dd68590051e4383581427c23872c60ab32b0b837e873e4\",\"dweb:/ipfs/QmXU3LdQPLH7288ig8HDEX1LE3ZxxGYbWJ8sE6czAvBAWJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2519",
				"formattedMessage": "Warning: This declaration shadows an existing declaration.\n  --> SuperDepositor.sol:58:9:\n   |\n58 |         IERC20Upgradeable token = IERC20Upgradeable(token);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\nNote: The shadowed declaration is here:\n  --> SuperDepositor.sol:57:48:\n   |\n57 |     function _approveIfNeeded(address spender, address token) internal {\n   |                                                ^^^^^^^^^^^^^\n\n",
				"message": "This declaration shadows an existing declaration.",
				"secondarySourceLocations": [
					{
						"end": 2041,
						"file": "SuperDepositor.sol",
						"message": "The shadowed declaration is here:",
						"start": 2028
					}
				],
				"severity": "warning",
				"sourceLocation": {
					"end": 2086,
					"file": "SuperDepositor.sol",
					"start": 2063
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1322
						],
						"Initializable": [
							141
						]
					},
					"id": 142,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 142,
							"sourceUnit": 1323,
							"src": "138:44:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "184:2198:0",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 141,
							"linearizedBaseContracts": [
								141
							],
							"name": "Initializable",
							"nameLocation": "2401:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 4,
										"nodeType": "StructuredDocumentation",
										"src": "2421:109:0",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 6,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2549:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 141,
									"src": "2535:26:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 5,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2535:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 7,
										"nodeType": "StructuredDocumentation",
										"src": "2568:91:0",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 9,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2677:13:0",
									"nodeType": "VariableDeclaration",
									"scope": 141,
									"src": "2664:26:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 8,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2664:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 10,
										"nodeType": "StructuredDocumentation",
										"src": "2697:90:0",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
									"id": 14,
									"name": "Initialized",
									"nameLocation": "2798:11:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2816:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "2810:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 11,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2810:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2809:15:0"
									},
									"src": "2792:33:0"
								},
								{
									"body": {
										"id": 42,
										"nodeType": "Block",
										"src": "3101:257:0",
										"statements": [
											{
												"assignments": [
													18
												],
												"declarations": [
													{
														"constant": false,
														"id": 18,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3116:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 42,
														"src": "3111:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 17,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3111:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 22,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "31",
															"id": 20,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3156:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 19,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 140,
														"src": "3133:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 21,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3133:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3111:47:0"
											},
											{
												"condition": {
													"id": 23,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 18,
													"src": "3172:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 29,
												"nodeType": "IfStatement",
												"src": "3168:65:0",
												"trueBody": {
													"id": 28,
													"nodeType": "Block",
													"src": "3188:45:0",
													"statements": [
														{
															"expression": {
																"id": 26,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 24,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "3202:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 25,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3218:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3202:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 27,
															"nodeType": "ExpressionStatement",
															"src": "3202:20:0"
														}
													]
												}
											},
											{
												"id": 30,
												"nodeType": "PlaceholderStatement",
												"src": "3242:1:0"
											},
											{
												"condition": {
													"id": 31,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 18,
													"src": "3257:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 41,
												"nodeType": "IfStatement",
												"src": "3253:99:0",
												"trueBody": {
													"id": 40,
													"nodeType": "Block",
													"src": "3273:79:0",
													"statements": [
														{
															"expression": {
																"id": 34,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 32,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "3287:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 33,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3303:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3287:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 35,
															"nodeType": "ExpressionStatement",
															"src": "3287:21:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 37,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3339:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 36,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 14,
																	"src": "3327:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 38,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3327:14:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 39,
															"nodeType": "EmitStatement",
															"src": "3322:19:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "2831:242:0",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`."
									},
									"id": 43,
									"name": "initializer",
									"nameLocation": "3087:11:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3098:2:0"
									},
									"src": "3078:280:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 73,
										"nodeType": "Block",
										"src": "4173:269:0",
										"statements": [
											{
												"assignments": [
													49
												],
												"declarations": [
													{
														"constant": false,
														"id": 49,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4188:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 73,
														"src": "4183:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 48,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4183:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 53,
												"initialValue": {
													"arguments": [
														{
															"id": 51,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 46,
															"src": "4228:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 50,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 140,
														"src": "4205:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 52,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4205:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4183:53:0"
											},
											{
												"condition": {
													"id": 54,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 49,
													"src": "4250:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 60,
												"nodeType": "IfStatement",
												"src": "4246:65:0",
												"trueBody": {
													"id": 59,
													"nodeType": "Block",
													"src": "4266:45:0",
													"statements": [
														{
															"expression": {
																"id": 57,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 55,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "4280:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 56,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4296:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "4280:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 58,
															"nodeType": "ExpressionStatement",
															"src": "4280:20:0"
														}
													]
												}
											},
											{
												"id": 61,
												"nodeType": "PlaceholderStatement",
												"src": "4320:1:0"
											},
											{
												"condition": {
													"id": 62,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 49,
													"src": "4335:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 72,
												"nodeType": "IfStatement",
												"src": "4331:105:0",
												"trueBody": {
													"id": 71,
													"nodeType": "Block",
													"src": "4351:85:0",
													"statements": [
														{
															"expression": {
																"id": 65,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 63,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 9,
																	"src": "4365:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 64,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4381:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "4365:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 66,
															"nodeType": "ExpressionStatement",
															"src": "4365:21:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 68,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 46,
																		"src": "4417:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 67,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 14,
																	"src": "4405:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 69,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4405:20:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 70,
															"nodeType": "EmitStatement",
															"src": "4400:25:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 44,
										"nodeType": "StructuredDocumentation",
										"src": "3364:766:0",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n initialization step. This is essential to configure modules that are added through upgrades and that require\n initialization.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator."
									},
									"id": 74,
									"name": "reinitializer",
									"nameLocation": "4144:13:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4164:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "4158:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 45,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4158:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4157:15:0"
									},
									"src": "4135:307:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "4680:97:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 78,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "4698:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 79,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4713:45:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 77,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4690:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4690:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "4690:69:0"
											},
											{
												"id": 82,
												"nodeType": "PlaceholderStatement",
												"src": "4769:1:0"
											}
										]
									},
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "4448:199:0",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 84,
									"name": "onlyInitializing",
									"nameLocation": "4661:16:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4677:2:0"
									},
									"src": "4652:125:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 96,
										"nodeType": "Block",
										"src": "5225:56:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 91,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5263:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		},
																		"typeName": {
																			"id": 90,
																			"name": "uint8",
																			"nodeType": "ElementaryTypeName",
																			"src": "5263:5:0",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		}
																	],
																	"id": 89,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "5258:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5258:11:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint8",
																	"typeString": "type(uint8)"
																}
															},
															"id": 93,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "5258:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 88,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 140,
														"src": "5235:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 94,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5235:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 95,
												"nodeType": "ExpressionStatement",
												"src": "5235:39:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "4783:388:0",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies."
									},
									"id": 97,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5185:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5205:2:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5225:0:0"
									},
									"scope": 141,
									"src": "5176:105:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 139,
										"nodeType": "Block",
										"src": "5357:738:0",
										"statements": [
											{
												"condition": {
													"id": 104,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 9,
													"src": "5684:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 137,
													"nodeType": "Block",
													"src": "5922:167:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		"id": 127,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 125,
																			"name": "_initialized",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 6,
																			"src": "5944:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 126,
																			"name": "version",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 99,
																			"src": "5959:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"src": "5944:22:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
																		"id": 128,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5968:48:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		},
																		"value": "Initializable: contract is already initialized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		}
																	],
																	"id": 124,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5936:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 129,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5936:81:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 130,
															"nodeType": "ExpressionStatement",
															"src": "5936:81:0"
														},
														{
															"expression": {
																"id": 133,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 131,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 6,
																	"src": "6031:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 132,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 99,
																	"src": "6046:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6031:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 134,
															"nodeType": "ExpressionStatement",
															"src": "6031:22:0"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 135,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6074:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 103,
															"id": 136,
															"nodeType": "Return",
															"src": "6067:11:0"
														}
													]
												},
												"id": 138,
												"nodeType": "IfStatement",
												"src": "5680:409:0",
												"trueBody": {
													"id": 123,
													"nodeType": "Block",
													"src": "5699:217:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 117,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 108,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 106,
																				"name": "version",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 99,
																				"src": "5738:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 107,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5749:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "5738:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"id": 116,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "5754:45:0",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 113,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "5793:4:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$141",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$141",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 112,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "5785:7:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 111,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "5785:7:0",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 114,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "5785:13:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 109,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1322,
																						"src": "5755:18:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$1322_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 110,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1097,
																					"src": "5755:29:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5755:44:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "5738:61:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
																		"id": 118,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5817:48:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		},
																		"value": "Initializable: contract is already initialized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		}
																	],
																	"id": 105,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5713:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 119,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5713:166:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 120,
															"nodeType": "ExpressionStatement",
															"src": "5713:166:0"
														},
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 121,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5900:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 103,
															"id": 122,
															"nodeType": "Return",
															"src": "5893:12:0"
														}
													]
												}
											}
										]
									},
									"id": 140,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setInitializedVersion",
									"nameLocation": "5296:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5325:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "5319:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 98,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5319:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5318:15:0"
									},
									"returnParameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "5351:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 101,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5351:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5350:6:0"
									},
									"scope": 141,
									"src": "5287:808:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 142,
							"src": "2383:3714:0",
							"usedErrors": []
						}
					],
					"src": "113:5985:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1322
						],
						"ContextUpgradeable": [
							1364
						],
						"ERC20Upgradeable": [
							752
						],
						"IERC20MetadataUpgradeable": [
							855
						],
						"IERC20Upgradeable": [
							830
						],
						"Initializable": [
							141
						]
					},
					"id": 753,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 143,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "./IERC20Upgradeable.sol",
							"id": 144,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 753,
							"sourceUnit": 831,
							"src": "130:33:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
							"file": "./extensions/IERC20MetadataUpgradeable.sol",
							"id": 145,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 753,
							"sourceUnit": 856,
							"src": "164:52:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 146,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 753,
							"sourceUnit": 1365,
							"src": "217:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 147,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 753,
							"sourceUnit": 142,
							"src": "262:45:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 149,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 141,
										"src": "1511:13:1"
									},
									"id": 150,
									"nodeType": "InheritanceSpecifier",
									"src": "1511:13:1"
								},
								{
									"baseName": {
										"id": 151,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1364,
										"src": "1526:18:1"
									},
									"id": 152,
									"nodeType": "InheritanceSpecifier",
									"src": "1526:18:1"
								},
								{
									"baseName": {
										"id": 153,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 830,
										"src": "1546:17:1"
									},
									"id": 154,
									"nodeType": "InheritanceSpecifier",
									"src": "1546:17:1"
								},
								{
									"baseName": {
										"id": 155,
										"name": "IERC20MetadataUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 855,
										"src": "1565:25:1"
									},
									"id": 156,
									"nodeType": "InheritanceSpecifier",
									"src": "1565:25:1"
								}
							],
							"canonicalName": "ERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 148,
								"nodeType": "StructuredDocumentation",
								"src": "309:1172:1",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 752,
							"linearizedBaseContracts": [
								752,
								855,
								830,
								1364,
								141
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1491:16:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 160,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1633:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 752,
									"src": "1597:45:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 159,
										"keyType": {
											"id": 157,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1605:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1597:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 158,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1616:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 166,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1705:11:1",
									"nodeType": "VariableDeclaration",
									"scope": 752,
									"src": "1649:67:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 165,
										"keyType": {
											"id": 161,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1657:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1649:47:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 164,
											"keyType": {
												"id": 162,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1676:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1668:27:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 163,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1687:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 168,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1739:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 752,
									"src": "1723:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 167,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 170,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1773:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 752,
									"src": "1758:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 169,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1758:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 172,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1799:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 752,
									"src": "1784:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 171,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1784:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 187,
										"nodeType": "Block",
										"src": "2208:55:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 183,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 175,
															"src": "2241:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 184,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 177,
															"src": "2248:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 182,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 206,
														"src": "2218:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2218:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 186,
												"nodeType": "ExpressionStatement",
												"src": "2218:38:1"
											}
										]
									},
									"documentation": {
										"id": 173,
										"nodeType": "StructuredDocumentation",
										"src": "1813:298:1",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 188,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 180,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 179,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 84,
												"src": "2191:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2191:16:1"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2125:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2152:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "2138:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 174,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2138:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2173:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "2159:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 176,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2159:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:44:1"
									},
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2208:0:1"
									},
									"scope": 752,
									"src": "2116:147:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 205,
										"nodeType": "Block",
										"src": "2371:57:1",
										"statements": [
											{
												"expression": {
													"id": 199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 197,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 170,
														"src": "2381:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 198,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 190,
														"src": "2389:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2381:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 200,
												"nodeType": "ExpressionStatement",
												"src": "2381:13:1"
											},
											{
												"expression": {
													"id": 203,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 201,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 172,
														"src": "2404:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 202,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 192,
														"src": "2414:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2404:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 204,
												"nodeType": "ExpressionStatement",
												"src": "2404:17:1"
											}
										]
									},
									"id": 206,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 195,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 194,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 84,
												"src": "2354:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2354:16:1"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2278:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2315:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "2301:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 189,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2301:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2336:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "2322:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 191,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2322:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2300:44:1"
									},
									"returnParameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2371:0:1"
									},
									"scope": 752,
									"src": "2269:159:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										842
									],
									"body": {
										"id": 215,
										"nodeType": "Block",
										"src": "2562:29:1",
										"statements": [
											{
												"expression": {
													"id": 213,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 170,
													"src": "2579:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 212,
												"id": 214,
												"nodeType": "Return",
												"src": "2572:12:1"
											}
										]
									},
									"documentation": {
										"id": 207,
										"nodeType": "StructuredDocumentation",
										"src": "2434:54:1",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 216,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2502:4:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 209,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2529:8:1"
									},
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2506:2:1"
									},
									"returnParameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "2547:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 210,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2547:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2546:15:1"
									},
									"scope": 752,
									"src": "2493:98:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										848
									],
									"body": {
										"id": 225,
										"nodeType": "Block",
										"src": "2775:31:1",
										"statements": [
											{
												"expression": {
													"id": 223,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 172,
													"src": "2792:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 222,
												"id": 224,
												"nodeType": "Return",
												"src": "2785:14:1"
											}
										]
									},
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "2597:102:1",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 226,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2713:6:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 219,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2742:8:1"
									},
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2719:2:1"
									},
									"returnParameters": {
										"id": 222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "2760:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 220,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2760:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2759:15:1"
									},
									"scope": 752,
									"src": "2704:102:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										854
									],
									"body": {
										"id": 235,
										"nodeType": "Block",
										"src": "3495:26:1",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 233,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3512:2:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 232,
												"id": 234,
												"nodeType": "Return",
												"src": "3505:9:1"
											}
										]
									},
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "2812:613:1",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 236,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3439:8:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 229,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3470:8:1"
									},
									"parameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3447:2:1"
									},
									"returnParameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3488:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 230,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3488:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:7:1"
									},
									"scope": 752,
									"src": "3430:91:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										779
									],
									"body": {
										"id": 245,
										"nodeType": "Block",
										"src": "3651:36:1",
										"statements": [
											{
												"expression": {
													"id": 243,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 168,
													"src": "3668:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 242,
												"id": 244,
												"nodeType": "Return",
												"src": "3661:19:1"
											}
										]
									},
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "3527:49:1",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 246,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3590:11:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 239,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3624:8:1"
									},
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3601:2:1"
									},
									"returnParameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3642:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3642:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3641:9:1"
									},
									"scope": 752,
									"src": "3581:106:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										787
									],
									"body": {
										"id": 259,
										"nodeType": "Block",
										"src": "3828:42:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 255,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 160,
														"src": "3845:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 257,
													"indexExpression": {
														"id": 256,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 249,
														"src": "3855:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3845:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 254,
												"id": 258,
												"nodeType": "Return",
												"src": "3838:25:1"
											}
										]
									},
									"documentation": {
										"id": 247,
										"nodeType": "StructuredDocumentation",
										"src": "3693:47:1",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3754:9:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 251,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3801:8:1"
									},
									"parameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3772:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "3764:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 248,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3764:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3763:17:1"
									},
									"returnParameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "3819:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:9:1"
									},
									"scope": 752,
									"src": "3745:125:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										797
									],
									"body": {
										"id": 284,
										"nodeType": "Block",
										"src": "4151:104:1",
										"statements": [
											{
												"assignments": [
													272
												],
												"declarations": [
													{
														"constant": false,
														"id": 272,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4169:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 284,
														"src": "4161:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 271,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4161:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 275,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 273,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1349,
														"src": "4177:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4177:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4161:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 277,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 272,
															"src": "4209:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 278,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 263,
															"src": "4216:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 279,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 265,
															"src": "4220:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 276,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 508,
														"src": "4199:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4199:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 281,
												"nodeType": "ExpressionStatement",
												"src": "4199:28:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 282,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4244:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 270,
												"id": 283,
												"nodeType": "Return",
												"src": "4237:11:1"
											}
										]
									},
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "3876:185:1",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 285,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4075:8:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 267,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4127:8:1"
									},
									"parameters": {
										"id": 266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4092:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "4084:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4084:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4104:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "4096:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4096:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4083:28:1"
									},
									"returnParameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "4145:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 268,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4145:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4144:6:1"
									},
									"scope": 752,
									"src": "4066:189:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										807
									],
									"body": {
										"id": 302,
										"nodeType": "Block",
										"src": "4411:51:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 296,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 166,
															"src": "4428:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 298,
														"indexExpression": {
															"id": 297,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 288,
															"src": "4440:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4428:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 300,
													"indexExpression": {
														"id": 299,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 290,
														"src": "4447:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4428:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 295,
												"id": 301,
												"nodeType": "Return",
												"src": "4421:34:1"
											}
										]
									},
									"documentation": {
										"id": 286,
										"nodeType": "StructuredDocumentation",
										"src": "4261:47:1",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 303,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4322:9:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 292,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4384:8:1"
									},
									"parameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4340:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "4332:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 287,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4332:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4355:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "4347:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4347:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4331:32:1"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "4402:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4402:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4401:9:1"
									},
									"scope": 752,
									"src": "4313:149:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										817
									],
									"body": {
										"id": 327,
										"nodeType": "Block",
										"src": "4859:108:1",
										"statements": [
											{
												"assignments": [
													315
												],
												"declarations": [
													{
														"constant": false,
														"id": 315,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4877:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 327,
														"src": "4869:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 314,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4869:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 318,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 316,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1349,
														"src": "4885:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4885:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4869:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 320,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 315,
															"src": "4916:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 321,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 306,
															"src": "4923:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 322,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 308,
															"src": "4932:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 319,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 681,
														"src": "4907:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4907:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 324,
												"nodeType": "ExpressionStatement",
												"src": "4907:32:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4956:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 313,
												"id": 326,
												"nodeType": "Return",
												"src": "4949:11:1"
											}
										]
									},
									"documentation": {
										"id": 304,
										"nodeType": "StructuredDocumentation",
										"src": "4468:297:1",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 328,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4779:7:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 310,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4835:8:1"
									},
									"parameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4795:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "4787:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4787:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4812:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "4804:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4804:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4786:33:1"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "4853:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 311,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4853:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4852:6:1"
									},
									"scope": 752,
									"src": "4770:197:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										829
									],
									"body": {
										"id": 360,
										"nodeType": "Block",
										"src": "5662:153:1",
										"statements": [
											{
												"assignments": [
													342
												],
												"declarations": [
													{
														"constant": false,
														"id": 342,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5680:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 360,
														"src": "5672:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 341,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5672:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 345,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 343,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1349,
														"src": "5690:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5690:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5672:30:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 347,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 331,
															"src": "5728:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 348,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 342,
															"src": "5734:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 349,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 335,
															"src": "5743:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 346,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 724,
														"src": "5712:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5712:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 351,
												"nodeType": "ExpressionStatement",
												"src": "5712:38:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 353,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 331,
															"src": "5770:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 354,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 333,
															"src": "5776:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 355,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 335,
															"src": "5780:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 352,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 508,
														"src": "5760:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5760:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 357,
												"nodeType": "ExpressionStatement",
												"src": "5760:27:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 358,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5804:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 340,
												"id": 359,
												"nodeType": "Return",
												"src": "5797:11:1"
											}
										]
									},
									"documentation": {
										"id": 329,
										"nodeType": "StructuredDocumentation",
										"src": "4973:551:1",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 361,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5538:12:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 337,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5638:8:1"
									},
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5568:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "5560:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5560:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5590:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "5582:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5582:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5610:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "5602:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5602:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5550:72:1"
									},
									"returnParameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "5656:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 338,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5656:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5655:6:1"
									},
									"scope": 752,
									"src": "5529:286:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 389,
										"nodeType": "Block",
										"src": "6304:140:1",
										"statements": [
											{
												"assignments": [
													372
												],
												"declarations": [
													{
														"constant": false,
														"id": 372,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6322:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 389,
														"src": "6314:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 371,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6314:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 375,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 373,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1349,
														"src": "6330:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6330:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6314:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 377,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 372,
															"src": "6361:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 378,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "6368:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 384,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 380,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 372,
																		"src": "6387:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 381,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 364,
																		"src": "6394:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 379,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 303,
																	"src": "6377:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 382,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6377:25:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 383,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "6405:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6377:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 376,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 681,
														"src": "6352:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 385,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6352:64:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 386,
												"nodeType": "ExpressionStatement",
												"src": "6352:64:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 387,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6433:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 370,
												"id": 388,
												"nodeType": "Return",
												"src": "6426:11:1"
											}
										]
									},
									"documentation": {
										"id": 362,
										"nodeType": "StructuredDocumentation",
										"src": "5821:384:1",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 390,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6219:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6245:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 390,
												"src": "6237:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6237:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6262:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 390,
												"src": "6254:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6254:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6236:37:1"
									},
									"returnParameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 390,
												"src": "6298:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 368,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6298:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6297:6:1"
									},
									"scope": 752,
									"src": "6210:234:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 430,
										"nodeType": "Block",
										"src": "7030:328:1",
										"statements": [
											{
												"assignments": [
													401
												],
												"declarations": [
													{
														"constant": false,
														"id": 401,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7048:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 430,
														"src": "7040:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 400,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7040:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 404,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 402,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1349,
														"src": "7056:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7056:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7040:28:1"
											},
											{
												"assignments": [
													406
												],
												"declarations": [
													{
														"constant": false,
														"id": 406,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "7086:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 430,
														"src": "7078:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 405,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7078:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 411,
												"initialValue": {
													"arguments": [
														{
															"id": 408,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 401,
															"src": "7115:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 409,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 393,
															"src": "7122:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 407,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 303,
														"src": "7105:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7105:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7078:52:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 415,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 413,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 406,
																"src": "7148:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 414,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 395,
																"src": "7168:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7148:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 416,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7185:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 412,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7140:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7140:85:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 418,
												"nodeType": "ExpressionStatement",
												"src": "7140:85:1"
											},
											{
												"id": 427,
												"nodeType": "UncheckedBlock",
												"src": "7235:95:1",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 420,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 401,
																	"src": "7268:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 421,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 393,
																	"src": "7275:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 422,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 406,
																		"src": "7284:16:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 423,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 395,
																		"src": "7303:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7284:34:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 419,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 681,
																"src": "7259:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 425,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7259:60:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 426,
														"nodeType": "ExpressionStatement",
														"src": "7259:60:1"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 428,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7347:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 399,
												"id": 429,
												"nodeType": "Return",
												"src": "7340:11:1"
											}
										]
									},
									"documentation": {
										"id": 391,
										"nodeType": "StructuredDocumentation",
										"src": "6450:476:1",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 431,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6940:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6966:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 431,
												"src": "6958:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 392,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6958:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6983:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 431,
												"src": "6975:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 394,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6975:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6957:42:1"
									},
									"returnParameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 431,
												"src": "7024:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 397,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7024:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7023:6:1"
									},
									"scope": 752,
									"src": "6931:427:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 507,
										"nodeType": "Block",
										"src": "7929:543:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 447,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 442,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 434,
																"src": "7947:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 445,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7963:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 444,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7955:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 443,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7955:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 446,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7955:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7947:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 448,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7967:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 441,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7939:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7939:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 450,
												"nodeType": "ExpressionStatement",
												"src": "7939:68:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 452,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 436,
																"src": "8025:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8039:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 454,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8031:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 453,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8031:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 456,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8031:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8025:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 458,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8043:37:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 451,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8017:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8017:64:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 460,
												"nodeType": "ExpressionStatement",
												"src": "8017:64:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 462,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 434,
															"src": "8113:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 463,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 436,
															"src": "8119:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 464,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 438,
															"src": "8123:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 461,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 735,
														"src": "8092:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8092:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 466,
												"nodeType": "ExpressionStatement",
												"src": "8092:38:1"
											},
											{
												"assignments": [
													468
												],
												"declarations": [
													{
														"constant": false,
														"id": 468,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8149:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 507,
														"src": "8141:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 467,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8141:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 472,
												"initialValue": {
													"baseExpression": {
														"id": 469,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 160,
														"src": "8163:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 471,
													"indexExpression": {
														"id": 470,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 434,
														"src": "8173:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8163:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8141:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 476,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 474,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 468,
																"src": "8196:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 475,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 438,
																"src": "8211:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8196:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 477,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8219:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 473,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8188:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 478,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:72:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 479,
												"nodeType": "ExpressionStatement",
												"src": "8188:72:1"
											},
											{
												"id": 488,
												"nodeType": "UncheckedBlock",
												"src": "8270:73:1",
												"statements": [
													{
														"expression": {
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 480,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 160,
																	"src": "8294:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 482,
																"indexExpression": {
																	"id": 481,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 434,
																	"src": "8304:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8294:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 485,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 483,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 468,
																	"src": "8312:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 484,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 438,
																	"src": "8326:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8312:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8294:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 487,
														"nodeType": "ExpressionStatement",
														"src": "8294:38:1"
													}
												]
											},
											{
												"expression": {
													"id": 493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 489,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 160,
															"src": "8352:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 491,
														"indexExpression": {
															"id": 490,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 436,
															"src": "8362:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8352:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 492,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 438,
														"src": "8369:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8352:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 494,
												"nodeType": "ExpressionStatement",
												"src": "8352:23:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 496,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 434,
															"src": "8400:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 497,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 436,
															"src": "8406:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 498,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 438,
															"src": "8410:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 495,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 764,
														"src": "8391:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8391:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 500,
												"nodeType": "EmitStatement",
												"src": "8386:31:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 502,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 434,
															"src": "8448:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 503,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 436,
															"src": "8454:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 504,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 438,
															"src": "8458:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 501,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 746,
														"src": "8428:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8428:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 506,
												"nodeType": "ExpressionStatement",
												"src": "8428:37:1"
											}
										]
									},
									"documentation": {
										"id": 432,
										"nodeType": "StructuredDocumentation",
										"src": "7364:452:1",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7830:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7857:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "7849:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7849:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7879:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "7871:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 435,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7871:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7899:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "7891:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 437,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7891:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7839:72:1"
									},
									"returnParameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7929:0:1"
									},
									"scope": 752,
									"src": "7821:651:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 563,
										"nodeType": "Block",
										"src": "8813:324:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 522,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 517,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 511,
																"src": "8831:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 520,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8850:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 519,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8842:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 518,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8842:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 521,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8842:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8831:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 523,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8854:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 516,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8823:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8823:65:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 525,
												"nodeType": "ExpressionStatement",
												"src": "8823:65:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 529,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8928:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 528,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8920:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 527,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8920:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 530,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8920:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 531,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "8932:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 532,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "8941:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 526,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 735,
														"src": "8899:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8899:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 534,
												"nodeType": "ExpressionStatement",
												"src": "8899:49:1"
											},
											{
												"expression": {
													"id": 537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 535,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 168,
														"src": "8959:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 536,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 513,
														"src": "8975:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8959:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 538,
												"nodeType": "ExpressionStatement",
												"src": "8959:22:1"
											},
											{
												"expression": {
													"id": 543,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 539,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 160,
															"src": "8991:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 541,
														"indexExpression": {
															"id": 540,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "9001:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8991:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 542,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 513,
														"src": "9013:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8991:28:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 544,
												"nodeType": "ExpressionStatement",
												"src": "8991:28:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 548,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9051:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 547,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9043:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 546,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9043:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 549,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9043:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 550,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "9055:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 551,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "9064:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 545,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 764,
														"src": "9034:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9034:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 553,
												"nodeType": "EmitStatement",
												"src": "9029:42:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 557,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9110:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 556,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9102:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 555,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9102:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 558,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9102:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 559,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "9114:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 560,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "9123:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 554,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 746,
														"src": "9082:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 561,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9082:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 562,
												"nodeType": "ExpressionStatement",
												"src": "9082:48:1"
											}
										]
									},
									"documentation": {
										"id": 509,
										"nodeType": "StructuredDocumentation",
										"src": "8478:265:1",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 564,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8757:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 511,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8771:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "8763:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 510,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8763:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8788:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "8780:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8780:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8762:33:1"
									},
									"returnParameters": {
										"id": 515,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8813:0:1"
									},
									"scope": 752,
									"src": "8748:389:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 635,
										"nodeType": "Block",
										"src": "9522:511:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 578,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 573,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 567,
																"src": "9540:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 576,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9559:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 575,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9551:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 574,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9551:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 577,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9551:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9540:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 579,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9563:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 572,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9532:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9532:67:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 581,
												"nodeType": "ExpressionStatement",
												"src": "9532:67:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 583,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 567,
															"src": "9631:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 586,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9648:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 585,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9640:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 584,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9640:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 587,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9640:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 588,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 569,
															"src": "9652:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 582,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 735,
														"src": "9610:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9610:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 590,
												"nodeType": "ExpressionStatement",
												"src": "9610:49:1"
											},
											{
												"assignments": [
													592
												],
												"declarations": [
													{
														"constant": false,
														"id": 592,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9678:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 635,
														"src": "9670:22:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 591,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9670:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 596,
												"initialValue": {
													"baseExpression": {
														"id": 593,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 160,
														"src": "9695:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 595,
													"indexExpression": {
														"id": 594,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 567,
														"src": "9705:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9695:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9670:43:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 600,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 598,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 592,
																"src": "9731:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 599,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 569,
																"src": "9749:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9731:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 601,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9757:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 597,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9723:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9723:71:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 603,
												"nodeType": "ExpressionStatement",
												"src": "9723:71:1"
											},
											{
												"id": 612,
												"nodeType": "UncheckedBlock",
												"src": "9804:79:1",
												"statements": [
													{
														"expression": {
															"id": 610,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 604,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 160,
																	"src": "9828:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 606,
																"indexExpression": {
																	"id": 605,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 567,
																	"src": "9838:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9828:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 609,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 607,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 592,
																	"src": "9849:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 608,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 569,
																	"src": "9866:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9849:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9828:44:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 611,
														"nodeType": "ExpressionStatement",
														"src": "9828:44:1"
													}
												]
											},
											{
												"expression": {
													"id": 615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 613,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 168,
														"src": "9892:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 614,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 569,
														"src": "9908:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9892:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 616,
												"nodeType": "ExpressionStatement",
												"src": "9892:22:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 618,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 567,
															"src": "9939:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 621,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9956:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 620,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9948:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 619,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9948:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 622,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9948:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 623,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 569,
															"src": "9960:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 617,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 764,
														"src": "9930:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 624,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9930:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 625,
												"nodeType": "EmitStatement",
												"src": "9925:42:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 627,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 567,
															"src": "9998:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 630,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10015:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 629,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10007:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 628,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10007:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 631,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10007:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 632,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 569,
															"src": "10019:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 626,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 746,
														"src": "9978:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9978:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 634,
												"nodeType": "ExpressionStatement",
												"src": "9978:48:1"
											}
										]
									},
									"documentation": {
										"id": 565,
										"nodeType": "StructuredDocumentation",
										"src": "9143:309:1",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 636,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9466:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9480:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "9472:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 566,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9472:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9497:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "9489:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 568,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9489:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9471:33:1"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9522:0:1"
									},
									"scope": 752,
									"src": "9457:576:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 680,
										"nodeType": "Block",
										"src": "10569:257:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 652,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 647,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 639,
																"src": "10587:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 650,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10604:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 649,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10596:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 648,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10596:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 651,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10596:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10587:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 653,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10608:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 646,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10579:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10579:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 655,
												"nodeType": "ExpressionStatement",
												"src": "10579:68:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 662,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 657,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 641,
																"src": "10665:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 660,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10684:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 659,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10676:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 658,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10676:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 661,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10676:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10665:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 663,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10688:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 656,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10657:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10657:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 665,
												"nodeType": "ExpressionStatement",
												"src": "10657:68:1"
											},
											{
												"expression": {
													"id": 672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 666,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 166,
																"src": "10736:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 669,
															"indexExpression": {
																"id": 667,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 639,
																"src": "10748:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10736:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 670,
														"indexExpression": {
															"id": 668,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 641,
															"src": "10755:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10736:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 671,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 643,
														"src": "10766:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10736:36:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 673,
												"nodeType": "ExpressionStatement",
												"src": "10736:36:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 675,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 639,
															"src": "10796:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 676,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 641,
															"src": "10803:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 677,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 643,
															"src": "10812:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 674,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 773,
														"src": "10787:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10787:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 679,
												"nodeType": "EmitStatement",
												"src": "10782:37:1"
											}
										]
									},
									"documentation": {
										"id": 637,
										"nodeType": "StructuredDocumentation",
										"src": "10039:412:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 681,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10465:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10491:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 681,
												"src": "10483:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 638,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10483:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 641,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10514:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 681,
												"src": "10506:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 640,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10506:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10539:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 681,
												"src": "10531:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10531:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10473:78:1"
									},
									"returnParameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10569:0:1"
									},
									"scope": 752,
									"src": "10456:370:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 723,
										"nodeType": "Block",
										"src": "11227:321:1",
										"statements": [
											{
												"assignments": [
													692
												],
												"declarations": [
													{
														"constant": false,
														"id": 692,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11245:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 723,
														"src": "11237:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 691,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11237:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 697,
												"initialValue": {
													"arguments": [
														{
															"id": 694,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 684,
															"src": "11274:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 695,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 686,
															"src": "11281:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 693,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 303,
														"src": "11264:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11264:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11237:52:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 698,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 692,
														"src": "11303:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11328:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 700,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11328:7:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 699,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11323:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 702,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11323:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 703,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11323:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11303:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 722,
												"nodeType": "IfStatement",
												"src": "11299:243:1",
												"trueBody": {
													"id": 721,
													"nodeType": "Block",
													"src": "11342:200:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 708,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 706,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 692,
																			"src": "11364:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 707,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 688,
																			"src": "11384:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11364:26:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 709,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11392:31:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 705,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11356:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 710,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11356:68:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 711,
															"nodeType": "ExpressionStatement",
															"src": "11356:68:1"
														},
														{
															"id": 720,
															"nodeType": "UncheckedBlock",
															"src": "11438:94:1",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 713,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 684,
																				"src": "11475:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 714,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 686,
																				"src": "11482:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 717,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 715,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 692,
																					"src": "11491:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 716,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 688,
																					"src": "11510:6:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11491:25:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 712,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 681,
																			"src": "11466:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 718,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11466:51:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 719,
																	"nodeType": "ExpressionStatement",
																	"src": "11466:51:1"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 682,
										"nodeType": "StructuredDocumentation",
										"src": "10832:270:1",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 724,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11116:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11149:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "11141:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 683,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11141:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11172:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "11164:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 685,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11164:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11197:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "11189:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 687,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11189:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11131:78:1"
									},
									"returnParameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11227:0:1"
									},
									"scope": 752,
									"src": "11107:441:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 734,
										"nodeType": "Block",
										"src": "12251:2:1",
										"statements": []
									},
									"documentation": {
										"id": 725,
										"nodeType": "StructuredDocumentation",
										"src": "11554:573:1",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 735,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12141:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 727,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12179:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "12171:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 726,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12171:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12201:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "12193:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 728,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12193:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12221:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "12213:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 730,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12213:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12161:72:1"
									},
									"returnParameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12251:0:1"
									},
									"scope": 752,
									"src": "12132:121:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 745,
										"nodeType": "Block",
										"src": "12959:2:1",
										"statements": []
									},
									"documentation": {
										"id": 736,
										"nodeType": "StructuredDocumentation",
										"src": "12259:577:1",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 746,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12850:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12887:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 746,
												"src": "12879:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 737,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12879:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12909:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 746,
												"src": "12901:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 739,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12901:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12929:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 746,
												"src": "12921:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 741,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12921:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12869:72:1"
									},
									"returnParameters": {
										"id": 744,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12959:0:1"
									},
									"scope": 752,
									"src": "12841:120:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 747,
										"nodeType": "StructuredDocumentation",
										"src": "12967:254:1",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 751,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "13246:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 752,
									"src": "13226:25:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$45_storage",
										"typeString": "uint256[45]"
									},
									"typeName": {
										"baseType": {
											"id": 748,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "13226:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 750,
										"length": {
											"hexValue": "3435",
											"id": 749,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "13234:2:1",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_45_by_1",
												"typeString": "int_const 45"
											},
											"value": "45"
										},
										"nodeType": "ArrayTypeName",
										"src": "13226:11:1",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$45_storage_ptr",
											"typeString": "uint256[45]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 753,
							"src": "1482:11772:1",
							"usedErrors": []
						}
					],
					"src": "105:13150:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							830
						]
					},
					"id": 831,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 754,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 755,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 830,
							"linearizedBaseContracts": [
								830
							],
							"name": "IERC20Upgradeable",
							"nameLocation": "212:17:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 756,
										"nodeType": "StructuredDocumentation",
										"src": "236:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 764,
									"name": "Transfer",
									"nameLocation": "405:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 758,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "430:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "414:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 757,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "414:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 760,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "452:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "436:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 759,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "436:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 762,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "464:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "456:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "456:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "413:57:2"
									},
									"src": "399:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 765,
										"nodeType": "StructuredDocumentation",
										"src": "477:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 773,
									"name": "Approval",
									"nameLocation": "636:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 772,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 767,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "661:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 773,
												"src": "645:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 766,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 769,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "684:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 773,
												"src": "668:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 768,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 771,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "701:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 773,
												"src": "693:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "644:63:2"
									},
									"src": "630:78:2"
								},
								{
									"documentation": {
										"id": 774,
										"nodeType": "StructuredDocumentation",
										"src": "714:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 779,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "794:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "805:2:2"
									},
									"returnParameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "831:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 776,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:9:2"
									},
									"scope": 830,
									"src": "785:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 780,
										"nodeType": "StructuredDocumentation",
										"src": "846:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 787,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "932:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 783,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "950:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "942:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 781,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:17:2"
									},
									"returnParameters": {
										"id": 786,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "982:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 784,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "981:9:2"
									},
									"scope": 830,
									"src": "923:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 788,
										"nodeType": "StructuredDocumentation",
										"src": "997:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 797,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "1222:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 789,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1242:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "1234:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 791,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:28:2"
									},
									"returnParameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "1268:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 794,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:6:2"
									},
									"scope": 830,
									"src": "1204:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 798,
										"nodeType": "StructuredDocumentation",
										"src": "1280:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 807,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1558:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 800,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1576:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "1568:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 799,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1568:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 802,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1591:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "1583:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 801,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:32:2"
									},
									"returnParameters": {
										"id": 806,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 805,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 807,
												"src": "1623:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 804,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:9:2"
									},
									"scope": 830,
									"src": "1549:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 808,
										"nodeType": "StructuredDocumentation",
										"src": "1638:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 817,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2294:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 813,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 810,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2310:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 817,
												"src": "2302:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 809,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2302:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 812,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2327:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 817,
												"src": "2319:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 811,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:33:2"
									},
									"returnParameters": {
										"id": 816,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 815,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 817,
												"src": "2353:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 814,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2353:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2352:6:2"
									},
									"scope": 830,
									"src": "2285:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 818,
										"nodeType": "StructuredDocumentation",
										"src": "2365:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 829,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2666:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 820,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2696:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "2688:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 819,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2688:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 822,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2718:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "2710:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 821,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2738:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "2730:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 823,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2730:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2678:72:2"
									},
									"returnParameters": {
										"id": 828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 829,
												"src": "2769:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 826,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2769:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2768:6:2"
									},
									"scope": 830,
									"src": "2657:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 831,
							"src": "202:2575:2",
							"usedErrors": []
						}
					],
					"src": "106:2672:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
					"exportedSymbols": {
						"IERC20MetadataUpgradeable": [
							855
						],
						"IERC20Upgradeable": [
							830
						]
					},
					"id": 856,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 832,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 833,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 856,
							"sourceUnit": 831,
							"src": "135:34:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 835,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 830,
										"src": "327:17:3"
									},
									"id": 836,
									"nodeType": "InheritanceSpecifier",
									"src": "327:17:3"
								}
							],
							"canonicalName": "IERC20MetadataUpgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 834,
								"nodeType": "StructuredDocumentation",
								"src": "171:116:3",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 855,
							"linearizedBaseContracts": [
								855,
								830
							],
							"name": "IERC20MetadataUpgradeable",
							"nameLocation": "298:25:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 837,
										"nodeType": "StructuredDocumentation",
										"src": "351:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 842,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "419:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 838,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "423:2:3"
									},
									"returnParameters": {
										"id": 841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 842,
												"src": "449:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 839,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "449:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:15:3"
									},
									"scope": 855,
									"src": "410:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 843,
										"nodeType": "StructuredDocumentation",
										"src": "470:56:3",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 848,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "540:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "546:2:3"
									},
									"returnParameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "572:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 845,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "572:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "571:15:3"
									},
									"scope": 855,
									"src": "531:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 849,
										"nodeType": "StructuredDocumentation",
										"src": "593:65:3",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 854,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "672:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "680:2:3"
									},
									"returnParameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "706:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 851,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "706:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "705:7:3"
									},
									"scope": 855,
									"src": "663:50:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 856,
							"src": "288:427:3",
							"usedErrors": []
						}
					],
					"src": "110:606:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1322
						],
						"IERC20Upgradeable": [
							830
						],
						"SafeERC20Upgradeable": [
							1079
						]
					},
					"id": 1080,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 857,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 858,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1080,
							"sourceUnit": 831,
							"src": "125:34:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../../utils/AddressUpgradeable.sol",
							"id": 859,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1080,
							"sourceUnit": 1323,
							"src": "160:47:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 860,
								"nodeType": "StructuredDocumentation",
								"src": "209:457:4",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 1079,
							"linearizedBaseContracts": [
								1079
							],
							"name": "SafeERC20Upgradeable",
							"nameLocation": "675:20:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 863,
									"libraryName": {
										"id": 861,
										"name": "AddressUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1322,
										"src": "708:18:4"
									},
									"nodeType": "UsingForDirective",
									"src": "702:37:4",
									"typeName": {
										"id": 862,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "731:7:4",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 885,
										"nodeType": "Block",
										"src": "858:103:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 874,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 866,
															"src": "888:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 877,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 866,
																			"src": "918:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 878,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 797,
																		"src": "918:14:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 879,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "918:23:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 880,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 868,
																	"src": "943:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 881,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 870,
																	"src": "947:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 875,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "895:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 876,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "895:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 882,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "895:58:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 873,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1078,
														"src": "868:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$830_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 883,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "868:86:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 884,
												"nodeType": "ExpressionStatement",
												"src": "868:86:4"
											}
										]
									},
									"id": 886,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "754:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 866,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "794:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "776:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 865,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 864,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 830,
														"src": "776:17:4"
													},
													"referencedDeclaration": 830,
													"src": "776:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "817:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "809:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 867,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "809:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 870,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "837:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "829:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 869,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "829:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "766:82:4"
									},
									"returnParameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:0:4"
									},
									"scope": 1079,
									"src": "745:216:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 911,
										"nodeType": "Block",
										"src": "1106:113:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 899,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 889,
															"src": "1136:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 902,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 889,
																			"src": "1166:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 903,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 829,
																		"src": "1166:18:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 904,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1166:27:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 905,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 891,
																	"src": "1195:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 906,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 893,
																	"src": "1201:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 907,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 895,
																	"src": "1205:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 900,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1143:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 901,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1143:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1143:68:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 898,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1078,
														"src": "1116:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$830_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 909,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1116:96:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 910,
												"nodeType": "ExpressionStatement",
												"src": "1116:96:4"
											}
										]
									},
									"id": 912,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "976:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1020:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "1002:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 888,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 887,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 830,
														"src": "1002:17:4"
													},
													"referencedDeclaration": 830,
													"src": "1002:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1043:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "1035:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 890,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1035:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1065:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "1057:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 892,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1057:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1085:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "1077:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 894,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1077:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "992:104:4"
									},
									"returnParameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1106:0:4"
									},
									"scope": 1079,
									"src": "967:252:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 955,
										"nodeType": "Block",
										"src": "1596:497:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 939,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 926,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 924,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 920,
																			"src": "1845:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 925,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1854:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1845:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 927,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1844:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 937,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 932,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1885:4:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$1079",
																								"typeString": "library SafeERC20Upgradeable"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$1079",
																								"typeString": "library SafeERC20Upgradeable"
																							}
																						],
																						"id": 931,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1877:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 930,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1877:7:4",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 933,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1877:13:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 934,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 918,
																					"src": "1892:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 928,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 916,
																					"src": "1861:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																						"typeString": "contract IERC20Upgradeable"
																					}
																				},
																				"id": 929,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 807,
																				"src": "1861:15:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 935,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1861:39:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 936,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1904:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1861:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 938,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1860:46:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1844:62:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 940,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1920:56:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 923,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1823:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1823:163:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 942,
												"nodeType": "ExpressionStatement",
												"src": "1823:163:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 944,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 916,
															"src": "2016:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 947,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 916,
																			"src": "2046:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 948,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 817,
																		"src": "2046:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 949,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2046:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 950,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 918,
																	"src": "2070:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 951,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 920,
																	"src": "2079:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 945,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2023:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 946,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2023:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 952,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2023:62:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 943,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1078,
														"src": "1996:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$830_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 953,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1996:90:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 954,
												"nodeType": "ExpressionStatement",
												"src": "1996:90:4"
											}
										]
									},
									"documentation": {
										"id": 913,
										"nodeType": "StructuredDocumentation",
										"src": "1225:249:4",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 956,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1488:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1527:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "1509:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 915,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 914,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 830,
														"src": "1509:17:4"
													},
													"referencedDeclaration": 830,
													"src": "1509:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1550:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "1542:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 917,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 920,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1575:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 956,
												"src": "1567:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 919,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1499:87:4"
									},
									"returnParameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1596:0:4"
									},
									"scope": 1079,
									"src": "1479:614:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 991,
										"nodeType": "Block",
										"src": "2226:194:4",
										"statements": [
											{
												"assignments": [
													967
												],
												"declarations": [
													{
														"constant": false,
														"id": 967,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2244:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 991,
														"src": "2236:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 966,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2236:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 978,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 977,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 972,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2283:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$1079",
																			"typeString": "library SafeERC20Upgradeable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$1079",
																			"typeString": "library SafeERC20Upgradeable"
																		}
																	],
																	"id": 971,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2275:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 970,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2275:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 973,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2275:13:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 974,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 961,
																"src": "2290:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 968,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 959,
																"src": "2259:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																	"typeString": "contract IERC20Upgradeable"
																}
															},
															"id": 969,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 807,
															"src": "2259:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 975,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2259:39:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 976,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 963,
														"src": "2301:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2259:47:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2236:70:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 980,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 959,
															"src": "2336:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 983,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 959,
																			"src": "2366:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 984,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 817,
																		"src": "2366:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 985,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2366:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 986,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 961,
																	"src": "2390:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 987,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 967,
																	"src": "2399:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 981,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2343:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 982,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2343:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 988,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2343:69:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 979,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1078,
														"src": "2316:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$830_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2316:97:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 990,
												"nodeType": "ExpressionStatement",
												"src": "2316:97:4"
											}
										]
									},
									"id": 992,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2108:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 959,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2157:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "2139:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 958,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 957,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 830,
														"src": "2139:17:4"
													},
													"referencedDeclaration": 830,
													"src": "2139:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2180:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "2172:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2172:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2205:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "2197:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 962,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2197:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2129:87:4"
									},
									"returnParameters": {
										"id": 965,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2226:0:4"
									},
									"scope": 1079,
									"src": "2099:321:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1039,
										"nodeType": "Block",
										"src": "2553:370:4",
										"statements": [
											{
												"id": 1038,
												"nodeType": "UncheckedBlock",
												"src": "2563:354:4",
												"statements": [
													{
														"assignments": [
															1003
														],
														"declarations": [
															{
																"constant": false,
																"id": 1003,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2595:12:4",
																"nodeType": "VariableDeclaration",
																"scope": 1038,
																"src": "2587:20:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1002,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2587:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1012,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1008,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2634:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$1079",
																				"typeString": "library SafeERC20Upgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$1079",
																				"typeString": "library SafeERC20Upgradeable"
																			}
																		],
																		"id": 1007,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2626:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1006,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2626:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1009,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2626:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1010,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 997,
																	"src": "2641:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1004,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 995,
																	"src": "2610:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																		"typeString": "contract IERC20Upgradeable"
																	}
																},
																"id": 1005,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 807,
																"src": "2610:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 1011,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2610:39:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2587:62:4"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1016,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1014,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1003,
																		"src": "2671:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 1015,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 999,
																		"src": "2687:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2671:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 1017,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2694:43:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 1013,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2663:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1018,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2663:75:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1019,
														"nodeType": "ExpressionStatement",
														"src": "2663:75:4"
													},
													{
														"assignments": [
															1021
														],
														"declarations": [
															{
																"constant": false,
																"id": 1021,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2760:12:4",
																"nodeType": "VariableDeclaration",
																"scope": 1038,
																"src": "2752:20:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1020,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2752:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1025,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1024,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1022,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1003,
																"src": "2775:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1023,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 999,
																"src": "2790:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2775:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2752:43:4"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1027,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 995,
																	"src": "2829:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																		"typeString": "contract IERC20Upgradeable"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 1030,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 995,
																					"src": "2859:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																						"typeString": "contract IERC20Upgradeable"
																					}
																				},
																				"id": 1031,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 817,
																				"src": "2859:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 1032,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2859:22:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 1033,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 997,
																			"src": "2883:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1034,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1021,
																			"src": "2892:12:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1028,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2836:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 1029,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2836:22:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 1035,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2836:69:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																		"typeString": "contract IERC20Upgradeable"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1026,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1078,
																"src": "2809:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$830_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20Upgradeable,bytes memory)"
																}
															},
															"id": 1036,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2809:97:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1037,
														"nodeType": "ExpressionStatement",
														"src": "2809:97:4"
													}
												]
											}
										]
									},
									"id": 1040,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2435:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1000,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 995,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2484:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "2466:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 994,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 993,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 830,
														"src": "2466:17:4"
													},
													"referencedDeclaration": 830,
													"src": "2466:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2507:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "2499:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 996,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2499:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 999,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2532:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "2524:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 998,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2524:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2456:87:4"
									},
									"returnParameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2553:0:4"
									},
									"scope": 1079,
									"src": "2426:497:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1077,
										"nodeType": "Block",
										"src": "3387:636:4",
										"statements": [
											{
												"assignments": [
													1050
												],
												"declarations": [
													{
														"constant": false,
														"id": 1050,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3749:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 1077,
														"src": "3736:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1049,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3736:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1059,
												"initialValue": {
													"arguments": [
														{
															"id": 1056,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1046,
															"src": "3790:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1057,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3796:34:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1053,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1044,
																	"src": "3770:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																		"typeString": "contract IERC20Upgradeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																		"typeString": "contract IERC20Upgradeable"
																	}
																],
																"id": 1052,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3762:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1051,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3762:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 1054,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3762:14:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1055,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1168,
														"src": "3762:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1058,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3762:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3736:95:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1063,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1060,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1050,
															"src": "3845:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1061,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3845:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1062,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3865:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3845:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1076,
												"nodeType": "IfStatement",
												"src": "3841:176:4",
												"trueBody": {
													"id": 1075,
													"nodeType": "Block",
													"src": "3868:149:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1067,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1050,
																				"src": "3940:10:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1069,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3953:4:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 1068,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3953:4:4",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 1070,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3952:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 1065,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3929:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1066,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3929:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1071,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3929:30:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 1072,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3961:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 1064,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3921:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1073,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3921:85:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1074,
															"nodeType": "ExpressionStatement",
															"src": "3921:85:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1041,
										"nodeType": "StructuredDocumentation",
										"src": "2929:372:4",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 1078,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3315:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3353:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "3335:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1043,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1042,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 830,
														"src": "3335:17:4"
													},
													"referencedDeclaration": 830,
													"src": "3335:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3373:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "3360:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1045,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3360:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3334:44:4"
									},
									"returnParameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3387:0:4"
									},
									"scope": 1079,
									"src": "3306:717:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1080,
							"src": "667:3358:4",
							"usedErrors": []
						}
					],
					"src": "100:3926:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1322
						]
					},
					"id": 1323,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1081,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AddressUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1082,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:5",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1322,
							"linearizedBaseContracts": [
								1322
							],
							"name": "AddressUpgradeable",
							"nameLocation": "202:18:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1096,
										"nodeType": "Block",
										"src": "1252:254:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1094,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1090,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1085,
																"src": "1476:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1091,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1476:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1092,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1476:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1093,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1498:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1476:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1089,
												"id": 1095,
												"nodeType": "Return",
												"src": "1469:30:5"
											}
										]
									},
									"documentation": {
										"id": 1083,
										"nodeType": "StructuredDocumentation",
										"src": "227:954:5",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 1097,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1195:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1214:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "1206:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1084,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1206:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1205:17:5"
									},
									"returnParameters": {
										"id": 1089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "1246:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1087,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1246:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1245:6:5"
									},
									"scope": 1322,
									"src": "1186:320:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1130,
										"nodeType": "Block",
										"src": "2494:241:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1112,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1108,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2520:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1322",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1322",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1107,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2512:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1106,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2512:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1109,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2512:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1110,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2512:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1111,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1102,
																"src": "2537:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2512:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 1113,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2545:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 1105,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2504:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2504:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1115,
												"nodeType": "ExpressionStatement",
												"src": "2504:73:5"
											},
											{
												"assignments": [
													1117,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1117,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2594:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1130,
														"src": "2589:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1116,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2589:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1124,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1122,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2637:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1118,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1100,
																"src": "2607:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1119,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2607:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1121,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1120,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1102,
																"src": "2629:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2607:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2607:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2588:52:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1126,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1117,
															"src": "2658:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 1127,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2667:60:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 1125,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2650:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2650:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1129,
												"nodeType": "ExpressionStatement",
												"src": "2650:78:5"
											}
										]
									},
									"documentation": {
										"id": 1098,
										"nodeType": "StructuredDocumentation",
										"src": "1512:906:5",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1131,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2432:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2458:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1131,
												"src": "2442:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1099,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2442:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2477:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1131,
												"src": "2469:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2441:43:5"
									},
									"returnParameters": {
										"id": 1104,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2494:0:5"
									},
									"scope": 1322,
									"src": "2423:312:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1147,
										"nodeType": "Block",
										"src": "3566:84:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1142,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1134,
															"src": "3596:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1143,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1136,
															"src": "3604:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1144,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3610:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 1141,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1148,
															1168
														],
														"referencedDeclaration": 1168,
														"src": "3583:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3583:60:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1140,
												"id": 1146,
												"nodeType": "Return",
												"src": "3576:67:5"
											}
										]
									},
									"documentation": {
										"id": 1132,
										"nodeType": "StructuredDocumentation",
										"src": "2741:731:5",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 1148,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3486:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3507:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "3499:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3499:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1136,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3528:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "3515:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1135,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3515:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3498:35:5"
									},
									"returnParameters": {
										"id": 1140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "3552:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1138,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3552:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3551:14:5"
									},
									"scope": 1322,
									"src": "3477:173:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1167,
										"nodeType": "Block",
										"src": "4019:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1161,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1151,
															"src": "4058:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1162,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1153,
															"src": "4066:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1163,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4072:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1164,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1155,
															"src": "4075:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1160,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1188,
															1238
														],
														"referencedDeclaration": 1238,
														"src": "4036:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1165,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4036:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1159,
												"id": 1166,
												"nodeType": "Return",
												"src": "4029:59:5"
											}
										]
									},
									"documentation": {
										"id": 1149,
										"nodeType": "StructuredDocumentation",
										"src": "3656:211:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1168,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3881:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1151,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3911:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "3903:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3903:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3940:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "3927:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1152,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3927:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1155,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3968:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "3954:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1154,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3954:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3893:93:5"
									},
									"returnParameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "4005:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1157,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4005:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4004:14:5"
									},
									"scope": 1322,
									"src": "3872:223:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1187,
										"nodeType": "Block",
										"src": "4600:111:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1181,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "4639:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1182,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1173,
															"src": "4647:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1183,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1175,
															"src": "4653:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 1184,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4660:43:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 1180,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1188,
															1238
														],
														"referencedDeclaration": 1238,
														"src": "4617:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4617:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1179,
												"id": 1186,
												"nodeType": "Return",
												"src": "4610:94:5"
											}
										]
									},
									"documentation": {
										"id": 1169,
										"nodeType": "StructuredDocumentation",
										"src": "4101:351:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 1188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4466:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4505:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "4497:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4497:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4534:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "4521:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1172,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4521:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4556:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "4548:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4548:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4487:80:5"
									},
									"returnParameters": {
										"id": 1179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1178,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "4586:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1177,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4586:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4585:14:5"
									},
									"scope": 1322,
									"src": "4457:254:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1237,
										"nodeType": "Block",
										"src": "5138:320:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1209,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1205,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5164:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1322",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1322",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1204,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5156:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1203,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5156:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5156:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1207,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5156:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1208,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1195,
																"src": "5181:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5156:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1210,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5188:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1202,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5148:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5148:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1212,
												"nodeType": "ExpressionStatement",
												"src": "5148:81:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1215,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1191,
																	"src": "5258:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1214,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1097,
																"src": "5247:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1216,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5247:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 1217,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5267:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 1213,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5239:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5239:60:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1219,
												"nodeType": "ExpressionStatement",
												"src": "5239:60:5"
											},
											{
												"assignments": [
													1221,
													1223
												],
												"declarations": [
													{
														"constant": false,
														"id": 1221,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5316:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1237,
														"src": "5311:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1220,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5311:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1223,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5338:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1237,
														"src": "5325:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1222,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5325:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1230,
												"initialValue": {
													"arguments": [
														{
															"id": 1228,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "5378:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1224,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1191,
																"src": "5352:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5352:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1227,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1226,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1195,
																"src": "5371:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5352:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5352:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5310:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1232,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1221,
															"src": "5417:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1233,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1223,
															"src": "5426:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1234,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1197,
															"src": "5438:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1231,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1321,
														"src": "5400:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 1235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5400:51:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1201,
												"id": 1236,
												"nodeType": "Return",
												"src": "5393:58:5"
											}
										]
									},
									"documentation": {
										"id": 1189,
										"nodeType": "StructuredDocumentation",
										"src": "4717:237:5",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4968:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1191,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5007:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "4999:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1190,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4999:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5036:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "5023:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1192,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5023:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5058:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "5050:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5050:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1197,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5087:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "5073:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1196,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5073:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4989:116:5"
									},
									"returnParameters": {
										"id": 1201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "5124:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1199,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5124:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5123:14:5"
									},
									"scope": 1322,
									"src": "4959:499:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1254,
										"nodeType": "Block",
										"src": "5735:97:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1249,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1241,
															"src": "5771:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1250,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1243,
															"src": "5779:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1251,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5785:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1248,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1255,
															1290
														],
														"referencedDeclaration": 1290,
														"src": "5752:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5752:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1247,
												"id": 1253,
												"nodeType": "Return",
												"src": "5745:80:5"
											}
										]
									},
									"documentation": {
										"id": 1239,
										"nodeType": "StructuredDocumentation",
										"src": "5464:166:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1255,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5644:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5671:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "5663:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5692:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "5679:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1242,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5679:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5662:35:5"
									},
									"returnParameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "5721:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1245,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5721:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5720:14:5"
									},
									"scope": 1322,
									"src": "5635:197:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1289,
										"nodeType": "Block",
										"src": "6174:228:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1269,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1258,
																	"src": "6203:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1268,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1097,
																"src": "6192:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1270,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6192:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 1271,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6212:38:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 1267,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6184:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6184:67:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1273,
												"nodeType": "ExpressionStatement",
												"src": "6184:67:5"
											},
											{
												"assignments": [
													1275,
													1277
												],
												"declarations": [
													{
														"constant": false,
														"id": 1275,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6268:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1289,
														"src": "6263:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1274,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6263:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1277,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6290:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1289,
														"src": "6277:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1276,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6277:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1282,
												"initialValue": {
													"arguments": [
														{
															"id": 1280,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1260,
															"src": "6322:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1278,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1258,
															"src": "6304:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1279,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6304:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6304:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6262:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1284,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1275,
															"src": "6361:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1285,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1277,
															"src": "6370:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1286,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1262,
															"src": "6382:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1283,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1321,
														"src": "6344:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 1287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6344:51:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1266,
												"id": 1288,
												"nodeType": "Return",
												"src": "6337:58:5"
											}
										]
									},
									"documentation": {
										"id": 1256,
										"nodeType": "StructuredDocumentation",
										"src": "5838:173:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1290,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6025:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1258,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6061:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "6053:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6053:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6090:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "6077:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1259,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6077:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1262,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6118:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "6104:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1261,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6104:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6043:93:5"
									},
									"returnParameters": {
										"id": 1266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1265,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "6160:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1264,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6160:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6159:14:5"
									},
									"scope": 1322,
									"src": "6016:386:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1320,
										"nodeType": "Block",
										"src": "6782:532:5",
										"statements": [
											{
												"condition": {
													"id": 1302,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1293,
													"src": "6796:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1318,
													"nodeType": "Block",
													"src": "6853:455:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1309,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1306,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1295,
																		"src": "6937:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1307,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "6937:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1308,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6957:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6937:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1316,
																"nodeType": "Block",
																"src": "7245:53:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1313,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1297,
																					"src": "7270:12:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 1312,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "7263:6:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 1314,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7263:20:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1315,
																		"nodeType": "ExpressionStatement",
																		"src": "7263:20:5"
																	}
																]
															},
															"id": 1317,
															"nodeType": "IfStatement",
															"src": "6933:365:5",
															"trueBody": {
																"id": 1311,
																"nodeType": "Block",
																"src": "6960:279:5",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "7080:145:5",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "7102:40:5",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "7131:10:5"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "7125:5:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7125:17:5"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "7106:15:5",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7174:2:5",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "7178:10:5"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "7170:3:5"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7170:19:5"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "7191:15:5"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "7163:6:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7163:44:5"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7163:44:5"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 1295,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7131:10:5",
																				"valueSize": 1
																			},
																			{
																				"declaration": 1295,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7178:10:5",
																				"valueSize": 1
																			}
																		],
																		"id": 1310,
																		"nodeType": "InlineAssembly",
																		"src": "7071:154:5"
																	}
																]
															}
														}
													]
												},
												"id": 1319,
												"nodeType": "IfStatement",
												"src": "6792:516:5",
												"trueBody": {
													"id": 1305,
													"nodeType": "Block",
													"src": "6805:42:5",
													"statements": [
														{
															"expression": {
																"id": 1303,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1295,
																"src": "6826:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1301,
															"id": 1304,
															"nodeType": "Return",
															"src": "6819:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1291,
										"nodeType": "StructuredDocumentation",
										"src": "6408:209:5",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 1321,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "6631:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "6662:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "6657:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1292,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6657:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1295,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "6692:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "6679:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1294,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6679:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1297,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6726:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "6712:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1296,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6712:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6647:97:5"
									},
									"returnParameters": {
										"id": 1301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1300,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "6768:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1299,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6768:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6767:14:5"
									},
									"scope": 1322,
									"src": "6622:692:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1323,
							"src": "194:7122:5",
							"usedErrors": []
						}
					],
					"src": "101:7216:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1322
						],
						"ContextUpgradeable": [
							1364
						],
						"Initializable": [
							141
						]
					},
					"id": 1365,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1324,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1325,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1365,
							"sourceUnit": 142,
							"src": "110:42:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1327,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 141,
										"src": "691:13:6"
									},
									"id": 1328,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:6"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1326,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1364,
							"linearizedBaseContracts": [
								1364,
								141
							],
							"name": "ContextUpgradeable",
							"nameLocation": "669:18:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1333,
										"nodeType": "Block",
										"src": "763:7:6",
										"statements": []
									},
									"id": 1334,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1331,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1330,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 84,
												"src": "746:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:16:6"
										}
									],
									"name": "__Context_init",
									"nameLocation": "720:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1329,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:6"
									},
									"returnParameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "763:0:6"
									},
									"scope": 1364,
									"src": "711:59:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1339,
										"nodeType": "Block",
										"src": "838:7:6",
										"statements": []
									},
									"id": 1340,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1337,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1336,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 84,
												"src": "821:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "821:16:6"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "785:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1335,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "809:2:6"
									},
									"returnParameters": {
										"id": 1338,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "838:0:6"
									},
									"scope": 1364,
									"src": "776:69:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1348,
										"nodeType": "Block",
										"src": "912:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1345,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "929:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "929:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1344,
												"id": 1347,
												"nodeType": "Return",
												"src": "922:17:6"
											}
										]
									},
									"id": 1349,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "859:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1341,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:6"
									},
									"returnParameters": {
										"id": 1344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1343,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "903:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1342,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:9:6"
									},
									"scope": 1364,
									"src": "850:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1357,
										"nodeType": "Block",
										"src": "1019:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1354,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1036:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1036:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1353,
												"id": 1356,
												"nodeType": "Return",
												"src": "1029:15:6"
											}
										]
									},
									"id": 1358,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "961:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1350,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "969:2:6"
									},
									"returnParameters": {
										"id": 1353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1352,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1358,
												"src": "1003:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1351,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1003:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:16:6"
									},
									"scope": 1364,
									"src": "952:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1359,
										"nodeType": "StructuredDocumentation",
										"src": "1057:254:6",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1363,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1336:5:6",
									"nodeType": "VariableDeclaration",
									"scope": 1364,
									"src": "1316:25:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1360,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1316:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1362,
										"length": {
											"hexValue": "3530",
											"id": 1361,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1324:2:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1316:11:6",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1365,
							"src": "651:693:6",
							"usedErrors": []
						}
					],
					"src": "86:1259:6"
				},
				"id": 6
			},
			"SuperDepositor.sol": {
				"ast": {
					"absolutePath": "SuperDepositor.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1322
						],
						"ContextUpgradeable": [
							1364
						],
						"ERC20Upgradeable": [
							752
						],
						"IAsset": [
							1660
						],
						"IAuthorizer": [
							1675
						],
						"IBeetVault": [
							2137
						],
						"IERC20MetadataUpgradeable": [
							855
						],
						"IERC20Upgradeable": [
							830
						],
						"ISignaturesValidator": [
							2155
						],
						"ITemporarilyPausable": [
							2173
						],
						"IVault": [
							2184
						],
						"Initializable": [
							141
						],
						"SafeERC20Upgradeable": [
							1079
						],
						"SuperDepositor": [
							1656
						]
					},
					"id": 1657,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1366,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "43:23:7"
						},
						{
							"absolutePath": "interfaces/IBeetVault.sol",
							"file": "./interfaces/IBeetVault.sol",
							"id": 1367,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1657,
							"sourceUnit": 2138,
							"src": "70:37:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IVault.sol",
							"file": "./interfaces/IVault.sol",
							"id": 1368,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1657,
							"sourceUnit": 2185,
							"src": "109:33:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
							"id": 1369,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1657,
							"sourceUnit": 1080,
							"src": "144:88:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SuperDepositor",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1370,
								"nodeType": "StructuredDocumentation",
								"src": "236:53:7",
								"text": "@title Greeter\n @author andreas@nascent.xyz"
							},
							"fullyImplemented": true,
							"id": 1656,
							"linearizedBaseContracts": [
								1656
							],
							"name": "SuperDepositor",
							"nameLocation": "298:14:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1374,
									"libraryName": {
										"id": 1371,
										"name": "SafeERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1079,
										"src": "328:20:7"
									},
									"nodeType": "UsingForDirective",
									"src": "322:49:7",
									"typeName": {
										"id": 1373,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1372,
											"name": "IERC20Upgradeable",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 830,
											"src": "353:17:7"
										},
										"referencedDeclaration": 830,
										"src": "353:17:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
											"typeString": "contract IERC20Upgradeable"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "77aba213",
									"id": 1376,
									"mutability": "immutable",
									"name": "balVault",
									"nameLocation": "404:8:7",
									"nodeType": "VariableDeclaration",
									"scope": 1656,
									"src": "379:33:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1375,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "379:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "SuperDepositor.DepositParams",
									"id": 1391,
									"members": [
										{
											"constant": false,
											"id": 1380,
											"mutability": "mutable",
											"name": "underlyings",
											"nameLocation": "699:11:7",
											"nodeType": "VariableDeclaration",
											"scope": 1391,
											"src": "690:20:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_storage_ptr",
												"typeString": "contract IAsset[]"
											},
											"typeName": {
												"baseType": {
													"id": 1378,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1377,
														"name": "IAsset",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1660,
														"src": "690:6:7"
													},
													"referencedDeclaration": 1660,
													"src": "690:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAsset_$1660",
														"typeString": "contract IAsset"
													}
												},
												"id": 1379,
												"nodeType": "ArrayTypeName",
												"src": "690:8:7",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_storage_ptr",
													"typeString": "contract IAsset[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1382,
											"mutability": "mutable",
											"name": "depositTokenIndex",
											"nameLocation": "729:17:7",
											"nodeType": "VariableDeclaration",
											"scope": 1391,
											"src": "721:25:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1381,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "721:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1384,
											"mutability": "mutable",
											"name": "beetsPoolId",
											"nameLocation": "765:11:7",
											"nodeType": "VariableDeclaration",
											"scope": 1391,
											"src": "757:19:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1383,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "757:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1386,
											"mutability": "mutable",
											"name": "lpToken",
											"nameLocation": "795:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 1391,
											"src": "787:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1385,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "787:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1388,
											"mutability": "mutable",
											"name": "vault",
											"nameLocation": "855:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 1391,
											"src": "847:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1387,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "847:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1390,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "879:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 1391,
											"src": "871:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1389,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "871:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DepositParams",
									"nameLocation": "665:13:7",
									"nodeType": "StructDefinition",
									"scope": 1656,
									"src": "658:238:7",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1400,
										"nodeType": "Block",
										"src": "935:39:7",
										"statements": [
											{
												"expression": {
													"id": 1398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1396,
														"name": "balVault",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1376,
														"src": "946:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1397,
														"name": "_balVault",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1393,
														"src": "957:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "946:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1399,
												"nodeType": "ExpressionStatement",
												"src": "946:20:7"
											}
										]
									},
									"id": 1401,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1393,
												"mutability": "mutable",
												"name": "_balVault",
												"nameLocation": "924:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "916:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1392,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "916:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "915:19:7"
									},
									"returnParameters": {
										"id": 1395,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "935:0:7"
									},
									"scope": 1656,
									"src": "904:70:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1409,
										"nodeType": "Block",
										"src": "1057:18:7",
										"statements": []
									},
									"functionSelector": "11ffbf3c",
									"id": 1410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "routeDeposit",
									"nameLocation": "991:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1404,
												"mutability": "mutable",
												"name": "details",
												"nameLocation": "1025:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "1004:28:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DepositParams_$1391_memory_ptr",
													"typeString": "struct SuperDepositor.DepositParams"
												},
												"typeName": {
													"id": 1403,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1402,
														"name": "DepositParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1391,
														"src": "1004:13:7"
													},
													"referencedDeclaration": 1391,
													"src": "1004:13:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DepositParams_$1391_storage_ptr",
														"typeString": "struct SuperDepositor.DepositParams"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1406,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1042:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1410,
												"src": "1034:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1034:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1003:46:7"
									},
									"returnParameters": {
										"id": 1408,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1057:0:7"
									},
									"scope": 1656,
									"src": "982:93:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1463,
										"nodeType": "Block",
										"src": "1163:399:7",
										"statements": [
											{
												"assignments": [
													1420
												],
												"declarations": [
													{
														"constant": false,
														"id": 1420,
														"mutability": "mutable",
														"name": "inputToken",
														"nameLocation": "1192:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1463,
														"src": "1174:28:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
															"typeString": "contract IERC20Upgradeable"
														},
														"typeName": {
															"id": 1419,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1418,
																"name": "IERC20Upgradeable",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 830,
																"src": "1174:17:7"
															},
															"referencedDeclaration": 830,
															"src": "1174:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1431,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"baseExpression": {
																		"expression": {
																			"id": 1424,
																			"name": "details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1413,
																			"src": "1231:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_DepositParams_$1391_memory_ptr",
																				"typeString": "struct SuperDepositor.DepositParams memory"
																			}
																		},
																		"id": 1425,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "underlyings",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1380,
																		"src": "1231:19:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
																			"typeString": "contract IAsset[] memory"
																		}
																	},
																	"id": 1428,
																	"indexExpression": {
																		"expression": {
																			"id": 1426,
																			"name": "details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1413,
																			"src": "1251:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_DepositParams_$1391_memory_ptr",
																				"typeString": "struct SuperDepositor.DepositParams memory"
																			}
																		},
																		"id": 1427,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "depositTokenIndex",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1382,
																		"src": "1251:25:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1231:46:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IAsset_$1660",
																		"typeString": "contract IAsset"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IAsset_$1660",
																		"typeString": "contract IAsset"
																	}
																],
																"id": 1423,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1223:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1422,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1223:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1429,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1223:55:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1421,
														"name": "IERC20Upgradeable",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 830,
														"src": "1205:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$830_$",
															"typeString": "type(contract IERC20Upgradeable)"
														}
													},
													"id": 1430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1205:74:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1174:105:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1435,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1318:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1436,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1318:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1439,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1338:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SuperDepositor_$1656",
																		"typeString": "contract SuperDepositor"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SuperDepositor_$1656",
																		"typeString": "contract SuperDepositor"
																	}
																],
																"id": 1438,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1330:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1437,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1330:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1440,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1330:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1441,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1415,
															"src": "1345:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1432,
															"name": "inputToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1420,
															"src": "1290:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 1434,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 912,
														"src": "1290:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$830_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$830_$",
															"typeString": "function (contract IERC20Upgradeable,address,address,uint256)"
														}
													},
													"id": 1442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1290:62:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1443,
												"nodeType": "ExpressionStatement",
												"src": "1290:62:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1445,
																"name": "details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1413,
																"src": "1373:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_DepositParams_$1391_memory_ptr",
																	"typeString": "struct SuperDepositor.DepositParams memory"
																}
															},
															"id": 1446,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "underlyings",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1380,
															"src": "1373:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
																"typeString": "contract IAsset[] memory"
															}
														},
														{
															"id": 1447,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1415,
															"src": "1394:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1448,
																"name": "details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1413,
																"src": "1402:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_DepositParams_$1391_memory_ptr",
																	"typeString": "struct SuperDepositor.DepositParams memory"
																}
															},
															"id": 1449,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "depositTokenIndex",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1382,
															"src": "1402:25:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1450,
																"name": "details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1413,
																"src": "1429:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_DepositParams_$1391_memory_ptr",
																	"typeString": "struct SuperDepositor.DepositParams memory"
																}
															},
															"id": 1451,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "beetsPoolId",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1384,
															"src": "1429:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
																"typeString": "contract IAsset[] memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1444,
														"name": "_joinPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1655,
														"src": "1363:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes32_$returns$__$",
															"typeString": "function (contract IAsset[] memory,uint256,uint256,bytes32)"
														}
													},
													"id": 1452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1363:86:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1453,
												"nodeType": "ExpressionStatement",
												"src": "1363:86:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1455,
																"name": "details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1413,
																"src": "1504:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_DepositParams_$1391_memory_ptr",
																	"typeString": "struct SuperDepositor.DepositParams memory"
																}
															},
															"id": 1456,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "lpToken",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1386,
															"src": "1504:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1457,
																"name": "details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1413,
																"src": "1521:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_DepositParams_$1391_memory_ptr",
																	"typeString": "struct SuperDepositor.DepositParams memory"
																}
															},
															"id": 1458,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "vault",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1388,
															"src": "1521:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1459,
																"name": "details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1413,
																"src": "1536:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_DepositParams_$1391_memory_ptr",
																	"typeString": "struct SuperDepositor.DepositParams memory"
																}
															},
															"id": 1460,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "recipient",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1390,
															"src": "1536:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1454,
														"name": "_depositLPToVault",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1505,
														"src": "1486:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address,address)"
														}
													},
													"id": 1461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1486:68:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1462,
												"nodeType": "ExpressionStatement",
												"src": "1486:68:7"
											}
										]
									},
									"functionSelector": "81144563",
									"id": 1464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "singleSideDeposit",
									"nameLocation": "1092:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "details",
												"nameLocation": "1131:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1464,
												"src": "1110:28:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DepositParams_$1391_memory_ptr",
													"typeString": "struct SuperDepositor.DepositParams"
												},
												"typeName": {
													"id": 1412,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1411,
														"name": "DepositParams",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1391,
														"src": "1110:13:7"
													},
													"referencedDeclaration": 1391,
													"src": "1110:13:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DepositParams_$1391_storage_ptr",
														"typeString": "struct SuperDepositor.DepositParams"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1415,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1148:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1464,
												"src": "1140:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1140:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1109:46:7"
									},
									"returnParameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1163:0:7"
									},
									"scope": 1656,
									"src": "1083:479:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1504,
										"nodeType": "Block",
										"src": "1652:325:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1474,
															"name": "vault",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1468,
															"src": "1705:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1475,
															"name": "lp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1466,
															"src": "1712:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1473,
														"name": "_approveIfNeeded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1546,
														"src": "1688:16:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 1476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1688:27:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1477,
												"nodeType": "ExpressionStatement",
												"src": "1688:27:7"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"id": 1479,
																	"name": "vault",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1468,
																	"src": "1783:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1478,
																"name": "IVault",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2184,
																"src": "1776:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IVault_$2184_$",
																	"typeString": "type(contract IVault)"
																}
															},
															"id": 1480,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1776:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IVault_$2184",
																"typeString": "contract IVault"
															}
														},
														"id": 1481,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "depositAll",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2183,
														"src": "1776:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
															"typeString": "function () external"
														}
													},
													"id": 1482,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1776:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1483,
												"nodeType": "ExpressionStatement",
												"src": "1776:26:7"
											},
											{
												"assignments": [
													1486
												],
												"declarations": [
													{
														"constant": false,
														"id": 1486,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "1862:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1504,
														"src": "1844:24:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
															"typeString": "contract IERC20Upgradeable"
														},
														"typeName": {
															"id": 1485,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1484,
																"name": "IERC20Upgradeable",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 830,
																"src": "1844:17:7"
															},
															"referencedDeclaration": 830,
															"src": "1844:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1490,
												"initialValue": {
													"arguments": [
														{
															"id": 1488,
															"name": "vault",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1468,
															"src": "1889:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1487,
														"name": "IERC20Upgradeable",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 830,
														"src": "1871:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$830_$",
															"typeString": "type(contract IERC20Upgradeable)"
														}
													},
													"id": 1489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1871:24:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1844:51:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1494,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1470,
															"src": "1926:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1499,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "1962:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SuperDepositor_$1656",
																				"typeString": "contract SuperDepositor"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SuperDepositor_$1656",
																				"typeString": "contract SuperDepositor"
																			}
																		],
																		"id": 1498,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1954:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1497,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1954:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1500,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1954:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1495,
																	"name": "shares",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1486,
																	"src": "1937:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																		"typeString": "contract IERC20Upgradeable"
																	}
																},
																"id": 1496,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balanceOf",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 787,
																"src": "1937:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view external returns (uint256)"
																}
															},
															"id": 1501,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1937:31:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1491,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1486,
															"src": "1906:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 1493,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 886,
														"src": "1906:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$830_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$830_$",
															"typeString": "function (contract IERC20Upgradeable,address,uint256)"
														}
													},
													"id": 1502,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1906:63:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1503,
												"nodeType": "ExpressionStatement",
												"src": "1906:63:7"
											}
										]
									},
									"id": 1505,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_depositLPToVault",
									"nameLocation": "1579:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "lp",
												"nameLocation": "1605:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1505,
												"src": "1597:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1465,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1597:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "vault",
												"nameLocation": "1617:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1505,
												"src": "1609:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1467,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1609:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1470,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1632:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1505,
												"src": "1624:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1469,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1596:46:7"
									},
									"returnParameters": {
										"id": 1472,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:0:7"
									},
									"scope": 1656,
									"src": "1570:407:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1545,
										"nodeType": "Block",
										"src": "2052:220:7",
										"statements": [
											{
												"assignments": [
													1514
												],
												"declarations": [
													{
														"constant": false,
														"id": 1514,
														"mutability": "mutable",
														"name": "token",
														"nameLocation": "2081:5:7",
														"nodeType": "VariableDeclaration",
														"scope": 1545,
														"src": "2063:23:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
															"typeString": "contract IERC20Upgradeable"
														},
														"typeName": {
															"id": 1513,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1512,
																"name": "IERC20Upgradeable",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 830,
																"src": "2063:17:7"
															},
															"referencedDeclaration": 830,
															"src": "2063:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1518,
												"initialValue": {
													"arguments": [
														{
															"id": 1516,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1509,
															"src": "2107:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1515,
														"name": "IERC20Upgradeable",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 830,
														"src": "2089:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$830_$",
															"typeString": "type(contract IERC20Upgradeable)"
														}
													},
													"id": 1517,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2089:24:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2063:50:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1531,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1523,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2152:4:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SuperDepositor_$1656",
																			"typeString": "contract SuperDepositor"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SuperDepositor_$1656",
																			"typeString": "contract SuperDepositor"
																		}
																	],
																	"id": 1522,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2144:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1521,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2144:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1524,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2144:13:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1525,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1507,
																"src": "2159:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 1519,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1514,
																"src": "2128:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																	"typeString": "contract IERC20Upgradeable"
																}
															},
															"id": 1520,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 807,
															"src": "2128:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 1526,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2128:39:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1529,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2179:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1528,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2171:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1527,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2171:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 1530,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2171:10:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2128:53:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1544,
												"nodeType": "IfStatement",
												"src": "2124:141:7",
												"trueBody": {
													"id": 1543,
													"nodeType": "Block",
													"src": "2183:82:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1535,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1507,
																		"src": "2226:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1538,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "2240:7:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 1537,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "2240:7:7",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					}
																				],
																				"id": 1536,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "2235:4:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1539,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2235:13:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint256",
																				"typeString": "type(uint256)"
																			}
																		},
																		"id": 1540,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "2235:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1532,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1514,
																		"src": "2198:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																			"typeString": "contract IERC20Upgradeable"
																		}
																	},
																	"id": 1534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeIncreaseAllowance",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 992,
																	"src": "2198:27:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$830_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$830_$",
																		"typeString": "function (contract IERC20Upgradeable,address,uint256)"
																	}
																},
																"id": 1541,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2198:55:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1542,
															"nodeType": "ExpressionStatement",
															"src": "2198:55:7"
														}
													]
												}
											}
										]
									},
									"id": 1546,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approveIfNeeded",
									"nameLocation": "1994:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1507,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2019:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1546,
												"src": "2011:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1506,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2011:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1509,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2036:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1546,
												"src": "2028:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1508,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2028:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2010:32:7"
									},
									"returnParameters": {
										"id": 1511,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2052:0:7"
									},
									"scope": 1656,
									"src": "1985:287:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1654,
										"nodeType": "Block",
										"src": "2485:805:7",
										"statements": [
											{
												"assignments": [
													1561
												],
												"declarations": [
													{
														"constant": false,
														"id": 1561,
														"mutability": "mutable",
														"name": "joinKind",
														"nameLocation": "2502:8:7",
														"nodeType": "VariableDeclaration",
														"scope": 1654,
														"src": "2496:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 1560,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "2496:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1563,
												"initialValue": {
													"hexValue": "31",
													"id": 1562,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2513:1:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2496:18:7"
											},
											{
												"assignments": [
													1568
												],
												"declarations": [
													{
														"constant": false,
														"id": 1568,
														"mutability": "mutable",
														"name": "amountsIn",
														"nameLocation": "2624:9:7",
														"nodeType": "VariableDeclaration",
														"scope": 1654,
														"src": "2607:26:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 1566,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2607:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1567,
															"nodeType": "ArrayTypeName",
															"src": "2607:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1575,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1572,
																"name": "underlyings",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1551,
																"src": "2650:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
																	"typeString": "contract IAsset[] memory"
																}
															},
															"id": 1573,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "2650:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1571,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2636:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (uint256[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1569,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2640:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1570,
															"nodeType": "ArrayTypeName",
															"src": "2640:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														}
													},
													"id": 1574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2636:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2607:62:7"
											},
											{
												"expression": {
													"id": 1580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1576,
															"name": "amountsIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1568,
															"src": "2680:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														},
														"id": 1578,
														"indexExpression": {
															"id": 1577,
															"name": "tokenIndex",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1555,
															"src": "2690:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2680:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1579,
														"name": "amtIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1553,
														"src": "2704:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2680:29:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1581,
												"nodeType": "ExpressionStatement",
												"src": "2680:29:7"
											},
											{
												"assignments": [
													1583
												],
												"declarations": [
													{
														"constant": false,
														"id": 1583,
														"mutability": "mutable",
														"name": "minAmountOut",
														"nameLocation": "2730:12:7",
														"nodeType": "VariableDeclaration",
														"scope": 1654,
														"src": "2722:20:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1582,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2722:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1585,
												"initialValue": {
													"hexValue": "31",
													"id": 1584,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2745:1:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2722:24:7"
											},
											{
												"assignments": [
													1587
												],
												"declarations": [
													{
														"constant": false,
														"id": 1587,
														"mutability": "mutable",
														"name": "userData",
														"nameLocation": "2811:8:7",
														"nodeType": "VariableDeclaration",
														"scope": 1654,
														"src": "2798:21:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1586,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2798:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1594,
												"initialValue": {
													"arguments": [
														{
															"id": 1590,
															"name": "joinKind",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1561,
															"src": "2833:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1591,
															"name": "amountsIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1568,
															"src": "2843:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														},
														{
															"id": 1592,
															"name": "minAmountOut",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1583,
															"src": "2854:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1588,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "2822:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1589,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "encode",
														"nodeType": "MemberAccess",
														"src": "2822:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1593,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2822:45:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2798:69:7"
											},
											{
												"assignments": [
													1599
												],
												"declarations": [
													{
														"constant": false,
														"id": 1599,
														"mutability": "mutable",
														"name": "request",
														"nameLocation": "2914:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1654,
														"src": "2880:41:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_JoinPoolRequest_$1931_memory_ptr",
															"typeString": "struct IBeetVault.JoinPoolRequest"
														},
														"typeName": {
															"id": 1598,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1597,
																"name": "IBeetVault.JoinPoolRequest",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1931,
																"src": "2880:26:7"
															},
															"referencedDeclaration": 1931,
															"src": "2880:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_JoinPoolRequest_$1931_storage_ptr",
																"typeString": "struct IBeetVault.JoinPoolRequest"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1600,
												"nodeType": "VariableDeclarationStatement",
												"src": "2880:41:7"
											},
											{
												"expression": {
													"id": 1605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1601,
															"name": "request",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1599,
															"src": "2932:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_JoinPoolRequest_$1931_memory_ptr",
																"typeString": "struct IBeetVault.JoinPoolRequest memory"
															}
														},
														"id": 1603,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "assets",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1923,
														"src": "2932:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
															"typeString": "contract IAsset[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1604,
														"name": "underlyings",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1551,
														"src": "2949:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
															"typeString": "contract IAsset[] memory"
														}
													},
													"src": "2932:28:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
														"typeString": "contract IAsset[] memory"
													}
												},
												"id": 1606,
												"nodeType": "ExpressionStatement",
												"src": "2932:28:7"
											},
											{
												"expression": {
													"id": 1611,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1607,
															"name": "request",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1599,
															"src": "2971:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_JoinPoolRequest_$1931_memory_ptr",
																"typeString": "struct IBeetVault.JoinPoolRequest memory"
															}
														},
														"id": 1609,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "maxAmountsIn",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1926,
														"src": "2971:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1610,
														"name": "amountsIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1568,
														"src": "2994:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[] memory"
														}
													},
													"src": "2971:32:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"id": 1612,
												"nodeType": "ExpressionStatement",
												"src": "2971:32:7"
											},
											{
												"expression": {
													"id": 1617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1613,
															"name": "request",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1599,
															"src": "3014:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_JoinPoolRequest_$1931_memory_ptr",
																"typeString": "struct IBeetVault.JoinPoolRequest memory"
															}
														},
														"id": 1615,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "userData",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1928,
														"src": "3014:16:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1616,
														"name": "userData",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1587,
														"src": "3033:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes memory"
														}
													},
													"src": "3014:27:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"id": 1618,
												"nodeType": "ExpressionStatement",
												"src": "3014:27:7"
											},
											{
												"expression": {
													"id": 1623,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1619,
															"name": "request",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1599,
															"src": "3052:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_JoinPoolRequest_$1931_memory_ptr",
																"typeString": "struct IBeetVault.JoinPoolRequest memory"
															}
														},
														"id": 1621,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "fromInternalBalance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1930,
														"src": "3052:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1622,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3082:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "3052:35:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1624,
												"nodeType": "ExpressionStatement",
												"src": "3052:35:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1634,
															"name": "balVault",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1376,
															"src": "3174:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1635,
															"name": "amtIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1553,
															"src": "3184:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"baseExpression": {
																				"id": 1628,
																				"name": "underlyings",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1551,
																				"src": "3126:11:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
																					"typeString": "contract IAsset[] memory"
																				}
																			},
																			"id": 1630,
																			"indexExpression": {
																				"id": 1629,
																				"name": "tokenIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1555,
																				"src": "3138:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3126:23:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IAsset_$1660",
																				"typeString": "contract IAsset"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IAsset_$1660",
																				"typeString": "contract IAsset"
																			}
																		],
																		"id": 1627,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3118:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1626,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3118:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1631,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3118:32:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1625,
																"name": "IERC20Upgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "3100:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$830_$",
																	"typeString": "type(contract IERC20Upgradeable)"
																}
															},
															"id": 1632,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3100:51:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 1633,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeIncreaseAllowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 992,
														"src": "3100:73:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$830_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$830_$",
															"typeString": "function (contract IERC20Upgradeable,address,uint256)"
														}
													},
													"id": 1636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3100:90:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1637,
												"nodeType": "ExpressionStatement",
												"src": "3100:90:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1642,
															"name": "beetsPoolId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1557,
															"src": "3231:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"id": 1645,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3252:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SuperDepositor_$1656",
																		"typeString": "contract SuperDepositor"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SuperDepositor_$1656",
																		"typeString": "contract SuperDepositor"
																	}
																],
																"id": 1644,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3244:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1643,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3244:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1646,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3244:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1649,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3267:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SuperDepositor_$1656",
																		"typeString": "contract SuperDepositor"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SuperDepositor_$1656",
																		"typeString": "contract SuperDepositor"
																	}
																],
																"id": 1648,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3259:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1647,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3259:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1650,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3259:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1651,
															"name": "request",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1599,
															"src": "3274:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_JoinPoolRequest_$1931_memory_ptr",
																"typeString": "struct IBeetVault.JoinPoolRequest memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_struct$_JoinPoolRequest_$1931_memory_ptr",
																"typeString": "struct IBeetVault.JoinPoolRequest memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1639,
																	"name": "balVault",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1376,
																	"src": "3212:8:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1638,
																"name": "IBeetVault",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2137,
																"src": "3201:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IBeetVault_$2137_$",
																	"typeString": "type(contract IBeetVault)"
																}
															},
															"id": 1640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3201:20:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IBeetVault_$2137",
																"typeString": "contract IBeetVault"
															}
														},
														"id": 1641,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "joinPool",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1919,
														"src": "3201:29:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_bytes32_$_t_address_$_t_address_$_t_struct$_JoinPoolRequest_$1931_memory_ptr_$returns$__$",
															"typeString": "function (bytes32,address,address,struct IBeetVault.JoinPoolRequest memory) payable external"
														}
													},
													"id": 1652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3201:81:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1653,
												"nodeType": "ExpressionStatement",
												"src": "3201:81:7"
											}
										]
									},
									"documentation": {
										"id": 1547,
										"nodeType": "StructuredDocumentation",
										"src": "2280:86:7",
										"text": " @dev Joins {beetsPoolId} using {underlyings[tokenIndex]} balance;"
									},
									"id": 1655,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_joinPool",
									"nameLocation": "2381:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1551,
												"mutability": "mutable",
												"name": "underlyings",
												"nameLocation": "2407:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "2391:27:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
													"typeString": "contract IAsset[]"
												},
												"typeName": {
													"baseType": {
														"id": 1549,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1548,
															"name": "IAsset",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1660,
															"src": "2391:6:7"
														},
														"referencedDeclaration": 1660,
														"src": "2391:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IAsset_$1660",
															"typeString": "contract IAsset"
														}
													},
													"id": 1550,
													"nodeType": "ArrayTypeName",
													"src": "2391:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_storage_ptr",
														"typeString": "contract IAsset[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1553,
												"mutability": "mutable",
												"name": "amtIn",
												"nameLocation": "2428:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "2420:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1552,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2420:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1555,
												"mutability": "mutable",
												"name": "tokenIndex",
												"nameLocation": "2443:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "2435:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1554,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2435:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1557,
												"mutability": "mutable",
												"name": "beetsPoolId",
												"nameLocation": "2463:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1655,
												"src": "2455:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1556,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2455:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2390:85:7"
									},
									"returnParameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2485:0:7"
									},
									"scope": 1656,
									"src": "2372:918:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1657,
							"src": "289:3006:7",
							"usedErrors": []
						}
					],
					"src": "43:3254:7"
				},
				"id": 7
			},
			"interfaces/IAsset.sol": {
				"ast": {
					"absolutePath": "interfaces/IAsset.sol",
					"exportedSymbols": {
						"IAsset": [
							1660
						]
					},
					"id": 1661,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1658,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAsset",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1659,
								"nodeType": "StructuredDocumentation",
								"src": "62:315:8",
								"text": " @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n types.\n This concept is unrelated to a Pool's Asset Managers."
							},
							"fullyImplemented": true,
							"id": 1660,
							"linearizedBaseContracts": [
								1660
							],
							"name": "IAsset",
							"nameLocation": "389:6:8",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1661,
							"src": "379:75:8",
							"usedErrors": []
						}
					],
					"src": "35:421:8"
				},
				"id": 8
			},
			"interfaces/IAuthorizer.sol": {
				"ast": {
					"absolutePath": "interfaces/IAuthorizer.sol",
					"exportedSymbols": {
						"IAuthorizer": [
							1675
						]
					},
					"id": 1676,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1662,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAuthorizer",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1675,
							"linearizedBaseContracts": [
								1675
							],
							"name": "IAuthorizer",
							"nameLocation": "72:11:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1663,
										"nodeType": "StructuredDocumentation",
										"src": "91:123:9",
										"text": " @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`."
									},
									"functionSelector": "9be2a884",
									"id": 1674,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "canPerform",
									"nameLocation": "229:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1665,
												"mutability": "mutable",
												"name": "actionId",
												"nameLocation": "258:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1674,
												"src": "250:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1664,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "250:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1667,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "285:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1674,
												"src": "277:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "277:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "where",
												"nameLocation": "311:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1674,
												"src": "303:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1668,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "303:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "239:84:9"
									},
									"returnParameters": {
										"id": 1673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1672,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1674,
												"src": "347:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1671,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "347:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "346:6:9"
									},
									"scope": 1675,
									"src": "220:133:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1676,
							"src": "62:294:9",
							"usedErrors": []
						}
					],
					"src": "35:323:9"
				},
				"id": 9
			},
			"interfaces/IBeetVault.sol": {
				"ast": {
					"absolutePath": "interfaces/IBeetVault.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1322
						],
						"ContextUpgradeable": [
							1364
						],
						"ERC20Upgradeable": [
							752
						],
						"IAsset": [
							1660
						],
						"IAuthorizer": [
							1675
						],
						"IBeetVault": [
							2137
						],
						"IERC20MetadataUpgradeable": [
							855
						],
						"IERC20Upgradeable": [
							830
						],
						"ISignaturesValidator": [
							2155
						],
						"ITemporarilyPausable": [
							2173
						],
						"Initializable": [
							141
						]
					},
					"id": 2138,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1677,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"id": 1678,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2138,
							"sourceUnit": 753,
							"src": "62:78:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/ISignaturesValidator.sol",
							"file": "./ISignaturesValidator.sol",
							"id": 1679,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2138,
							"sourceUnit": 2156,
							"src": "142:36:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/ITemporarilyPausable.sol",
							"file": "./ITemporarilyPausable.sol",
							"id": 1680,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2138,
							"sourceUnit": 2174,
							"src": "180:36:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IAuthorizer.sol",
							"file": "./IAuthorizer.sol",
							"id": 1681,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2138,
							"sourceUnit": 1676,
							"src": "218:27:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IAsset.sol",
							"file": "./IAsset.sol",
							"id": 1682,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2138,
							"sourceUnit": 1661,
							"src": "247:22:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1683,
										"name": "ISignaturesValidator",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2155,
										"src": "297:20:10"
									},
									"id": 1684,
									"nodeType": "InheritanceSpecifier",
									"src": "297:20:10"
								},
								{
									"baseName": {
										"id": 1685,
										"name": "ITemporarilyPausable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2173,
										"src": "319:20:10"
									},
									"id": 1686,
									"nodeType": "InheritanceSpecifier",
									"src": "319:20:10"
								}
							],
							"canonicalName": "IBeetVault",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 2137,
							"linearizedBaseContracts": [
								2137,
								2173,
								2155
							],
							"name": "IBeetVault",
							"nameLocation": "283:10:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1687,
										"nodeType": "StructuredDocumentation",
										"src": "1859:57:10",
										"text": " @dev Returns the Vault's Authorizer."
									},
									"functionSelector": "aaabadc5",
									"id": 1693,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAuthorizer",
									"nameLocation": "1931:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1688,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1944:2:10"
									},
									"returnParameters": {
										"id": 1692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1691,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1693,
												"src": "1970:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAuthorizer_$1675",
													"typeString": "contract IAuthorizer"
												},
												"typeName": {
													"id": 1690,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1689,
														"name": "IAuthorizer",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1675,
														"src": "1970:11:10"
													},
													"referencedDeclaration": 1675,
													"src": "1970:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAuthorizer_$1675",
														"typeString": "contract IAuthorizer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1969:13:10"
									},
									"scope": 2137,
									"src": "1922:61:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1694,
										"nodeType": "StructuredDocumentation",
										"src": "1991:179:10",
										"text": " @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n Emits an `AuthorizerChanged` event."
									},
									"functionSelector": "058a628f",
									"id": 1700,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setAuthorizer",
									"nameLocation": "2185:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1698,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1697,
												"mutability": "mutable",
												"name": "newAuthorizer",
												"nameLocation": "2211:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1700,
												"src": "2199:25:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAuthorizer_$1675",
													"typeString": "contract IAuthorizer"
												},
												"typeName": {
													"id": 1696,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1695,
														"name": "IAuthorizer",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1675,
														"src": "2199:11:10"
													},
													"referencedDeclaration": 1675,
													"src": "2199:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAuthorizer_$1675",
														"typeString": "contract IAuthorizer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2198:27:10"
									},
									"returnParameters": {
										"id": 1699,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2234:0:10"
									},
									"scope": 2137,
									"src": "2176:59:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1701,
										"nodeType": "StructuredDocumentation",
										"src": "2243:82:10",
										"text": " @dev Emitted when a new authorizer is set by `setAuthorizer`."
									},
									"eventSelector": "94b979b6831a51293e2641426f97747feed46f17779fed9cd18d1ecefcfe92ef",
									"id": 1706,
									"name": "AuthorizerChanged",
									"nameLocation": "2337:17:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1704,
												"indexed": true,
												"mutability": "mutable",
												"name": "newAuthorizer",
												"nameLocation": "2375:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "2355:33:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAuthorizer_$1675",
													"typeString": "contract IAuthorizer"
												},
												"typeName": {
													"id": 1703,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1702,
														"name": "IAuthorizer",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1675,
														"src": "2355:11:10"
													},
													"referencedDeclaration": 1675,
													"src": "2355:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAuthorizer_$1675",
														"typeString": "contract IAuthorizer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2354:35:10"
									},
									"src": "2331:59:10"
								},
								{
									"documentation": {
										"id": 1707,
										"nodeType": "StructuredDocumentation",
										"src": "3502:101:10",
										"text": " @dev Returns true if `user` has approved `relayer` to act as a relayer for them."
									},
									"functionSelector": "fec90d72",
									"id": 1716,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasApprovedRelayer",
									"nameLocation": "3618:18:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1709,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "3645:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "3637:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3637:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1711,
												"mutability": "mutable",
												"name": "relayer",
												"nameLocation": "3659:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "3651:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1710,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3651:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3636:31:10"
									},
									"returnParameters": {
										"id": 1715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1714,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "3691:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1713,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3691:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3690:6:10"
									},
									"scope": 2137,
									"src": "3609:88:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1717,
										"nodeType": "StructuredDocumentation",
										"src": "3705:182:10",
										"text": " @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n Emits a `RelayerApprovalChanged` event."
									},
									"functionSelector": "fa6e671d",
									"id": 1726,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setRelayerApproval",
									"nameLocation": "3902:18:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3939:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1726,
												"src": "3931:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1718,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3931:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1721,
												"mutability": "mutable",
												"name": "relayer",
												"nameLocation": "3964:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1726,
												"src": "3956:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1720,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3956:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1723,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "3987:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1726,
												"src": "3982:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1722,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3982:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3920:82:10"
									},
									"returnParameters": {
										"id": 1725,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4011:0:10"
									},
									"scope": 2137,
									"src": "3893:119:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1727,
										"nodeType": "StructuredDocumentation",
										"src": "4020:106:10",
										"text": " @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`."
									},
									"eventSelector": "46961fdb4502b646d5095fba7600486a8ac05041d55cdf0f16ed677180b5cad8",
									"id": 1735,
									"name": "RelayerApprovalChanged",
									"nameLocation": "4138:22:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1729,
												"indexed": true,
												"mutability": "mutable",
												"name": "relayer",
												"nameLocation": "4177:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1735,
												"src": "4161:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1728,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4161:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1731,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4202:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1735,
												"src": "4186:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1730,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4186:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1733,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4215:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1735,
												"src": "4210:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1732,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4210:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4160:64:10"
									},
									"src": "4132:93:10"
								},
								{
									"documentation": {
										"id": 1736,
										"nodeType": "StructuredDocumentation",
										"src": "4945:80:10",
										"text": " @dev Returns `user`'s Internal Balance for a set of tokens."
									},
									"functionSelector": "0f5a6efa",
									"id": 1748,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getInternalBalance",
									"nameLocation": "5040:18:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1738,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "5067:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1748,
												"src": "5059:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1737,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5059:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1742,
												"mutability": "mutable",
												"name": "tokens",
												"nameLocation": "5100:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1748,
												"src": "5073:33:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_memory_ptr",
													"typeString": "contract IERC20Upgradeable[]"
												},
												"typeName": {
													"baseType": {
														"id": 1740,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1739,
															"name": "IERC20Upgradeable",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 830,
															"src": "5073:17:10"
														},
														"referencedDeclaration": 830,
														"src": "5073:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
															"typeString": "contract IERC20Upgradeable"
														}
													},
													"id": 1741,
													"nodeType": "ArrayTypeName",
													"src": "5073:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_storage_ptr",
														"typeString": "contract IERC20Upgradeable[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5058:49:10"
									},
									"returnParameters": {
										"id": 1747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1746,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1748,
												"src": "5158:16:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1744,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5158:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1745,
													"nodeType": "ArrayTypeName",
													"src": "5158:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5157:18:10"
									},
									"scope": 2137,
									"src": "5031:145:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1749,
										"nodeType": "StructuredDocumentation",
										"src": "5184:422:10",
										"text": " @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n it lets integrators reuse a user's Vault allowance.\n For each operation, if the caller is not `sender`, it must be an authorized relayer for them."
									},
									"functionSelector": "0e8e3e84",
									"id": 1756,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "manageUserBalance",
									"nameLocation": "5621:17:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1753,
												"mutability": "mutable",
												"name": "ops",
												"nameLocation": "5662:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1756,
												"src": "5639:26:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_UserBalanceOp_$1769_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IBeetVault.UserBalanceOp[]"
												},
												"typeName": {
													"baseType": {
														"id": 1751,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1750,
															"name": "UserBalanceOp",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1769,
															"src": "5639:13:10"
														},
														"referencedDeclaration": 1769,
														"src": "5639:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserBalanceOp_$1769_storage_ptr",
															"typeString": "struct IBeetVault.UserBalanceOp"
														}
													},
													"id": 1752,
													"nodeType": "ArrayTypeName",
													"src": "5639:15:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_UserBalanceOp_$1769_storage_$dyn_storage_ptr",
														"typeString": "struct IBeetVault.UserBalanceOp[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5638:28:10"
									},
									"returnParameters": {
										"id": 1755,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5683:0:10"
									},
									"scope": 2137,
									"src": "5612:72:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IBeetVault.UserBalanceOp",
									"id": 1769,
									"members": [
										{
											"constant": false,
											"id": 1759,
											"mutability": "mutable",
											"name": "kind",
											"nameLocation": "5926:4:10",
											"nodeType": "VariableDeclaration",
											"scope": 1769,
											"src": "5908:22:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_enum$_UserBalanceOpKind_$1774",
												"typeString": "enum IBeetVault.UserBalanceOpKind"
											},
											"typeName": {
												"id": 1758,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1757,
													"name": "UserBalanceOpKind",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1774,
													"src": "5908:17:10"
												},
												"referencedDeclaration": 1774,
												"src": "5908:17:10",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_UserBalanceOpKind_$1774",
													"typeString": "enum IBeetVault.UserBalanceOpKind"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1762,
											"mutability": "mutable",
											"name": "asset",
											"nameLocation": "5948:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1769,
											"src": "5941:12:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IAsset_$1660",
												"typeString": "contract IAsset"
											},
											"typeName": {
												"id": 1761,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1760,
													"name": "IAsset",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1660,
													"src": "5941:6:10"
												},
												"referencedDeclaration": 1660,
												"src": "5941:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAsset_$1660",
													"typeString": "contract IAsset"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1764,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "5972:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 1769,
											"src": "5964:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1763,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5964:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1766,
											"mutability": "mutable",
											"name": "sender",
											"nameLocation": "5997:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 1769,
											"src": "5989:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1765,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "5989:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1768,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "6030:9:10",
											"nodeType": "VariableDeclaration",
											"scope": 1769,
											"src": "6014:25:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address_payable",
												"typeString": "address payable"
											},
											"typeName": {
												"id": 1767,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "6014:15:10",
												"stateMutability": "payable",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "UserBalanceOp",
									"nameLocation": "5883:13:10",
									"nodeType": "StructDefinition",
									"scope": 2137,
									"src": "5876:171:10",
									"visibility": "public"
								},
								{
									"canonicalName": "IBeetVault.UserBalanceOpKind",
									"id": 1774,
									"members": [
										{
											"id": 1770,
											"name": "DEPOSIT_INTERNAL",
											"nameLocation": "7734:16:10",
											"nodeType": "EnumValue",
											"src": "7734:16:10"
										},
										{
											"id": 1771,
											"name": "WITHDRAW_INTERNAL",
											"nameLocation": "7761:17:10",
											"nodeType": "EnumValue",
											"src": "7761:17:10"
										},
										{
											"id": 1772,
											"name": "TRANSFER_INTERNAL",
											"nameLocation": "7789:17:10",
											"nodeType": "EnumValue",
											"src": "7789:17:10"
										},
										{
											"id": 1773,
											"name": "TRANSFER_EXTERNAL",
											"nameLocation": "7817:17:10",
											"nodeType": "EnumValue",
											"src": "7817:17:10"
										}
									],
									"name": "UserBalanceOpKind",
									"nameLocation": "7705:17:10",
									"nodeType": "EnumDefinition",
									"src": "7700:141:10"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1775,
										"nodeType": "StructuredDocumentation",
										"src": "7849:323:10",
										"text": " @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n interacting with Pools using Internal Balance.\n Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n address."
									},
									"eventSelector": "18e1ea4139e68413d7d08aa752e71568e36b2c5bf940893314c2c5b01eaa0c42",
									"id": 1784,
									"name": "InternalBalanceChanged",
									"nameLocation": "8184:22:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1783,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1777,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "8223:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1784,
												"src": "8207:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1776,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8207:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1780,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8255:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1784,
												"src": "8229:31:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1779,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1778,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 830,
														"src": "8229:17:10"
													},
													"referencedDeclaration": 830,
													"src": "8229:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1782,
												"indexed": false,
												"mutability": "mutable",
												"name": "delta",
												"nameLocation": "8269:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1784,
												"src": "8262:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1781,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8262:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8206:69:10"
									},
									"src": "8178:98:10"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1785,
										"nodeType": "StructuredDocumentation",
										"src": "8284:133:10",
										"text": " @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account."
									},
									"eventSelector": "540a1a3f28340caec336c81d8d7b3df139ee5cdc1839a4f283d7ebb7eaae2d5c",
									"id": 1796,
									"name": "ExternalBalanceTransfer",
									"nameLocation": "8429:23:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1788,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8489:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1796,
												"src": "8463:31:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1787,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1786,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 830,
														"src": "8463:17:10"
													},
													"referencedDeclaration": 830,
													"src": "8463:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1790,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "8521:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1796,
												"src": "8505:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1789,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8505:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1792,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "8546:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1796,
												"src": "8538:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1791,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8538:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1794,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8574:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1796,
												"src": "8566:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1793,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8566:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8452:135:10"
									},
									"src": "8423:165:10"
								},
								{
									"canonicalName": "IBeetVault.PoolSpecialization",
									"id": 1800,
									"members": [
										{
											"id": 1797,
											"name": "GENERAL",
											"nameLocation": "9722:7:10",
											"nodeType": "EnumValue",
											"src": "9722:7:10"
										},
										{
											"id": 1798,
											"name": "MINIMAL_SWAP_INFO",
											"nameLocation": "9740:17:10",
											"nodeType": "EnumValue",
											"src": "9740:17:10"
										},
										{
											"id": 1799,
											"name": "TWO_TOKEN",
											"nameLocation": "9768:9:10",
											"nodeType": "EnumValue",
											"src": "9768:9:10"
										}
									],
									"name": "PoolSpecialization",
									"nameLocation": "9692:18:10",
									"nodeType": "EnumDefinition",
									"src": "9687:97:10"
								},
								{
									"documentation": {
										"id": 1801,
										"nodeType": "StructuredDocumentation",
										"src": "9792:714:10",
										"text": " @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n changed.\n The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n depending on the chosen specialization setting. This contract is known as the Pool's contract.\n Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n multiple Pools may share the same contract.\n Emits a `PoolRegistered` event."
									},
									"functionSelector": "09b2760f",
									"id": 1809,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerPool",
									"nameLocation": "10521:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1805,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1804,
												"mutability": "mutable",
												"name": "specialization",
												"nameLocation": "10553:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1809,
												"src": "10534:33:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_PoolSpecialization_$1800",
													"typeString": "enum IBeetVault.PoolSpecialization"
												},
												"typeName": {
													"id": 1803,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1802,
														"name": "PoolSpecialization",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1800,
														"src": "10534:18:10"
													},
													"referencedDeclaration": 1800,
													"src": "10534:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_PoolSpecialization_$1800",
														"typeString": "enum IBeetVault.PoolSpecialization"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10533:35:10"
									},
									"returnParameters": {
										"id": 1808,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1807,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1809,
												"src": "10587:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1806,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10587:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10586:9:10"
									},
									"scope": 2137,
									"src": "10512:84:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1810,
										"nodeType": "StructuredDocumentation",
										"src": "10604:86:10",
										"text": " @dev Emitted when a Pool is registered by calling `registerPool`."
									},
									"eventSelector": "3c13bc30b8e878c53fd2a36b679409c073afd75950be43d8858768e956fbc20e",
									"id": 1819,
									"name": "PoolRegistered",
									"nameLocation": "10702:14:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1812,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "10733:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "10717:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1811,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10717:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1814,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolAddress",
												"nameLocation": "10757:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "10741:27:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1813,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10741:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1817,
												"indexed": false,
												"mutability": "mutable",
												"name": "specialization",
												"nameLocation": "10789:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "10770:33:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_PoolSpecialization_$1800",
													"typeString": "enum IBeetVault.PoolSpecialization"
												},
												"typeName": {
													"id": 1816,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1815,
														"name": "PoolSpecialization",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1800,
														"src": "10770:18:10"
													},
													"referencedDeclaration": 1800,
													"src": "10770:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_PoolSpecialization_$1800",
														"typeString": "enum IBeetVault.PoolSpecialization"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10716:88:10"
									},
									"src": "10696:109:10"
								},
								{
									"documentation": {
										"id": 1820,
										"nodeType": "StructuredDocumentation",
										"src": "10813:87:10",
										"text": " @dev Returns a Pool's contract address and specialization setting."
									},
									"functionSelector": "f6c00927",
									"id": 1830,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nameLocation": "10915:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1823,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1822,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "10931:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1830,
												"src": "10923:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1821,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10923:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10922:16:10"
									},
									"returnParameters": {
										"id": 1829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1825,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1830,
												"src": "10962:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1824,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10962:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1828,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1830,
												"src": "10971:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_PoolSpecialization_$1800",
													"typeString": "enum IBeetVault.PoolSpecialization"
												},
												"typeName": {
													"id": 1827,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1826,
														"name": "PoolSpecialization",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1800,
														"src": "10971:18:10"
													},
													"referencedDeclaration": 1800,
													"src": "10971:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_PoolSpecialization_$1800",
														"typeString": "enum IBeetVault.PoolSpecialization"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10961:29:10"
									},
									"scope": 2137,
									"src": "10906:85:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1831,
										"nodeType": "StructuredDocumentation",
										"src": "10999:1443:10",
										"text": " @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n exit by receiving registered tokens, and can only swap registered tokens.\n Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n ascending order.\n The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n expected to be highly secured smart contracts with sound design principles, and the decision to register an\n Asset Manager should not be made lightly.\n Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n different Asset Manager.\n Emits a `TokensRegistered` event."
									},
									"functionSelector": "66a9c7d2",
									"id": 1843,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerTokens",
									"nameLocation": "12457:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1833,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "12490:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1843,
												"src": "12482:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1832,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "12482:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1837,
												"mutability": "mutable",
												"name": "tokens",
												"nameLocation": "12534:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1843,
												"src": "12507:33:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_memory_ptr",
													"typeString": "contract IERC20Upgradeable[]"
												},
												"typeName": {
													"baseType": {
														"id": 1835,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1834,
															"name": "IERC20Upgradeable",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 830,
															"src": "12507:17:10"
														},
														"referencedDeclaration": 830,
														"src": "12507:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
															"typeString": "contract IERC20Upgradeable"
														}
													},
													"id": 1836,
													"nodeType": "ArrayTypeName",
													"src": "12507:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_storage_ptr",
														"typeString": "contract IERC20Upgradeable[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1840,
												"mutability": "mutable",
												"name": "assetManagers",
												"nameLocation": "12568:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1843,
												"src": "12551:30:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1838,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "12551:7:10",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1839,
													"nodeType": "ArrayTypeName",
													"src": "12551:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12471:117:10"
									},
									"returnParameters": {
										"id": 1842,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12597:0:10"
									},
									"scope": 2137,
									"src": "12448:150:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1844,
										"nodeType": "StructuredDocumentation",
										"src": "12606:91:10",
										"text": " @dev Emitted when a Pool registers tokens by calling `registerTokens`."
									},
									"eventSelector": "f5847d3f2197b16cdcd2098ec95d0905cd1abdaf415f07bb7cef2bba8ac5dec4",
									"id": 1855,
									"name": "TokensRegistered",
									"nameLocation": "12709:16:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1846,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "12742:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1855,
												"src": "12726:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1845,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "12726:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1850,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokens",
												"nameLocation": "12770:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1855,
												"src": "12750:26:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_memory_ptr",
													"typeString": "contract IERC20Upgradeable[]"
												},
												"typeName": {
													"baseType": {
														"id": 1848,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1847,
															"name": "IERC20Upgradeable",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 830,
															"src": "12750:17:10"
														},
														"referencedDeclaration": 830,
														"src": "12750:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
															"typeString": "contract IERC20Upgradeable"
														}
													},
													"id": 1849,
													"nodeType": "ArrayTypeName",
													"src": "12750:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_storage_ptr",
														"typeString": "contract IERC20Upgradeable[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1853,
												"indexed": false,
												"mutability": "mutable",
												"name": "assetManagers",
												"nameLocation": "12788:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1855,
												"src": "12778:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1851,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "12778:7:10",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1852,
													"nodeType": "ArrayTypeName",
													"src": "12778:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12725:77:10"
									},
									"src": "12703:100:10"
								},
								{
									"documentation": {
										"id": 1856,
										"nodeType": "StructuredDocumentation",
										"src": "12811:577:10",
										"text": " @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n must be deregistered in the same `deregisterTokens` call.\n A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n Emits a `TokensDeregistered` event."
									},
									"functionSelector": "7d3aeb96",
									"id": 1865,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deregisterTokens",
									"nameLocation": "13403:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1858,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "13428:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1865,
												"src": "13420:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1857,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13420:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1862,
												"mutability": "mutable",
												"name": "tokens",
												"nameLocation": "13463:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1865,
												"src": "13436:33:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_memory_ptr",
													"typeString": "contract IERC20Upgradeable[]"
												},
												"typeName": {
													"baseType": {
														"id": 1860,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1859,
															"name": "IERC20Upgradeable",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 830,
															"src": "13436:17:10"
														},
														"referencedDeclaration": 830,
														"src": "13436:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
															"typeString": "contract IERC20Upgradeable"
														}
													},
													"id": 1861,
													"nodeType": "ArrayTypeName",
													"src": "13436:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_storage_ptr",
														"typeString": "contract IERC20Upgradeable[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13419:51:10"
									},
									"returnParameters": {
										"id": 1864,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13479:0:10"
									},
									"scope": 2137,
									"src": "13394:86:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1866,
										"nodeType": "StructuredDocumentation",
										"src": "13488:95:10",
										"text": " @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`."
									},
									"eventSelector": "7dcdc6d02ef40c7c1a7046a011b058bd7f988fa14e20a66344f9d4e60657d610",
									"id": 1874,
									"name": "TokensDeregistered",
									"nameLocation": "13595:18:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1873,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1868,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "13630:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1874,
												"src": "13614:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1867,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13614:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1872,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokens",
												"nameLocation": "13658:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1874,
												"src": "13638:26:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_memory_ptr",
													"typeString": "contract IERC20Upgradeable[]"
												},
												"typeName": {
													"baseType": {
														"id": 1870,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1869,
															"name": "IERC20Upgradeable",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 830,
															"src": "13638:17:10"
														},
														"referencedDeclaration": 830,
														"src": "13638:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
															"typeString": "contract IERC20Upgradeable"
														}
													},
													"id": 1871,
													"nodeType": "ArrayTypeName",
													"src": "13638:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_storage_ptr",
														"typeString": "contract IERC20Upgradeable[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13613:52:10"
									},
									"src": "13589:77:10"
								},
								{
									"documentation": {
										"id": 1875,
										"nodeType": "StructuredDocumentation",
										"src": "13674:1059:10",
										"text": " @dev Returns detailed information for a Pool's registered token.\n `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n equals the sum of `cash` and `managed`.\n Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n `managed` or `total` balance to be greater than 2^112 - 1.\n `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n change for this purpose, and will update `lastChangeBlock`.\n `assetManager` is the Pool's token Asset Manager."
									},
									"functionSelector": "b05f8e48",
									"id": 1891,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolTokenInfo",
									"nameLocation": "14748:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1877,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "14773:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "14765:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1876,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "14765:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1880,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14799:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "14781:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 1879,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1878,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 830,
														"src": "14781:17:10"
													},
													"referencedDeclaration": 830,
													"src": "14781:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14764:41:10"
									},
									"returnParameters": {
										"id": 1890,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1883,
												"mutability": "mutable",
												"name": "cash",
												"nameLocation": "14878:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "14870:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1882,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14870:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1885,
												"mutability": "mutable",
												"name": "managed",
												"nameLocation": "14905:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "14897:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1884,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14897:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1887,
												"mutability": "mutable",
												"name": "lastChangeBlock",
												"nameLocation": "14935:15:10",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "14927:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1886,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14927:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1889,
												"mutability": "mutable",
												"name": "assetManager",
												"nameLocation": "14973:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "14965:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1888,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14965:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14855:141:10"
									},
									"scope": 2137,
									"src": "14739:258:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1892,
										"nodeType": "StructuredDocumentation",
										"src": "15005:841:10",
										"text": " @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n the tokens' `balances` changed.\n The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n order as passed to `registerTokens`.\n Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n instead."
									},
									"functionSelector": "f94d4668",
									"id": 1906,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolTokens",
									"nameLocation": "15861:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1894,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "15883:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1906,
												"src": "15875:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1893,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "15875:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15874:16:10"
									},
									"returnParameters": {
										"id": 1905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1899,
												"mutability": "mutable",
												"name": "tokens",
												"nameLocation": "15982:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1906,
												"src": "15955:33:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_memory_ptr",
													"typeString": "contract IERC20Upgradeable[]"
												},
												"typeName": {
													"baseType": {
														"id": 1897,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1896,
															"name": "IERC20Upgradeable",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 830,
															"src": "15955:17:10"
														},
														"referencedDeclaration": 830,
														"src": "15955:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
															"typeString": "contract IERC20Upgradeable"
														}
													},
													"id": 1898,
													"nodeType": "ArrayTypeName",
													"src": "15955:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_storage_ptr",
														"typeString": "contract IERC20Upgradeable[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1902,
												"mutability": "mutable",
												"name": "balances",
												"nameLocation": "16020:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1906,
												"src": "16003:25:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1900,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "16003:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1901,
													"nodeType": "ArrayTypeName",
													"src": "16003:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1904,
												"mutability": "mutable",
												"name": "lastChangeBlock",
												"nameLocation": "16051:15:10",
												"nodeType": "VariableDeclaration",
												"scope": 1906,
												"src": "16043:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1903,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16043:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15940:137:10"
									},
									"scope": 2137,
									"src": "15852:226:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1907,
										"nodeType": "StructuredDocumentation",
										"src": "16086:2335:10",
										"text": " @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n Pool shares.\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n these maximums.\n If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n back to the caller (not the sender, which is important for relayers).\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n withdrawn from Internal Balance: attempting to do so will trigger a revert.\n This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n directly to the Pool's contract, as is `recipient`.\n Emits a `PoolBalanceChanged` event."
									},
									"functionSelector": "b95cac28",
									"id": 1919,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "joinPool",
									"nameLocation": "18436:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1909,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "18463:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1919,
												"src": "18455:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1908,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "18455:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1911,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "18488:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1919,
												"src": "18480:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1910,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18480:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1913,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "18513:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1919,
												"src": "18505:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1912,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18505:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1916,
												"mutability": "mutable",
												"name": "request",
												"nameLocation": "18556:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1919,
												"src": "18533:30:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_JoinPoolRequest_$1931_memory_ptr",
													"typeString": "struct IBeetVault.JoinPoolRequest"
												},
												"typeName": {
													"id": 1915,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1914,
														"name": "JoinPoolRequest",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1931,
														"src": "18533:15:10"
													},
													"referencedDeclaration": 1931,
													"src": "18533:15:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_JoinPoolRequest_$1931_storage_ptr",
														"typeString": "struct IBeetVault.JoinPoolRequest"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18444:126:10"
									},
									"returnParameters": {
										"id": 1918,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18587:0:10"
									},
									"scope": 2137,
									"src": "18427:161:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IBeetVault.JoinPoolRequest",
									"id": 1931,
									"members": [
										{
											"constant": false,
											"id": 1923,
											"mutability": "mutable",
											"name": "assets",
											"nameLocation": "18639:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 1931,
											"src": "18630:15:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_storage_ptr",
												"typeString": "contract IAsset[]"
											},
											"typeName": {
												"baseType": {
													"id": 1921,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1920,
														"name": "IAsset",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1660,
														"src": "18630:6:10"
													},
													"referencedDeclaration": 1660,
													"src": "18630:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAsset_$1660",
														"typeString": "contract IAsset"
													}
												},
												"id": 1922,
												"nodeType": "ArrayTypeName",
												"src": "18630:8:10",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_storage_ptr",
													"typeString": "contract IAsset[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1926,
											"mutability": "mutable",
											"name": "maxAmountsIn",
											"nameLocation": "18666:12:10",
											"nodeType": "VariableDeclaration",
											"scope": 1931,
											"src": "18656:22:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
												"typeString": "uint256[]"
											},
											"typeName": {
												"baseType": {
													"id": 1924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18656:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1925,
												"nodeType": "ArrayTypeName",
												"src": "18656:9:10",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
													"typeString": "uint256[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1928,
											"mutability": "mutable",
											"name": "userData",
											"nameLocation": "18695:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 1931,
											"src": "18689:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1927,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "18689:5:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1930,
											"mutability": "mutable",
											"name": "fromInternalBalance",
											"nameLocation": "18719:19:10",
											"nodeType": "VariableDeclaration",
											"scope": 1931,
											"src": "18714:24:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1929,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "18714:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "JoinPoolRequest",
									"nameLocation": "18603:15:10",
									"nodeType": "StructDefinition",
									"scope": 2137,
									"src": "18596:150:10",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1932,
										"nodeType": "StructuredDocumentation",
										"src": "18754:2523:10",
										"text": " @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n `getPoolTokenInfo`).\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n it just enforces these minimums.\n If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n do so will trigger a revert.\n `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n `tokens` array. This array must match the Pool's registered tokens.\n This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n passed directly to the Pool's contract.\n Emits a `PoolBalanceChanged` event."
									},
									"functionSelector": "8bdb3913",
									"id": 1944,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exitPool",
									"nameLocation": "21292:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1942,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1934,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "21319:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1944,
												"src": "21311:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1933,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "21311:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1936,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "21344:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1944,
												"src": "21336:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1935,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21336:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1938,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "21377:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1944,
												"src": "21361:25:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1937,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21361:15:10",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1941,
												"mutability": "mutable",
												"name": "request",
												"nameLocation": "21420:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1944,
												"src": "21397:30:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExitPoolRequest_$1956_memory_ptr",
													"typeString": "struct IBeetVault.ExitPoolRequest"
												},
												"typeName": {
													"id": 1940,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1939,
														"name": "ExitPoolRequest",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1956,
														"src": "21397:15:10"
													},
													"referencedDeclaration": 1956,
													"src": "21397:15:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExitPoolRequest_$1956_storage_ptr",
														"typeString": "struct IBeetVault.ExitPoolRequest"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21300:134:10"
									},
									"returnParameters": {
										"id": 1943,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "21443:0:10"
									},
									"scope": 2137,
									"src": "21283:161:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IBeetVault.ExitPoolRequest",
									"id": 1956,
									"members": [
										{
											"constant": false,
											"id": 1948,
											"mutability": "mutable",
											"name": "assets",
											"nameLocation": "21495:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 1956,
											"src": "21486:15:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_storage_ptr",
												"typeString": "contract IAsset[]"
											},
											"typeName": {
												"baseType": {
													"id": 1946,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1945,
														"name": "IAsset",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1660,
														"src": "21486:6:10"
													},
													"referencedDeclaration": 1660,
													"src": "21486:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAsset_$1660",
														"typeString": "contract IAsset"
													}
												},
												"id": 1947,
												"nodeType": "ArrayTypeName",
												"src": "21486:8:10",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_storage_ptr",
													"typeString": "contract IAsset[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1951,
											"mutability": "mutable",
											"name": "minAmountsOut",
											"nameLocation": "21522:13:10",
											"nodeType": "VariableDeclaration",
											"scope": 1956,
											"src": "21512:23:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
												"typeString": "uint256[]"
											},
											"typeName": {
												"baseType": {
													"id": 1949,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21512:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1950,
												"nodeType": "ArrayTypeName",
												"src": "21512:9:10",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
													"typeString": "uint256[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1953,
											"mutability": "mutable",
											"name": "userData",
											"nameLocation": "21552:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 1956,
											"src": "21546:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1952,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "21546:5:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1955,
											"mutability": "mutable",
											"name": "toInternalBalance",
											"nameLocation": "21576:17:10",
											"nodeType": "VariableDeclaration",
											"scope": 1956,
											"src": "21571:22:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1954,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "21571:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExitPoolRequest",
									"nameLocation": "21459:15:10",
									"nodeType": "StructDefinition",
									"scope": 2137,
									"src": "21452:149:10",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1957,
										"nodeType": "StructuredDocumentation",
										"src": "21609:118:10",
										"text": " @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively."
									},
									"eventSelector": "e5ce249087ce04f05a957192435400fd97868dba0e6a4b4c049abf8af80dae78",
									"id": 1973,
									"name": "PoolBalanceChanged",
									"nameLocation": "21739:18:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1959,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "21784:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "21768:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1958,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "21768:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1961,
												"indexed": true,
												"mutability": "mutable",
												"name": "liquidityProvider",
												"nameLocation": "21817:17:10",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "21801:33:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21801:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1965,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokens",
												"nameLocation": "21865:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "21845:26:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_memory_ptr",
													"typeString": "contract IERC20Upgradeable[]"
												},
												"typeName": {
													"baseType": {
														"id": 1963,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1962,
															"name": "IERC20Upgradeable",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 830,
															"src": "21845:17:10"
														},
														"referencedDeclaration": 830,
														"src": "21845:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
															"typeString": "contract IERC20Upgradeable"
														}
													},
													"id": 1964,
													"nodeType": "ArrayTypeName",
													"src": "21845:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20Upgradeable_$830_$dyn_storage_ptr",
														"typeString": "contract IERC20Upgradeable[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1968,
												"indexed": false,
												"mutability": "mutable",
												"name": "deltas",
												"nameLocation": "21891:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "21882:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
													"typeString": "int256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1966,
														"name": "int256",
														"nodeType": "ElementaryTypeName",
														"src": "21882:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 1967,
													"nodeType": "ArrayTypeName",
													"src": "21882:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
														"typeString": "int256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1971,
												"indexed": false,
												"mutability": "mutable",
												"name": "protocolFeeAmounts",
												"nameLocation": "21918:18:10",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "21908:28:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1969,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "21908:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1970,
													"nodeType": "ArrayTypeName",
													"src": "21908:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21757:186:10"
									},
									"src": "21733:211:10"
								},
								{
									"canonicalName": "IBeetVault.PoolBalanceChangeKind",
									"id": 1976,
									"members": [
										{
											"id": 1974,
											"name": "JOIN",
											"nameLocation": "21990:4:10",
											"nodeType": "EnumValue",
											"src": "21990:4:10"
										},
										{
											"id": 1975,
											"name": "EXIT",
											"nameLocation": "22005:4:10",
											"nodeType": "EnumValue",
											"src": "22005:4:10"
										}
									],
									"name": "PoolBalanceChangeKind",
									"nameLocation": "21957:21:10",
									"nodeType": "EnumDefinition",
									"src": "21952:64:10"
								},
								{
									"canonicalName": "IBeetVault.SwapKind",
									"id": 1979,
									"members": [
										{
											"id": 1977,
											"name": "GIVEN_IN",
											"nameLocation": "25675:8:10",
											"nodeType": "EnumValue",
											"src": "25675:8:10"
										},
										{
											"id": 1978,
											"name": "GIVEN_OUT",
											"nameLocation": "25694:9:10",
											"nodeType": "EnumValue",
											"src": "25694:9:10"
										}
									],
									"name": "SwapKind",
									"nameLocation": "25655:8:10",
									"nodeType": "EnumDefinition",
									"src": "25650:60:10"
								},
								{
									"documentation": {
										"id": 1980,
										"nodeType": "StructuredDocumentation",
										"src": "25718:599:10",
										"text": " @dev Performs a swap with a single Pool.\n If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n taken from the Pool, which must be greater than or equal to `limit`.\n If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n sent to the Pool, which must be less than or equal to `limit`.\n Internal Balance usage and the recipient are determined by the `funds` struct.\n Emits a `Swap` event."
									},
									"functionSelector": "52bbbe29",
									"id": 1995,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nameLocation": "26332:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1983,
												"mutability": "mutable",
												"name": "singleSwap",
												"nameLocation": "26365:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1995,
												"src": "26347:28:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SingleSwap_$2011_memory_ptr",
													"typeString": "struct IBeetVault.SingleSwap"
												},
												"typeName": {
													"id": 1982,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1981,
														"name": "SingleSwap",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2011,
														"src": "26347:10:10"
													},
													"referencedDeclaration": 2011,
													"src": "26347:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SingleSwap_$2011_storage_ptr",
														"typeString": "struct IBeetVault.SingleSwap"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1986,
												"mutability": "mutable",
												"name": "funds",
												"nameLocation": "26408:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1995,
												"src": "26386:27:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_FundManagement_$2072_memory_ptr",
													"typeString": "struct IBeetVault.FundManagement"
												},
												"typeName": {
													"id": 1985,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1984,
														"name": "FundManagement",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2072,
														"src": "26386:14:10"
													},
													"referencedDeclaration": 2072,
													"src": "26386:14:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_FundManagement_$2072_storage_ptr",
														"typeString": "struct IBeetVault.FundManagement"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1988,
												"mutability": "mutable",
												"name": "limit",
												"nameLocation": "26432:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1995,
												"src": "26424:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1987,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "26424:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "26456:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1995,
												"src": "26448:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1989,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "26448:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "26336:135:10"
									},
									"returnParameters": {
										"id": 1994,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1993,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1995,
												"src": "26498:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1992,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "26498:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "26497:9:10"
									},
									"scope": 2137,
									"src": "26323:184:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IBeetVault.SingleSwap",
									"id": 2011,
									"members": [
										{
											"constant": false,
											"id": 1997,
											"mutability": "mutable",
											"name": "poolId",
											"nameLocation": "27112:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 2011,
											"src": "27104:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1996,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "27104:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2000,
											"mutability": "mutable",
											"name": "kind",
											"nameLocation": "27138:4:10",
											"nodeType": "VariableDeclaration",
											"scope": 2011,
											"src": "27129:13:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_enum$_SwapKind_$1979",
												"typeString": "enum IBeetVault.SwapKind"
											},
											"typeName": {
												"id": 1999,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1998,
													"name": "SwapKind",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1979,
													"src": "27129:8:10"
												},
												"referencedDeclaration": 1979,
												"src": "27129:8:10",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_SwapKind_$1979",
													"typeString": "enum IBeetVault.SwapKind"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2003,
											"mutability": "mutable",
											"name": "assetIn",
											"nameLocation": "27160:7:10",
											"nodeType": "VariableDeclaration",
											"scope": 2011,
											"src": "27153:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IAsset_$1660",
												"typeString": "contract IAsset"
											},
											"typeName": {
												"id": 2002,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 2001,
													"name": "IAsset",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1660,
													"src": "27153:6:10"
												},
												"referencedDeclaration": 1660,
												"src": "27153:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAsset_$1660",
													"typeString": "contract IAsset"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2006,
											"mutability": "mutable",
											"name": "assetOut",
											"nameLocation": "27185:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 2011,
											"src": "27178:15:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IAsset_$1660",
												"typeString": "contract IAsset"
											},
											"typeName": {
												"id": 2005,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 2004,
													"name": "IAsset",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1660,
													"src": "27178:6:10"
												},
												"referencedDeclaration": 1660,
												"src": "27178:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAsset_$1660",
													"typeString": "contract IAsset"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2008,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "27212:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 2011,
											"src": "27204:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2007,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "27204:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2010,
											"mutability": "mutable",
											"name": "userData",
											"nameLocation": "27235:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 2011,
											"src": "27229:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 2009,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "27229:5:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SingleSwap",
									"nameLocation": "27082:10:10",
									"nodeType": "StructDefinition",
									"scope": 2137,
									"src": "27075:176:10",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2012,
										"nodeType": "StructuredDocumentation",
										"src": "27259:2008:10",
										"text": " @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n the same index in the `assets` array.\n Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n `amountOut` depending on the swap kind.\n Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n or unwrapped from WETH by the Vault.\n Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n the minimum or maximum amount of each token the vault is allowed to transfer.\n `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n equivalent `swap` call.\n Emits `Swap` events."
									},
									"functionSelector": "945bcec9",
									"id": 2037,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchSwap",
									"nameLocation": "29282:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2015,
												"mutability": "mutable",
												"name": "kind",
												"nameLocation": "29311:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2037,
												"src": "29302:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_SwapKind_$1979",
													"typeString": "enum IBeetVault.SwapKind"
												},
												"typeName": {
													"id": 2014,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2013,
														"name": "SwapKind",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1979,
														"src": "29302:8:10"
													},
													"referencedDeclaration": 1979,
													"src": "29302:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_SwapKind_$1979",
														"typeString": "enum IBeetVault.SwapKind"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2019,
												"mutability": "mutable",
												"name": "swaps",
												"nameLocation": "29349:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2037,
												"src": "29326:28:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$2048_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IBeetVault.BatchSwapStep[]"
												},
												"typeName": {
													"baseType": {
														"id": 2017,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2016,
															"name": "BatchSwapStep",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 2048,
															"src": "29326:13:10"
														},
														"referencedDeclaration": 2048,
														"src": "29326:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BatchSwapStep_$2048_storage_ptr",
															"typeString": "struct IBeetVault.BatchSwapStep"
														}
													},
													"id": 2018,
													"nodeType": "ArrayTypeName",
													"src": "29326:15:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$2048_storage_$dyn_storage_ptr",
														"typeString": "struct IBeetVault.BatchSwapStep[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2023,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "29381:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2037,
												"src": "29365:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
													"typeString": "contract IAsset[]"
												},
												"typeName": {
													"baseType": {
														"id": 2021,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2020,
															"name": "IAsset",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1660,
															"src": "29365:6:10"
														},
														"referencedDeclaration": 1660,
														"src": "29365:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IAsset_$1660",
															"typeString": "contract IAsset"
														}
													},
													"id": 2022,
													"nodeType": "ArrayTypeName",
													"src": "29365:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_storage_ptr",
														"typeString": "contract IAsset[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2026,
												"mutability": "mutable",
												"name": "funds",
												"nameLocation": "29420:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2037,
												"src": "29398:27:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_FundManagement_$2072_memory_ptr",
													"typeString": "struct IBeetVault.FundManagement"
												},
												"typeName": {
													"id": 2025,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2024,
														"name": "FundManagement",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2072,
														"src": "29398:14:10"
													},
													"referencedDeclaration": 2072,
													"src": "29398:14:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_FundManagement_$2072_storage_ptr",
														"typeString": "struct IBeetVault.FundManagement"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2029,
												"mutability": "mutable",
												"name": "limits",
												"nameLocation": "29452:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2037,
												"src": "29436:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
													"typeString": "int256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2027,
														"name": "int256",
														"nodeType": "ElementaryTypeName",
														"src": "29436:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 2028,
													"nodeType": "ArrayTypeName",
													"src": "29436:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
														"typeString": "int256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2031,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "29477:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2037,
												"src": "29469:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2030,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "29469:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "29291:201:10"
									},
									"returnParameters": {
										"id": 2036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2037,
												"src": "29519:15:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
													"typeString": "int256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2033,
														"name": "int256",
														"nodeType": "ElementaryTypeName",
														"src": "29519:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 2034,
													"nodeType": "ArrayTypeName",
													"src": "29519:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
														"typeString": "int256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "29518:17:10"
									},
									"scope": 2137,
									"src": "29273:263:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IBeetVault.BatchSwapStep",
									"id": 2048,
									"members": [
										{
											"constant": false,
											"id": 2039,
											"mutability": "mutable",
											"name": "poolId",
											"nameLocation": "30150:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 2048,
											"src": "30142:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 2038,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "30142:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2041,
											"mutability": "mutable",
											"name": "assetInIndex",
											"nameLocation": "30175:12:10",
											"nodeType": "VariableDeclaration",
											"scope": 2048,
											"src": "30167:20:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2040,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "30167:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2043,
											"mutability": "mutable",
											"name": "assetOutIndex",
											"nameLocation": "30206:13:10",
											"nodeType": "VariableDeclaration",
											"scope": 2048,
											"src": "30198:21:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2042,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "30198:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2045,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "30238:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 2048,
											"src": "30230:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2044,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "30230:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2047,
											"mutability": "mutable",
											"name": "userData",
											"nameLocation": "30261:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 2048,
											"src": "30255:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 2046,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "30255:5:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BatchSwapStep",
									"nameLocation": "30117:13:10",
									"nodeType": "StructDefinition",
									"scope": 2137,
									"src": "30110:167:10",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2049,
										"nodeType": "StructuredDocumentation",
										"src": "30285:94:10",
										"text": " @dev Emitted for each individual swap performed by `swap` or `batchSwap`."
									},
									"eventSelector": "2170c741c41531aec20e7c107c24eecfdd15e69c9bb0a8dd37b1840b9e0b207b",
									"id": 2063,
									"name": "Swap",
									"nameLocation": "30391:4:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2051,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "30422:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "30406:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2050,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "30406:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2054,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenIn",
												"nameLocation": "30465:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "30439:33:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 2053,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2052,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 830,
														"src": "30439:17:10"
													},
													"referencedDeclaration": 830,
													"src": "30439:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2057,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenOut",
												"nameLocation": "30509:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "30483:34:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 2056,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2055,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 830,
														"src": "30483:17:10"
													},
													"referencedDeclaration": 830,
													"src": "30483:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2059,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "30536:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "30528:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2058,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "30528:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2061,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "30563:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 2063,
												"src": "30555:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2060,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "30555:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "30395:184:10"
									},
									"src": "30385:195:10"
								},
								{
									"canonicalName": "IBeetVault.FundManagement",
									"id": 2072,
									"members": [
										{
											"constant": false,
											"id": 2065,
											"mutability": "mutable",
											"name": "sender",
											"nameLocation": "31571:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 2072,
											"src": "31563:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2064,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "31563:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2067,
											"mutability": "mutable",
											"name": "fromInternalBalance",
											"nameLocation": "31593:19:10",
											"nodeType": "VariableDeclaration",
											"scope": 2072,
											"src": "31588:24:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 2066,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "31588:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2069,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "31639:9:10",
											"nodeType": "VariableDeclaration",
											"scope": 2072,
											"src": "31623:25:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address_payable",
												"typeString": "address payable"
											},
											"typeName": {
												"id": 2068,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "31623:15:10",
												"stateMutability": "payable",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2071,
											"mutability": "mutable",
											"name": "toInternalBalance",
											"nameLocation": "31664:17:10",
											"nodeType": "VariableDeclaration",
											"scope": 2072,
											"src": "31659:22:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 2070,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "31659:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "FundManagement",
									"nameLocation": "31537:14:10",
									"nodeType": "StructDefinition",
									"scope": 2137,
									"src": "31530:159:10",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2073,
										"nodeType": "StructuredDocumentation",
										"src": "31697:1041:10",
										"text": " @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n receives are the same that an equivalent `batchSwap` call would receive.\n Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n approve them for the Vault, or even know a user's address.\n Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n eth_call instead of eth_sendTransaction."
									},
									"functionSelector": "f84d066e",
									"id": 2093,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "queryBatchSwap",
									"nameLocation": "32753:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2088,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2076,
												"mutability": "mutable",
												"name": "kind",
												"nameLocation": "32787:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2093,
												"src": "32778:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_SwapKind_$1979",
													"typeString": "enum IBeetVault.SwapKind"
												},
												"typeName": {
													"id": 2075,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2074,
														"name": "SwapKind",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1979,
														"src": "32778:8:10"
													},
													"referencedDeclaration": 1979,
													"src": "32778:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_SwapKind_$1979",
														"typeString": "enum IBeetVault.SwapKind"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2080,
												"mutability": "mutable",
												"name": "swaps",
												"nameLocation": "32825:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2093,
												"src": "32802:28:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$2048_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IBeetVault.BatchSwapStep[]"
												},
												"typeName": {
													"baseType": {
														"id": 2078,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2077,
															"name": "BatchSwapStep",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 2048,
															"src": "32802:13:10"
														},
														"referencedDeclaration": 2048,
														"src": "32802:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BatchSwapStep_$2048_storage_ptr",
															"typeString": "struct IBeetVault.BatchSwapStep"
														}
													},
													"id": 2079,
													"nodeType": "ArrayTypeName",
													"src": "32802:15:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$2048_storage_$dyn_storage_ptr",
														"typeString": "struct IBeetVault.BatchSwapStep[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2084,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "32857:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2093,
												"src": "32841:22:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_memory_ptr",
													"typeString": "contract IAsset[]"
												},
												"typeName": {
													"baseType": {
														"id": 2082,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2081,
															"name": "IAsset",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1660,
															"src": "32841:6:10"
														},
														"referencedDeclaration": 1660,
														"src": "32841:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IAsset_$1660",
															"typeString": "contract IAsset"
														}
													},
													"id": 2083,
													"nodeType": "ArrayTypeName",
													"src": "32841:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IAsset_$1660_$dyn_storage_ptr",
														"typeString": "contract IAsset[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2087,
												"mutability": "mutable",
												"name": "funds",
												"nameLocation": "32896:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2093,
												"src": "32874:27:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_FundManagement_$2072_memory_ptr",
													"typeString": "struct IBeetVault.FundManagement"
												},
												"typeName": {
													"id": 2086,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2085,
														"name": "FundManagement",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2072,
														"src": "32874:14:10"
													},
													"referencedDeclaration": 2072,
													"src": "32874:14:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_FundManagement_$2072_storage_ptr",
														"typeString": "struct IBeetVault.FundManagement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "32767:141:10"
									},
									"returnParameters": {
										"id": 2092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2091,
												"mutability": "mutable",
												"name": "assetDeltas",
												"nameLocation": "32943:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 2093,
												"src": "32927:27:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
													"typeString": "int256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2089,
														"name": "int256",
														"nodeType": "ElementaryTypeName",
														"src": "32927:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 2090,
													"nodeType": "ArrayTypeName",
													"src": "32927:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
														"typeString": "int256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "32926:29:10"
									},
									"scope": 2137,
									"src": "32744:212:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2094,
										"nodeType": "StructuredDocumentation",
										"src": "33968:441:10",
										"text": " @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n Pool Balance management features batching, which means a single contract call can be used to perform multiple\n operations of different kinds, with different Pools and tokens, at once.\n For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."
									},
									"functionSelector": "e6c46092",
									"id": 2101,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "managePoolBalance",
									"nameLocation": "34424:17:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2098,
												"mutability": "mutable",
												"name": "ops",
												"nameLocation": "34465:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 2101,
												"src": "34442:26:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_PoolBalanceOp_$2112_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IBeetVault.PoolBalanceOp[]"
												},
												"typeName": {
													"baseType": {
														"id": 2096,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2095,
															"name": "PoolBalanceOp",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 2112,
															"src": "34442:13:10"
														},
														"referencedDeclaration": 2112,
														"src": "34442:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PoolBalanceOp_$2112_storage_ptr",
															"typeString": "struct IBeetVault.PoolBalanceOp"
														}
													},
													"id": 2097,
													"nodeType": "ArrayTypeName",
													"src": "34442:15:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_PoolBalanceOp_$2112_storage_$dyn_storage_ptr",
														"typeString": "struct IBeetVault.PoolBalanceOp[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34441:28:10"
									},
									"returnParameters": {
										"id": 2100,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "34478:0:10"
									},
									"scope": 2137,
									"src": "34415:64:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IBeetVault.PoolBalanceOp",
									"id": 2112,
									"members": [
										{
											"constant": false,
											"id": 2104,
											"mutability": "mutable",
											"name": "kind",
											"nameLocation": "34537:4:10",
											"nodeType": "VariableDeclaration",
											"scope": 2112,
											"src": "34519:22:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_enum$_PoolBalanceOpKind_$2116",
												"typeString": "enum IBeetVault.PoolBalanceOpKind"
											},
											"typeName": {
												"id": 2103,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 2102,
													"name": "PoolBalanceOpKind",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 2116,
													"src": "34519:17:10"
												},
												"referencedDeclaration": 2116,
												"src": "34519:17:10",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_PoolBalanceOpKind_$2116",
													"typeString": "enum IBeetVault.PoolBalanceOpKind"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2106,
											"mutability": "mutable",
											"name": "poolId",
											"nameLocation": "34560:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 2112,
											"src": "34552:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 2105,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "34552:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2109,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "34595:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 2112,
											"src": "34577:23:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
												"typeString": "contract IERC20Upgradeable"
											},
											"typeName": {
												"id": 2108,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 2107,
													"name": "IERC20Upgradeable",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 830,
													"src": "34577:17:10"
												},
												"referencedDeclaration": 830,
												"src": "34577:17:10",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2111,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "34619:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 2112,
											"src": "34611:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2110,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "34611:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolBalanceOp",
									"nameLocation": "34494:13:10",
									"nodeType": "StructDefinition",
									"scope": 2137,
									"src": "34487:146:10",
									"visibility": "public"
								},
								{
									"canonicalName": "IBeetVault.PoolBalanceOpKind",
									"id": 2116,
									"members": [
										{
											"id": 2113,
											"name": "WITHDRAW",
											"nameLocation": "35174:8:10",
											"nodeType": "EnumValue",
											"src": "35174:8:10"
										},
										{
											"id": 2114,
											"name": "DEPOSIT",
											"nameLocation": "35193:7:10",
											"nodeType": "EnumValue",
											"src": "35193:7:10"
										},
										{
											"id": 2115,
											"name": "UPDATE",
											"nameLocation": "35211:6:10",
											"nodeType": "EnumValue",
											"src": "35211:6:10"
										}
									],
									"name": "PoolBalanceOpKind",
									"nameLocation": "35145:17:10",
									"nodeType": "EnumDefinition",
									"src": "35140:84:10"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2117,
										"nodeType": "StructuredDocumentation",
										"src": "35232:111:10",
										"text": " @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`."
									},
									"eventSelector": "6edcaf6241105b4c94c2efdbf3a6b12458eb3d07be3a0e81d24b13c44045fe7a",
									"id": 2130,
									"name": "PoolBalanceManaged",
									"nameLocation": "35355:18:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2119,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nameLocation": "35400:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2130,
												"src": "35384:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2118,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "35384:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2121,
												"indexed": true,
												"mutability": "mutable",
												"name": "assetManager",
												"nameLocation": "35433:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 2130,
												"src": "35417:28:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "35417:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2124,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "35482:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2130,
												"src": "35456:31:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 2123,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2122,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 830,
														"src": "35456:17:10"
													},
													"referencedDeclaration": 830,
													"src": "35456:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$830",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2126,
												"indexed": false,
												"mutability": "mutable",
												"name": "cashDelta",
												"nameLocation": "35505:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 2130,
												"src": "35498:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2125,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "35498:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2128,
												"indexed": false,
												"mutability": "mutable",
												"name": "managedDelta",
												"nameLocation": "35532:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 2130,
												"src": "35525:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2127,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "35525:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "35373:178:10"
									},
									"src": "35349:203:10"
								},
								{
									"documentation": {
										"id": 2131,
										"nodeType": "StructuredDocumentation",
										"src": "36446:649:10",
										"text": " @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n error in some part of the system.\n The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n While the contract is paused, the following features are disabled:\n - depositing and transferring internal balance\n - transferring external balance (using the Vault's allowance)\n - swaps\n - joining Pools\n - Asset Manager interactions\n Internal Balance can still be withdrawn, and Pools exited."
									},
									"functionSelector": "16c38b3c",
									"id": 2136,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setPaused",
									"nameLocation": "37110:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2133,
												"mutability": "mutable",
												"name": "paused",
												"nameLocation": "37125:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2136,
												"src": "37120:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2132,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "37120:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "37119:13:10"
									},
									"returnParameters": {
										"id": 2135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "37141:0:10"
									},
									"scope": 2137,
									"src": "37101:41:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2138,
							"src": "273:36940:10",
							"usedErrors": []
						}
					],
					"src": "35:37180:10"
				},
				"id": 10
			},
			"interfaces/ISignaturesValidator.sol": {
				"ast": {
					"absolutePath": "interfaces/ISignaturesValidator.sol",
					"exportedSymbols": {
						"ISignaturesValidator": [
							2155
						]
					},
					"id": 2156,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2139,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISignaturesValidator",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2140,
								"nodeType": "StructuredDocumentation",
								"src": "62:97:11",
								"text": " @dev Interface for the SignatureValidator helper, used to support meta-transactions."
							},
							"fullyImplemented": false,
							"id": 2155,
							"linearizedBaseContracts": [
								2155
							],
							"name": "ISignaturesValidator",
							"nameLocation": "171:20:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2141,
										"nodeType": "StructuredDocumentation",
										"src": "199:62:11",
										"text": " @dev Returns the EIP712 domain separator."
									},
									"functionSelector": "ed24911d",
									"id": 2146,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getDomainSeparator",
									"nameLocation": "276:18:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2142,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "294:2:11"
									},
									"returnParameters": {
										"id": 2145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2144,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2146,
												"src": "320:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2143,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "320:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "319:9:11"
									},
									"scope": 2155,
									"src": "267:62:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2147,
										"nodeType": "StructuredDocumentation",
										"src": "337:85:11",
										"text": " @dev Returns the next nonce used by an address to sign messages."
									},
									"functionSelector": "90193b7c",
									"id": 2154,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getNextNonce",
									"nameLocation": "437:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2149,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "458:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 2154,
												"src": "450:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2148,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "449:14:11"
									},
									"returnParameters": {
										"id": 2153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2152,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2154,
												"src": "487:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "487:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "486:9:11"
									},
									"scope": 2155,
									"src": "428:68:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2156,
							"src": "161:338:11",
							"usedErrors": []
						}
					],
					"src": "35:466:11"
				},
				"id": 11
			},
			"interfaces/ITemporarilyPausable.sol": {
				"ast": {
					"absolutePath": "interfaces/ITemporarilyPausable.sol",
					"exportedSymbols": {
						"ITemporarilyPausable": [
							2173
						]
					},
					"id": 2174,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2157,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ITemporarilyPausable",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 2173,
							"linearizedBaseContracts": [
								2173
							],
							"name": "ITemporarilyPausable",
							"nameLocation": "72:20:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 2158,
										"nodeType": "StructuredDocumentation",
										"src": "100:85:12",
										"text": " @dev Emitted every time the pause state changes by `_setPaused`."
									},
									"eventSelector": "9e3a5e37224532dea67b89face185703738a228a6e8a23dee546960180d3be64",
									"id": 2162,
									"name": "PausedStateChanged",
									"nameLocation": "197:18:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2160,
												"indexed": false,
												"mutability": "mutable",
												"name": "paused",
												"nameLocation": "221:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2162,
												"src": "216:11:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2159,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "216:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "215:13:12"
									},
									"src": "191:38:12"
								},
								{
									"documentation": {
										"id": 2163,
										"nodeType": "StructuredDocumentation",
										"src": "237:59:12",
										"text": " @dev Returns the current paused state."
									},
									"functionSelector": "1c0de051",
									"id": 2172,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPausedState",
									"nameLocation": "311:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2164,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "325:2:12"
									},
									"returnParameters": {
										"id": 2171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2166,
												"mutability": "mutable",
												"name": "paused",
												"nameLocation": "397:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2172,
												"src": "392:11:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2165,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "392:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2168,
												"mutability": "mutable",
												"name": "pauseWindowEndTime",
												"nameLocation": "426:18:12",
												"nodeType": "VariableDeclaration",
												"scope": 2172,
												"src": "418:26:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "418:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2170,
												"mutability": "mutable",
												"name": "bufferPeriodEndTime",
												"nameLocation": "467:19:12",
												"nodeType": "VariableDeclaration",
												"scope": 2172,
												"src": "459:27:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2169,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "459:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "377:120:12"
									},
									"scope": 2173,
									"src": "302:196:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2174,
							"src": "62:439:12",
							"usedErrors": []
						}
					],
					"src": "35:468:12"
				},
				"id": 12
			},
			"interfaces/IVault.sol": {
				"ast": {
					"absolutePath": "interfaces/IVault.sol",
					"exportedSymbols": {
						"IVault": [
							2184
						]
					},
					"id": 2185,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2175,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IVault",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 2184,
							"linearizedBaseContracts": [
								2184
							],
							"name": "IVault",
							"nameLocation": "72:6:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "77c7b8fc",
									"id": 2180,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPricePerFullShare",
									"nameLocation": "95:20:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2176,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "115:2:13"
									},
									"returnParameters": {
										"id": 2179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2178,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2180,
												"src": "141:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "141:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "140:9:13"
									},
									"scope": 2184,
									"src": "86:64:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "de5f6268",
									"id": 2183,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "depositAll",
									"nameLocation": "165:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2181,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "175:2:13"
									},
									"returnParameters": {
										"id": 2182,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "186:0:13"
									},
									"scope": 2184,
									"src": "156:31:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2185,
							"src": "62:128:13",
							"usedErrors": []
						}
					],
					"src": "35:157:13"
				},
				"id": 13
			}
		}
	}
}